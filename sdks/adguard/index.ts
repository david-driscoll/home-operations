// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClientArgs, ClientState } from "./client";
export type Client = import("./client").Client;
export const Client: typeof import("./client").Client = null as any;
utilities.lazyLoad(exports, ["Client"], () => require("./client"));

export { ConfigArgs, ConfigState } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { GetClientArgs, GetClientResult, GetClientOutputArgs } from "./getClient";
export const getClient: typeof import("./getClient").getClient = null as any;
export const getClientOutput: typeof import("./getClient").getClientOutput = null as any;
utilities.lazyLoad(exports, ["getClient","getClientOutput"], () => require("./getClient"));

export { GetConfigResult } from "./getConfig";
export const getConfig: typeof import("./getConfig").getConfig = null as any;
export const getConfigOutput: typeof import("./getConfig").getConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConfig","getConfigOutput"], () => require("./getConfig"));

export { GetListFilterArgs, GetListFilterResult, GetListFilterOutputArgs } from "./getListFilter";
export const getListFilter: typeof import("./getListFilter").getListFilter = null as any;
export const getListFilterOutput: typeof import("./getListFilter").getListFilterOutput = null as any;
utilities.lazyLoad(exports, ["getListFilter","getListFilterOutput"], () => require("./getListFilter"));

export { GetRewriteArgs, GetRewriteResult, GetRewriteOutputArgs } from "./getRewrite";
export const getRewrite: typeof import("./getRewrite").getRewrite = null as any;
export const getRewriteOutput: typeof import("./getRewrite").getRewriteOutput = null as any;
utilities.lazyLoad(exports, ["getRewrite","getRewriteOutput"], () => require("./getRewrite"));

export { GetUserRulesResult } from "./getUserRules";
export const getUserRules: typeof import("./getUserRules").getUserRules = null as any;
export const getUserRulesOutput: typeof import("./getUserRules").getUserRulesOutput = null as any;
utilities.lazyLoad(exports, ["getUserRules","getUserRulesOutput"], () => require("./getUserRules"));

export { ListFilterArgs, ListFilterState } from "./listFilter";
export type ListFilter = import("./listFilter").ListFilter;
export const ListFilter: typeof import("./listFilter").ListFilter = null as any;
utilities.lazyLoad(exports, ["ListFilter"], () => require("./listFilter"));

export * from "./provider";
import { Provider } from "./provider";

export { RewriteArgs, RewriteState } from "./rewrite";
export type Rewrite = import("./rewrite").Rewrite;
export const Rewrite: typeof import("./rewrite").Rewrite = null as any;
utilities.lazyLoad(exports, ["Rewrite"], () => require("./rewrite"));

export { UserRulesArgs, UserRulesState } from "./userRules";
export type UserRules = import("./userRules").UserRules;
export const UserRules: typeof import("./userRules").UserRules = null as any;
utilities.lazyLoad(exports, ["UserRules"], () => require("./userRules"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "adguard:index/client:Client":
                return new Client(name, <any>undefined, { urn })
            case "adguard:index/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "adguard:index/listFilter:ListFilter":
                return new ListFilter(name, <any>undefined, { urn })
            case "adguard:index/rewrite:Rewrite":
                return new Rewrite(name, <any>undefined, { urn })
            case "adguard:index/userRules:UserRules":
                return new UserRules(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("adguard", "index/client", _module)
pulumi.runtime.registerResourceModule("adguard", "index/config", _module)
pulumi.runtime.registerResourceModule("adguard", "index/listFilter", _module)
pulumi.runtime.registerResourceModule("adguard", "index/rewrite", _module)
pulumi.runtime.registerResourceModule("adguard", "index/userRules", _module)
pulumi.runtime.registerResourcePackage("adguard", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:adguard") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
