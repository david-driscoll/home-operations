// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Client extends pulumi.CustomResource {
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientState, opts?: pulumi.CustomResourceOptions): Client {
        return new Client(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'adguard:index/client:Client';

    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Client {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }

    /**
     * Set of blocked services for this client
     */
    declare public readonly blockedServices: pulumi.Output<string[] | undefined>;
    /**
     * Sets periods of inactivity for filtering blocked services. The schedule contains 7 days (Sunday to Saturday) and a time zone.
     */
    declare public readonly blockedServicesPauseSchedule: pulumi.Output<outputs.ClientBlockedServicesPauseSchedule>;
    /**
     * Whether to have filtering enabled on this client. Defaults to `false`
     */
    declare public readonly filteringEnabled: pulumi.Output<boolean>;
    /**
     * Set of identifiers for this client (IP, CIDR, MAC, or ClientID)
     */
    declare public readonly ids: pulumi.Output<string[]>;
    /**
     * Whether to write to the query log. Defaults to `false`
     */
    declare public readonly ignoreQuerylog: pulumi.Output<boolean>;
    /**
     * Whether to be included in the statistics. Defaults to `false`
     */
    declare public readonly ignoreStatistics: pulumi.Output<boolean>;
    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * Name of the client
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether to have AdGuard parental controls enabled on this client. Defaults to `false`
     */
    declare public readonly parentalEnabled: pulumi.Output<boolean>;
    /**
     * Whether to have AdGuard browsing security enabled on this client. Defaults to `false`
     */
    declare public readonly safebrowsingEnabled: pulumi.Output<boolean>;
    declare public readonly safesearch: pulumi.Output<outputs.ClientSafesearch>;
    /**
     * Set of tags for this client
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * List of upstream DNS server for this client
     */
    declare public readonly upstreams: pulumi.Output<string[] | undefined>;
    /**
     * Whether to enable DNS caching for this client's custom upstream configuration. Defaults to `false`
     */
    declare public readonly upstreamsCacheEnabled: pulumi.Output<boolean>;
    /**
     * The upstreams DNS cache size, in bytes
     */
    declare public readonly upstreamsCacheSize: pulumi.Output<number>;
    /**
     * Whether to use global settings for blocked services. Defaults to `true`
     */
    declare public readonly useGlobalBlockedServices: pulumi.Output<boolean>;
    /**
     * Whether to use global settings on this client. Defaults to `true`
     */
    declare public readonly useGlobalSettings: pulumi.Output<boolean>;

    /**
     * Create a Client resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientArgs | ClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientState | undefined;
            resourceInputs["blockedServices"] = state?.blockedServices;
            resourceInputs["blockedServicesPauseSchedule"] = state?.blockedServicesPauseSchedule;
            resourceInputs["filteringEnabled"] = state?.filteringEnabled;
            resourceInputs["ids"] = state?.ids;
            resourceInputs["ignoreQuerylog"] = state?.ignoreQuerylog;
            resourceInputs["ignoreStatistics"] = state?.ignoreStatistics;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["name"] = state?.name;
            resourceInputs["parentalEnabled"] = state?.parentalEnabled;
            resourceInputs["safebrowsingEnabled"] = state?.safebrowsingEnabled;
            resourceInputs["safesearch"] = state?.safesearch;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["upstreams"] = state?.upstreams;
            resourceInputs["upstreamsCacheEnabled"] = state?.upstreamsCacheEnabled;
            resourceInputs["upstreamsCacheSize"] = state?.upstreamsCacheSize;
            resourceInputs["useGlobalBlockedServices"] = state?.useGlobalBlockedServices;
            resourceInputs["useGlobalSettings"] = state?.useGlobalSettings;
        } else {
            const args = argsOrState as ClientArgs | undefined;
            if (args?.ids === undefined && !opts.urn) {
                throw new Error("Missing required property 'ids'");
            }
            resourceInputs["blockedServices"] = args?.blockedServices;
            resourceInputs["blockedServicesPauseSchedule"] = args?.blockedServicesPauseSchedule;
            resourceInputs["filteringEnabled"] = args?.filteringEnabled;
            resourceInputs["ids"] = args?.ids;
            resourceInputs["ignoreQuerylog"] = args?.ignoreQuerylog;
            resourceInputs["ignoreStatistics"] = args?.ignoreStatistics;
            resourceInputs["name"] = args?.name;
            resourceInputs["parentalEnabled"] = args?.parentalEnabled;
            resourceInputs["safebrowsingEnabled"] = args?.safebrowsingEnabled;
            resourceInputs["safesearch"] = args?.safesearch;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["upstreams"] = args?.upstreams;
            resourceInputs["upstreamsCacheEnabled"] = args?.upstreamsCacheEnabled;
            resourceInputs["upstreamsCacheSize"] = args?.upstreamsCacheSize;
            resourceInputs["useGlobalBlockedServices"] = args?.useGlobalBlockedServices;
            resourceInputs["useGlobalSettings"] = args?.useGlobalSettings;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Client.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Client resources.
 */
export interface ClientState {
    /**
     * Set of blocked services for this client
     */
    blockedServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets periods of inactivity for filtering blocked services. The schedule contains 7 days (Sunday to Saturday) and a time zone.
     */
    blockedServicesPauseSchedule?: pulumi.Input<inputs.ClientBlockedServicesPauseSchedule>;
    /**
     * Whether to have filtering enabled on this client. Defaults to `false`
     */
    filteringEnabled?: pulumi.Input<boolean>;
    /**
     * Set of identifiers for this client (IP, CIDR, MAC, or ClientID)
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to write to the query log. Defaults to `false`
     */
    ignoreQuerylog?: pulumi.Input<boolean>;
    /**
     * Whether to be included in the statistics. Defaults to `false`
     */
    ignoreStatistics?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of the client
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to have AdGuard parental controls enabled on this client. Defaults to `false`
     */
    parentalEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to have AdGuard browsing security enabled on this client. Defaults to `false`
     */
    safebrowsingEnabled?: pulumi.Input<boolean>;
    safesearch?: pulumi.Input<inputs.ClientSafesearch>;
    /**
     * Set of tags for this client
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of upstream DNS server for this client
     */
    upstreams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable DNS caching for this client's custom upstream configuration. Defaults to `false`
     */
    upstreamsCacheEnabled?: pulumi.Input<boolean>;
    /**
     * The upstreams DNS cache size, in bytes
     */
    upstreamsCacheSize?: pulumi.Input<number>;
    /**
     * Whether to use global settings for blocked services. Defaults to `true`
     */
    useGlobalBlockedServices?: pulumi.Input<boolean>;
    /**
     * Whether to use global settings on this client. Defaults to `true`
     */
    useGlobalSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Client resource.
 */
export interface ClientArgs {
    /**
     * Set of blocked services for this client
     */
    blockedServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets periods of inactivity for filtering blocked services. The schedule contains 7 days (Sunday to Saturday) and a time zone.
     */
    blockedServicesPauseSchedule?: pulumi.Input<inputs.ClientBlockedServicesPauseSchedule>;
    /**
     * Whether to have filtering enabled on this client. Defaults to `false`
     */
    filteringEnabled?: pulumi.Input<boolean>;
    /**
     * Set of identifiers for this client (IP, CIDR, MAC, or ClientID)
     */
    ids: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to write to the query log. Defaults to `false`
     */
    ignoreQuerylog?: pulumi.Input<boolean>;
    /**
     * Whether to be included in the statistics. Defaults to `false`
     */
    ignoreStatistics?: pulumi.Input<boolean>;
    /**
     * Name of the client
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to have AdGuard parental controls enabled on this client. Defaults to `false`
     */
    parentalEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to have AdGuard browsing security enabled on this client. Defaults to `false`
     */
    safebrowsingEnabled?: pulumi.Input<boolean>;
    safesearch?: pulumi.Input<inputs.ClientSafesearch>;
    /**
     * Set of tags for this client
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of upstream DNS server for this client
     */
    upstreams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable DNS caching for this client's custom upstream configuration. Defaults to `false`
     */
    upstreamsCacheEnabled?: pulumi.Input<boolean>;
    /**
     * The upstreams DNS cache size, in bytes
     */
    upstreamsCacheSize?: pulumi.Input<number>;
    /**
     * Whether to use global settings for blocked services. Defaults to `true`
     */
    useGlobalBlockedServices?: pulumi.Input<boolean>;
    /**
     * Whether to use global settings on this client. Defaults to `true`
     */
    useGlobalSettings?: pulumi.Input<boolean>;
}
