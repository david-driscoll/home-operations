"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Config(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["blockedServices"] = state?.blockedServices;
            resourceInputs["blockedServicesPauseSchedule"] = state?.blockedServicesPauseSchedule;
            resourceInputs["dhcp"] = state?.dhcp;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["filtering"] = state?.filtering;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["parentalControl"] = state?.parentalControl;
            resourceInputs["querylog"] = state?.querylog;
            resourceInputs["safebrowsing"] = state?.safebrowsing;
            resourceInputs["safesearch"] = state?.safesearch;
            resourceInputs["stats"] = state?.stats;
            resourceInputs["tls"] = state?.tls;
        }
        else {
            const args = argsOrState;
            resourceInputs["blockedServices"] = args?.blockedServices;
            resourceInputs["blockedServicesPauseSchedule"] = args?.blockedServicesPauseSchedule;
            resourceInputs["dhcp"] = args?.dhcp;
            resourceInputs["dns"] = args?.dns;
            resourceInputs["filtering"] = args?.filtering;
            resourceInputs["parentalControl"] = args?.parentalControl;
            resourceInputs["querylog"] = args?.querylog;
            resourceInputs["safebrowsing"] = args?.safebrowsing;
            resourceInputs["safesearch"] = args?.safesearch;
            resourceInputs["stats"] = args?.stats;
            resourceInputs["tls"] = args?.tls;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Config.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Config = Config;
/** @internal */
Config.__pulumiType = 'adguard:index/config:Config';
//# sourceMappingURL=config.js.map