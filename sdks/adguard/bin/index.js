"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.UserRules = exports.Rewrite = exports.ListFilter = exports.getUserRulesOutput = exports.getUserRules = exports.getRewriteOutput = exports.getRewrite = exports.getListFilterOutput = exports.getListFilter = exports.getConfigOutput = exports.getConfig = exports.getClientOutput = exports.getClient = exports.Config = exports.Client = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Client = null;
utilities.lazyLoad(exports, ["Client"], () => require("./client"));
exports.Config = null;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));
exports.getClient = null;
exports.getClientOutput = null;
utilities.lazyLoad(exports, ["getClient", "getClientOutput"], () => require("./getClient"));
exports.getConfig = null;
exports.getConfigOutput = null;
utilities.lazyLoad(exports, ["getConfig", "getConfigOutput"], () => require("./getConfig"));
exports.getListFilter = null;
exports.getListFilterOutput = null;
utilities.lazyLoad(exports, ["getListFilter", "getListFilterOutput"], () => require("./getListFilter"));
exports.getRewrite = null;
exports.getRewriteOutput = null;
utilities.lazyLoad(exports, ["getRewrite", "getRewriteOutput"], () => require("./getRewrite"));
exports.getUserRules = null;
exports.getUserRulesOutput = null;
utilities.lazyLoad(exports, ["getUserRules", "getUserRulesOutput"], () => require("./getUserRules"));
exports.ListFilter = null;
utilities.lazyLoad(exports, ["ListFilter"], () => require("./listFilter"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.Rewrite = null;
utilities.lazyLoad(exports, ["Rewrite"], () => require("./rewrite"));
exports.UserRules = null;
utilities.lazyLoad(exports, ["UserRules"], () => require("./userRules"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "adguard:index/client:Client":
                return new exports.Client(name, undefined, { urn });
            case "adguard:index/config:Config":
                return new exports.Config(name, undefined, { urn });
            case "adguard:index/listFilter:ListFilter":
                return new exports.ListFilter(name, undefined, { urn });
            case "adguard:index/rewrite:Rewrite":
                return new exports.Rewrite(name, undefined, { urn });
            case "adguard:index/userRules:UserRules":
                return new exports.UserRules(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("adguard", "index/client", _module);
pulumi.runtime.registerResourceModule("adguard", "index/config", _module);
pulumi.runtime.registerResourceModule("adguard", "index/listFilter", _module);
pulumi.runtime.registerResourceModule("adguard", "index/rewrite", _module);
pulumi.runtime.registerResourceModule("adguard", "index/userRules", _module);
pulumi.runtime.registerResourcePackage("adguard", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:adguard") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map