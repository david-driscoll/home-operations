// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserRules extends pulumi.CustomResource {
    /**
     * Get an existing UserRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserRulesState, opts?: pulumi.CustomResourceOptions): UserRules {
        return new UserRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'adguard:index/userRules:UserRules';

    /**
     * Returns true if the given object is an instance of UserRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserRules.__pulumiType;
    }

    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * List of user rules
     */
    declare public readonly rules: pulumi.Output<string[]>;

    /**
     * Create a UserRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserRulesArgs | UserRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserRulesState | undefined;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["rules"] = state?.rules;
        } else {
            const args = argsOrState as UserRulesArgs | undefined;
            if (args?.rules === undefined && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["rules"] = args?.rules;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserRules resources.
 */
export interface UserRulesState {
    lastUpdated?: pulumi.Input<string>;
    /**
     * List of user rules
     */
    rules?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a UserRules resource.
 */
export interface UserRulesArgs {
    /**
     * List of user rules
     */
    rules: pulumi.Input<pulumi.Input<string>[]>;
}
