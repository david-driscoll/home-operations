// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigState, opts?: pulumi.CustomResourceOptions): Config {
        return new Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'adguard:index/config:Config';

    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }

    /**
     * Set of services to be blocked globally
     */
    declare public readonly blockedServices: pulumi.Output<string[]>;
    /**
     * Sets periods of inactivity for filtering blocked services. The schedule contains 7 days (Sunday to Saturday) and a time zone.
     */
    declare public readonly blockedServicesPauseSchedule: pulumi.Output<outputs.ConfigBlockedServicesPauseSchedule>;
    declare public readonly dhcp: pulumi.Output<outputs.ConfigDhcp>;
    declare public readonly dns: pulumi.Output<outputs.ConfigDns>;
    declare public readonly filtering: pulumi.Output<outputs.ConfigFiltering>;
    declare public /*out*/ readonly lastUpdated: pulumi.Output<string>;
    /**
     * Whether Parental Control is enabled. Defaults to `false`
     */
    declare public readonly parentalControl: pulumi.Output<boolean>;
    declare public readonly querylog: pulumi.Output<outputs.ConfigQuerylog>;
    /**
     * Whether Safe Browsing is enabled. Defaults to `false`
     */
    declare public readonly safebrowsing: pulumi.Output<boolean>;
    declare public readonly safesearch: pulumi.Output<outputs.ConfigSafesearch>;
    declare public readonly stats: pulumi.Output<outputs.ConfigStats>;
    declare public readonly tls: pulumi.Output<outputs.ConfigTls>;

    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigArgs | ConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigState | undefined;
            resourceInputs["blockedServices"] = state?.blockedServices;
            resourceInputs["blockedServicesPauseSchedule"] = state?.blockedServicesPauseSchedule;
            resourceInputs["dhcp"] = state?.dhcp;
            resourceInputs["dns"] = state?.dns;
            resourceInputs["filtering"] = state?.filtering;
            resourceInputs["lastUpdated"] = state?.lastUpdated;
            resourceInputs["parentalControl"] = state?.parentalControl;
            resourceInputs["querylog"] = state?.querylog;
            resourceInputs["safebrowsing"] = state?.safebrowsing;
            resourceInputs["safesearch"] = state?.safesearch;
            resourceInputs["stats"] = state?.stats;
            resourceInputs["tls"] = state?.tls;
        } else {
            const args = argsOrState as ConfigArgs | undefined;
            resourceInputs["blockedServices"] = args?.blockedServices;
            resourceInputs["blockedServicesPauseSchedule"] = args?.blockedServicesPauseSchedule;
            resourceInputs["dhcp"] = args?.dhcp;
            resourceInputs["dns"] = args?.dns;
            resourceInputs["filtering"] = args?.filtering;
            resourceInputs["parentalControl"] = args?.parentalControl;
            resourceInputs["querylog"] = args?.querylog;
            resourceInputs["safebrowsing"] = args?.safebrowsing;
            resourceInputs["safesearch"] = args?.safesearch;
            resourceInputs["stats"] = args?.stats;
            resourceInputs["tls"] = args?.tls;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Config.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Config resources.
 */
export interface ConfigState {
    /**
     * Set of services to be blocked globally
     */
    blockedServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets periods of inactivity for filtering blocked services. The schedule contains 7 days (Sunday to Saturday) and a time zone.
     */
    blockedServicesPauseSchedule?: pulumi.Input<inputs.ConfigBlockedServicesPauseSchedule>;
    dhcp?: pulumi.Input<inputs.ConfigDhcp>;
    dns?: pulumi.Input<inputs.ConfigDns>;
    filtering?: pulumi.Input<inputs.ConfigFiltering>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Whether Parental Control is enabled. Defaults to `false`
     */
    parentalControl?: pulumi.Input<boolean>;
    querylog?: pulumi.Input<inputs.ConfigQuerylog>;
    /**
     * Whether Safe Browsing is enabled. Defaults to `false`
     */
    safebrowsing?: pulumi.Input<boolean>;
    safesearch?: pulumi.Input<inputs.ConfigSafesearch>;
    stats?: pulumi.Input<inputs.ConfigStats>;
    tls?: pulumi.Input<inputs.ConfigTls>;
}

/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    /**
     * Set of services to be blocked globally
     */
    blockedServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets periods of inactivity for filtering blocked services. The schedule contains 7 days (Sunday to Saturday) and a time zone.
     */
    blockedServicesPauseSchedule?: pulumi.Input<inputs.ConfigBlockedServicesPauseSchedule>;
    dhcp?: pulumi.Input<inputs.ConfigDhcp>;
    dns?: pulumi.Input<inputs.ConfigDns>;
    filtering?: pulumi.Input<inputs.ConfigFiltering>;
    /**
     * Whether Parental Control is enabled. Defaults to `false`
     */
    parentalControl?: pulumi.Input<boolean>;
    querylog?: pulumi.Input<inputs.ConfigQuerylog>;
    /**
     * Whether Safe Browsing is enabled. Defaults to `false`
     */
    safebrowsing?: pulumi.Input<boolean>;
    safesearch?: pulumi.Input<inputs.ConfigSafesearch>;
    stats?: pulumi.Input<inputs.ConfigStats>;
    tls?: pulumi.Input<inputs.ConfigTls>;
}
