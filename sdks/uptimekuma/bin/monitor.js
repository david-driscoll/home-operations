"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monitor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Monitor(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authMethod"] = state?.authMethod;
            resourceInputs["basicAuthPass"] = state?.basicAuthPass;
            resourceInputs["basicAuthUser"] = state?.basicAuthUser;
            resourceInputs["body"] = state?.body;
            resourceInputs["description"] = state?.description;
            resourceInputs["headers"] = state?.headers;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["ignoreTls"] = state?.ignoreTls;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["keyword"] = state?.keyword;
            resourceInputs["maxRedirects"] = state?.maxRedirects;
            resourceInputs["maxRetries"] = state?.maxRetries;
            resourceInputs["method"] = state?.method;
            resourceInputs["monitorId"] = state?.monitorId;
            resourceInputs["name"] = state?.name;
            resourceInputs["port"] = state?.port;
            resourceInputs["resendInterval"] = state?.resendInterval;
            resourceInputs["retryInterval"] = state?.retryInterval;
            resourceInputs["type"] = state?.type;
            resourceInputs["upsideDown"] = state?.upsideDown;
            resourceInputs["url"] = state?.url;
        }
        else {
            const args = argsOrState;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authMethod"] = args?.authMethod;
            resourceInputs["basicAuthPass"] = args?.basicAuthPass ? pulumi.secret(args.basicAuthPass) : undefined;
            resourceInputs["basicAuthUser"] = args?.basicAuthUser;
            resourceInputs["body"] = args?.body;
            resourceInputs["description"] = args?.description;
            resourceInputs["headers"] = args?.headers;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["ignoreTls"] = args?.ignoreTls;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["keyword"] = args?.keyword;
            resourceInputs["maxRedirects"] = args?.maxRedirects;
            resourceInputs["maxRetries"] = args?.maxRetries;
            resourceInputs["method"] = args?.method;
            resourceInputs["name"] = args?.name;
            resourceInputs["port"] = args?.port;
            resourceInputs["resendInterval"] = args?.resendInterval;
            resourceInputs["retryInterval"] = args?.retryInterval;
            resourceInputs["type"] = args?.type;
            resourceInputs["upsideDown"] = args?.upsideDown;
            resourceInputs["url"] = args?.url;
            resourceInputs["monitorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["basicAuthPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Monitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Monitor = Monitor;
/** @internal */
Monitor.__pulumiType = 'uptimekuma:index/monitor:Monitor';
//# sourceMappingURL=monitor.js.map