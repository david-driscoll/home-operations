// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'uptimekuma:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * Authentication method (basic, ntlm, mtls).
     */
    declare public readonly authMethod: pulumi.Output<string | undefined>;
    /**
     * Basic auth password.
     */
    declare public readonly basicAuthPass: pulumi.Output<string | undefined>;
    /**
     * Basic auth username.
     */
    declare public readonly basicAuthUser: pulumi.Output<string | undefined>;
    /**
     * Request body for http monitors.
     */
    declare public readonly body: pulumi.Output<string | undefined>;
    /**
     * Monitor description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Request headers for http monitors (JSON format).
     */
    declare public readonly headers: pulumi.Output<string | undefined>;
    /**
     * Hostname for ping, port, etc. monitors.
     */
    declare public readonly hostname: pulumi.Output<string | undefined>;
    /**
     * Ignore TLS/SSL errors.
     */
    declare public readonly ignoreTls: pulumi.Output<boolean | undefined>;
    /**
     * Check interval in seconds.
     */
    declare public readonly interval: pulumi.Output<number>;
    /**
     * Keyword to search for in response.
     */
    declare public readonly keyword: pulumi.Output<string | undefined>;
    /**
     * Maximum number of redirects to follow.
     */
    declare public readonly maxRedirects: pulumi.Output<number | undefined>;
    /**
     * Maximum number of retries.
     */
    declare public readonly maxRetries: pulumi.Output<number>;
    /**
     * HTTP method (GET, POST, etc.) for http monitors.
     */
    declare public readonly method: pulumi.Output<string | undefined>;
    /**
     * Monitor identifier.
     */
    declare public /*out*/ readonly monitorId: pulumi.Output<number>;
    /**
     * Monitor name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Port number for port monitors.
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * Notification resend interval in seconds.
     */
    declare public readonly resendInterval: pulumi.Output<number>;
    /**
     * Retry interval in seconds.
     */
    declare public readonly retryInterval: pulumi.Output<number>;
    /**
     * Monitor type (http, ping, port, etc.).
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Invert status (treat DOWN as UP and vice versa).
     */
    declare public readonly upsideDown: pulumi.Output<boolean | undefined>;
    /**
     * URL to monitor (required for http, keyword monitors).
     */
    declare public readonly url: pulumi.Output<string | undefined>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["authMethod"] = state?.authMethod;
            resourceInputs["basicAuthPass"] = state?.basicAuthPass;
            resourceInputs["basicAuthUser"] = state?.basicAuthUser;
            resourceInputs["body"] = state?.body;
            resourceInputs["description"] = state?.description;
            resourceInputs["headers"] = state?.headers;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["ignoreTls"] = state?.ignoreTls;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["keyword"] = state?.keyword;
            resourceInputs["maxRedirects"] = state?.maxRedirects;
            resourceInputs["maxRetries"] = state?.maxRetries;
            resourceInputs["method"] = state?.method;
            resourceInputs["monitorId"] = state?.monitorId;
            resourceInputs["name"] = state?.name;
            resourceInputs["port"] = state?.port;
            resourceInputs["resendInterval"] = state?.resendInterval;
            resourceInputs["retryInterval"] = state?.retryInterval;
            resourceInputs["type"] = state?.type;
            resourceInputs["upsideDown"] = state?.upsideDown;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authMethod"] = args?.authMethod;
            resourceInputs["basicAuthPass"] = args?.basicAuthPass ? pulumi.secret(args.basicAuthPass) : undefined;
            resourceInputs["basicAuthUser"] = args?.basicAuthUser;
            resourceInputs["body"] = args?.body;
            resourceInputs["description"] = args?.description;
            resourceInputs["headers"] = args?.headers;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["ignoreTls"] = args?.ignoreTls;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["keyword"] = args?.keyword;
            resourceInputs["maxRedirects"] = args?.maxRedirects;
            resourceInputs["maxRetries"] = args?.maxRetries;
            resourceInputs["method"] = args?.method;
            resourceInputs["name"] = args?.name;
            resourceInputs["port"] = args?.port;
            resourceInputs["resendInterval"] = args?.resendInterval;
            resourceInputs["retryInterval"] = args?.retryInterval;
            resourceInputs["type"] = args?.type;
            resourceInputs["upsideDown"] = args?.upsideDown;
            resourceInputs["url"] = args?.url;
            resourceInputs["monitorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["basicAuthPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Monitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * Authentication method (basic, ntlm, mtls).
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Basic auth password.
     */
    basicAuthPass?: pulumi.Input<string>;
    /**
     * Basic auth username.
     */
    basicAuthUser?: pulumi.Input<string>;
    /**
     * Request body for http monitors.
     */
    body?: pulumi.Input<string>;
    /**
     * Monitor description.
     */
    description?: pulumi.Input<string>;
    /**
     * Request headers for http monitors (JSON format).
     */
    headers?: pulumi.Input<string>;
    /**
     * Hostname for ping, port, etc. monitors.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Ignore TLS/SSL errors.
     */
    ignoreTls?: pulumi.Input<boolean>;
    /**
     * Check interval in seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * Keyword to search for in response.
     */
    keyword?: pulumi.Input<string>;
    /**
     * Maximum number of redirects to follow.
     */
    maxRedirects?: pulumi.Input<number>;
    /**
     * Maximum number of retries.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * HTTP method (GET, POST, etc.) for http monitors.
     */
    method?: pulumi.Input<string>;
    /**
     * Monitor identifier.
     */
    monitorId?: pulumi.Input<number>;
    /**
     * Monitor name.
     */
    name?: pulumi.Input<string>;
    /**
     * Port number for port monitors.
     */
    port?: pulumi.Input<number>;
    /**
     * Notification resend interval in seconds.
     */
    resendInterval?: pulumi.Input<number>;
    /**
     * Retry interval in seconds.
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * Monitor type (http, ping, port, etc.).
     */
    type?: pulumi.Input<string>;
    /**
     * Invert status (treat DOWN as UP and vice versa).
     */
    upsideDown?: pulumi.Input<boolean>;
    /**
     * URL to monitor (required for http, keyword monitors).
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * Authentication method (basic, ntlm, mtls).
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Basic auth password.
     */
    basicAuthPass?: pulumi.Input<string>;
    /**
     * Basic auth username.
     */
    basicAuthUser?: pulumi.Input<string>;
    /**
     * Request body for http monitors.
     */
    body?: pulumi.Input<string>;
    /**
     * Monitor description.
     */
    description: pulumi.Input<string>;
    /**
     * Request headers for http monitors (JSON format).
     */
    headers?: pulumi.Input<string>;
    /**
     * Hostname for ping, port, etc. monitors.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Ignore TLS/SSL errors.
     */
    ignoreTls?: pulumi.Input<boolean>;
    /**
     * Check interval in seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * Keyword to search for in response.
     */
    keyword?: pulumi.Input<string>;
    /**
     * Maximum number of redirects to follow.
     */
    maxRedirects?: pulumi.Input<number>;
    /**
     * Maximum number of retries.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * HTTP method (GET, POST, etc.) for http monitors.
     */
    method?: pulumi.Input<string>;
    /**
     * Monitor name.
     */
    name?: pulumi.Input<string>;
    /**
     * Port number for port monitors.
     */
    port?: pulumi.Input<number>;
    /**
     * Notification resend interval in seconds.
     */
    resendInterval?: pulumi.Input<number>;
    /**
     * Retry interval in seconds.
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * Monitor type (http, ping, port, etc.).
     */
    type: pulumi.Input<string>;
    /**
     * Invert status (treat DOWN as UP and vice versa).
     */
    upsideDown?: pulumi.Input<boolean>;
    /**
     * URL to monitor (required for http, keyword monitors).
     */
    url?: pulumi.Input<string>;
}
