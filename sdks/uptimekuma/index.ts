// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { MonitorArgs, MonitorState } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export * from "./provider";
import { Provider } from "./provider";

export { StatusPageArgs, StatusPageState } from "./statusPage";
export type StatusPage = import("./statusPage").StatusPage;
export const StatusPage: typeof import("./statusPage").StatusPage = null as any;
utilities.lazyLoad(exports, ["StatusPage"], () => require("./statusPage"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "uptimekuma:index/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "uptimekuma:index/statusPage:StatusPage":
                return new StatusPage(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("uptimekuma", "index/monitor", _module)
pulumi.runtime.registerResourceModule("uptimekuma", "index/statusPage", _module)
pulumi.runtime.registerResourcePackage("uptimekuma", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:uptimekuma") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
