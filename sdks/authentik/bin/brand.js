"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Brand = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Brand extends pulumi.CustomResource {
    /**
     * Get an existing Brand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Brand(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Brand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Brand.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["brandId"] = state?.brandId;
            resourceInputs["brandingCustomCss"] = state?.brandingCustomCss;
            resourceInputs["brandingDefaultFlowBackground"] = state?.brandingDefaultFlowBackground;
            resourceInputs["brandingFavicon"] = state?.brandingFavicon;
            resourceInputs["brandingLogo"] = state?.brandingLogo;
            resourceInputs["brandingTitle"] = state?.brandingTitle;
            resourceInputs["clientCertificates"] = state?.clientCertificates;
            resourceInputs["default"] = state?.default;
            resourceInputs["defaultApplication"] = state?.defaultApplication;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["flowAuthentication"] = state?.flowAuthentication;
            resourceInputs["flowDeviceCode"] = state?.flowDeviceCode;
            resourceInputs["flowInvalidation"] = state?.flowInvalidation;
            resourceInputs["flowRecovery"] = state?.flowRecovery;
            resourceInputs["flowUnenrollment"] = state?.flowUnenrollment;
            resourceInputs["flowUserSettings"] = state?.flowUserSettings;
            resourceInputs["webCertificate"] = state?.webCertificate;
        }
        else {
            const args = argsOrState;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["brandId"] = args?.brandId;
            resourceInputs["brandingCustomCss"] = args?.brandingCustomCss;
            resourceInputs["brandingDefaultFlowBackground"] = args?.brandingDefaultFlowBackground;
            resourceInputs["brandingFavicon"] = args?.brandingFavicon;
            resourceInputs["brandingLogo"] = args?.brandingLogo;
            resourceInputs["brandingTitle"] = args?.brandingTitle;
            resourceInputs["clientCertificates"] = args?.clientCertificates;
            resourceInputs["default"] = args?.default;
            resourceInputs["defaultApplication"] = args?.defaultApplication;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["flowAuthentication"] = args?.flowAuthentication;
            resourceInputs["flowDeviceCode"] = args?.flowDeviceCode;
            resourceInputs["flowInvalidation"] = args?.flowInvalidation;
            resourceInputs["flowRecovery"] = args?.flowRecovery;
            resourceInputs["flowUnenrollment"] = args?.flowUnenrollment;
            resourceInputs["flowUserSettings"] = args?.flowUserSettings;
            resourceInputs["webCertificate"] = args?.webCertificate;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Brand.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Brand = Brand;
/** @internal */
Brand.__pulumiType = 'authentik:index/brand:Brand';
//# sourceMappingURL=brand.js.map