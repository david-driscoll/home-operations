"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderMicrosoftEntra = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProviderMicrosoftEntra extends pulumi.CustomResource {
    /**
     * Get an existing ProviderMicrosoftEntra resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProviderMicrosoftEntra(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProviderMicrosoftEntra.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderMicrosoftEntra.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["excludeUsersServiceAccount"] = state?.excludeUsersServiceAccount;
            resourceInputs["filterGroup"] = state?.filterGroup;
            resourceInputs["groupDeleteAction"] = state?.groupDeleteAction;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["providerMicrosoftEntraId"] = state?.providerMicrosoftEntraId;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["userDeleteAction"] = state?.userDeleteAction;
        }
        else {
            const args = argsOrState;
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.clientSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if (args?.tenantId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["excludeUsersServiceAccount"] = args?.excludeUsersServiceAccount;
            resourceInputs["filterGroup"] = args?.filterGroup;
            resourceInputs["groupDeleteAction"] = args?.groupDeleteAction;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["providerMicrosoftEntraId"] = args?.providerMicrosoftEntraId;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["userDeleteAction"] = args?.userDeleteAction;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProviderMicrosoftEntra.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ProviderMicrosoftEntra = ProviderMicrosoftEntra;
/** @internal */
ProviderMicrosoftEntra.__pulumiType = 'authentik:index/providerMicrosoftEntra:ProviderMicrosoftEntra';
//# sourceMappingURL=providerMicrosoftEntra.js.map