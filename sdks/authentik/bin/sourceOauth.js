"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceOauth = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SourceOauth extends pulumi.CustomResource {
    /**
     * Get an existing SourceOauth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceOauth(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SourceOauth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceOauth.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessTokenUrl"] = state?.accessTokenUrl;
            resourceInputs["additionalScopes"] = state?.additionalScopes;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationCodeAuthMethod"] = state?.authorizationCodeAuthMethod;
            resourceInputs["authorizationUrl"] = state?.authorizationUrl;
            resourceInputs["callbackUri"] = state?.callbackUri;
            resourceInputs["consumerKey"] = state?.consumerKey;
            resourceInputs["consumerSecret"] = state?.consumerSecret;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["enrollmentFlow"] = state?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = state?.groupMatchingMode;
            resourceInputs["name"] = state?.name;
            resourceInputs["oidcJwks"] = state?.oidcJwks;
            resourceInputs["oidcJwksUrl"] = state?.oidcJwksUrl;
            resourceInputs["oidcWellKnownUrl"] = state?.oidcWellKnownUrl;
            resourceInputs["policyEngineMode"] = state?.policyEngineMode;
            resourceInputs["profileUrl"] = state?.profileUrl;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["providerType"] = state?.providerType;
            resourceInputs["requestTokenUrl"] = state?.requestTokenUrl;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["sourceOauthId"] = state?.sourceOauthId;
            resourceInputs["userMatchingMode"] = state?.userMatchingMode;
            resourceInputs["userPathTemplate"] = state?.userPathTemplate;
            resourceInputs["uuid"] = state?.uuid;
        }
        else {
            const args = argsOrState;
            if (args?.consumerKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'consumerKey'");
            }
            if (args?.consumerSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'consumerSecret'");
            }
            if (args?.providerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["accessTokenUrl"] = args?.accessTokenUrl;
            resourceInputs["additionalScopes"] = args?.additionalScopes;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationCodeAuthMethod"] = args?.authorizationCodeAuthMethod;
            resourceInputs["authorizationUrl"] = args?.authorizationUrl;
            resourceInputs["consumerKey"] = args?.consumerKey;
            resourceInputs["consumerSecret"] = args?.consumerSecret ? pulumi.secret(args.consumerSecret) : undefined;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["enrollmentFlow"] = args?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = args?.groupMatchingMode;
            resourceInputs["name"] = args?.name;
            resourceInputs["oidcJwks"] = args?.oidcJwks;
            resourceInputs["oidcJwksUrl"] = args?.oidcJwksUrl;
            resourceInputs["oidcWellKnownUrl"] = args?.oidcWellKnownUrl;
            resourceInputs["policyEngineMode"] = args?.policyEngineMode;
            resourceInputs["profileUrl"] = args?.profileUrl;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["providerType"] = args?.providerType;
            resourceInputs["requestTokenUrl"] = args?.requestTokenUrl;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["sourceOauthId"] = args?.sourceOauthId;
            resourceInputs["userMatchingMode"] = args?.userMatchingMode;
            resourceInputs["userPathTemplate"] = args?.userPathTemplate;
            resourceInputs["uuid"] = args?.uuid;
            resourceInputs["callbackUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["consumerSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceOauth.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SourceOauth = SourceOauth;
/** @internal */
SourceOauth.__pulumiType = 'authentik:index/sourceOauth:SourceOauth';
//# sourceMappingURL=sourceOauth.js.map