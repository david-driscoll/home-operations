"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageAuthenticatorSms = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class StageAuthenticatorSms extends pulumi.CustomResource {
    /**
     * Get an existing StageAuthenticatorSms resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StageAuthenticatorSms(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of StageAuthenticatorSms.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StageAuthenticatorSms.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountSid"] = state?.accountSid;
            resourceInputs["auth"] = state?.auth;
            resourceInputs["authPassword"] = state?.authPassword;
            resourceInputs["authType"] = state?.authType;
            resourceInputs["configureFlow"] = state?.configureFlow;
            resourceInputs["friendlyName"] = state?.friendlyName;
            resourceInputs["fromNumber"] = state?.fromNumber;
            resourceInputs["mapping"] = state?.mapping;
            resourceInputs["name"] = state?.name;
            resourceInputs["smsProvider"] = state?.smsProvider;
            resourceInputs["stageAuthenticatorSmsId"] = state?.stageAuthenticatorSmsId;
            resourceInputs["verifyOnly"] = state?.verifyOnly;
        }
        else {
            const args = argsOrState;
            if (args?.accountSid === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountSid'");
            }
            if (args?.auth === undefined && !opts.urn) {
                throw new Error("Missing required property 'auth'");
            }
            if (args?.fromNumber === undefined && !opts.urn) {
                throw new Error("Missing required property 'fromNumber'");
            }
            resourceInputs["accountSid"] = args?.accountSid ? pulumi.secret(args.accountSid) : undefined;
            resourceInputs["auth"] = args?.auth ? pulumi.secret(args.auth) : undefined;
            resourceInputs["authPassword"] = args?.authPassword ? pulumi.secret(args.authPassword) : undefined;
            resourceInputs["authType"] = args?.authType;
            resourceInputs["configureFlow"] = args?.configureFlow;
            resourceInputs["friendlyName"] = args?.friendlyName;
            resourceInputs["fromNumber"] = args?.fromNumber;
            resourceInputs["mapping"] = args?.mapping;
            resourceInputs["name"] = args?.name;
            resourceInputs["smsProvider"] = args?.smsProvider;
            resourceInputs["stageAuthenticatorSmsId"] = args?.stageAuthenticatorSmsId;
            resourceInputs["verifyOnly"] = args?.verifyOnly;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountSid", "auth", "authPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StageAuthenticatorSms.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.StageAuthenticatorSms = StageAuthenticatorSms;
/** @internal */
StageAuthenticatorSms.__pulumiType = 'authentik:index/stageAuthenticatorSms:StageAuthenticatorSms';
//# sourceMappingURL=stageAuthenticatorSms.js.map