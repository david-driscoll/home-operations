"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderOauth2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProviderOauth2 extends pulumi.CustomResource {
    /**
     * Get an existing ProviderOauth2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProviderOauth2(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProviderOauth2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderOauth2.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessCodeValidity"] = state?.accessCodeValidity;
            resourceInputs["accessTokenValidity"] = state?.accessTokenValidity;
            resourceInputs["allowedRedirectUris"] = state?.allowedRedirectUris;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["backchannelLogoutUri"] = state?.backchannelLogoutUri;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["clientType"] = state?.clientType;
            resourceInputs["encryptionKey"] = state?.encryptionKey;
            resourceInputs["includeClaimsInIdToken"] = state?.includeClaimsInIdToken;
            resourceInputs["invalidationFlow"] = state?.invalidationFlow;
            resourceInputs["issuerMode"] = state?.issuerMode;
            resourceInputs["jwksSources"] = state?.jwksSources;
            resourceInputs["jwtFederationProviders"] = state?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = state?.jwtFederationSources;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerOauth2Id"] = state?.providerOauth2Id;
            resourceInputs["refreshTokenValidity"] = state?.refreshTokenValidity;
            resourceInputs["signingKey"] = state?.signingKey;
            resourceInputs["subMode"] = state?.subMode;
        }
        else {
            const args = argsOrState;
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.invalidationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'invalidationFlow'");
            }
            resourceInputs["accessCodeValidity"] = args?.accessCodeValidity;
            resourceInputs["accessTokenValidity"] = args?.accessTokenValidity;
            resourceInputs["allowedRedirectUris"] = args?.allowedRedirectUris;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["backchannelLogoutUri"] = args?.backchannelLogoutUri;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["clientType"] = args?.clientType;
            resourceInputs["encryptionKey"] = args?.encryptionKey;
            resourceInputs["includeClaimsInIdToken"] = args?.includeClaimsInIdToken;
            resourceInputs["invalidationFlow"] = args?.invalidationFlow;
            resourceInputs["issuerMode"] = args?.issuerMode;
            resourceInputs["jwksSources"] = args?.jwksSources;
            resourceInputs["jwtFederationProviders"] = args?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = args?.jwtFederationSources;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerOauth2Id"] = args?.providerOauth2Id;
            resourceInputs["refreshTokenValidity"] = args?.refreshTokenValidity;
            resourceInputs["signingKey"] = args?.signingKey;
            resourceInputs["subMode"] = args?.subMode;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProviderOauth2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ProviderOauth2 = ProviderOauth2;
/** @internal */
ProviderOauth2.__pulumiType = 'authentik:index/providerOauth2:ProviderOauth2';
//# sourceMappingURL=providerOauth2.js.map