"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderGoogleWorkspace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProviderGoogleWorkspace extends pulumi.CustomResource {
    /**
     * Get an existing ProviderGoogleWorkspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProviderGoogleWorkspace(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProviderGoogleWorkspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderGoogleWorkspace.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["credentials"] = state?.credentials;
            resourceInputs["defaultGroupEmailDomain"] = state?.defaultGroupEmailDomain;
            resourceInputs["delegatedSubject"] = state?.delegatedSubject;
            resourceInputs["dryRun"] = state?.dryRun;
            resourceInputs["excludeUsersServiceAccount"] = state?.excludeUsersServiceAccount;
            resourceInputs["filterGroup"] = state?.filterGroup;
            resourceInputs["groupDeleteAction"] = state?.groupDeleteAction;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["providerGoogleWorkspaceId"] = state?.providerGoogleWorkspaceId;
            resourceInputs["userDeleteAction"] = state?.userDeleteAction;
        }
        else {
            const args = argsOrState;
            if (args?.defaultGroupEmailDomain === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultGroupEmailDomain'");
            }
            resourceInputs["credentials"] = args?.credentials;
            resourceInputs["defaultGroupEmailDomain"] = args?.defaultGroupEmailDomain;
            resourceInputs["delegatedSubject"] = args?.delegatedSubject;
            resourceInputs["dryRun"] = args?.dryRun;
            resourceInputs["excludeUsersServiceAccount"] = args?.excludeUsersServiceAccount;
            resourceInputs["filterGroup"] = args?.filterGroup;
            resourceInputs["groupDeleteAction"] = args?.groupDeleteAction;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["providerGoogleWorkspaceId"] = args?.providerGoogleWorkspaceId;
            resourceInputs["userDeleteAction"] = args?.userDeleteAction;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderGoogleWorkspace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ProviderGoogleWorkspace = ProviderGoogleWorkspace;
/** @internal */
ProviderGoogleWorkspace.__pulumiType = 'authentik:index/providerGoogleWorkspace:ProviderGoogleWorkspace';
//# sourceMappingURL=providerGoogleWorkspace.js.map