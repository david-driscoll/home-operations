"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderSaml = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProviderSaml extends pulumi.CustomResource {
    /**
     * Get an existing ProviderSaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProviderSaml(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProviderSaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderSaml.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acsUrl"] = state?.acsUrl;
            resourceInputs["assertionValidNotBefore"] = state?.assertionValidNotBefore;
            resourceInputs["assertionValidNotOnOrAfter"] = state?.assertionValidNotOnOrAfter;
            resourceInputs["audience"] = state?.audience;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authnContextClassRefMapping"] = state?.authnContextClassRefMapping;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["defaultRelayState"] = state?.defaultRelayState;
            resourceInputs["digestAlgorithm"] = state?.digestAlgorithm;
            resourceInputs["encryptionKp"] = state?.encryptionKp;
            resourceInputs["invalidationFlow"] = state?.invalidationFlow;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameIdMapping"] = state?.nameIdMapping;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerSamlId"] = state?.providerSamlId;
            resourceInputs["sessionValidNotOnOrAfter"] = state?.sessionValidNotOnOrAfter;
            resourceInputs["signAssertion"] = state?.signAssertion;
            resourceInputs["signResponse"] = state?.signResponse;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["signingKp"] = state?.signingKp;
            resourceInputs["spBinding"] = state?.spBinding;
            resourceInputs["urlSloPost"] = state?.urlSloPost;
            resourceInputs["urlSloRedirect"] = state?.urlSloRedirect;
            resourceInputs["urlSsoInit"] = state?.urlSsoInit;
            resourceInputs["urlSsoPost"] = state?.urlSsoPost;
            resourceInputs["urlSsoRedirect"] = state?.urlSsoRedirect;
            resourceInputs["verificationKp"] = state?.verificationKp;
        }
        else {
            const args = argsOrState;
            if (args?.acsUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'acsUrl'");
            }
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            if (args?.invalidationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'invalidationFlow'");
            }
            resourceInputs["acsUrl"] = args?.acsUrl;
            resourceInputs["assertionValidNotBefore"] = args?.assertionValidNotBefore;
            resourceInputs["assertionValidNotOnOrAfter"] = args?.assertionValidNotOnOrAfter;
            resourceInputs["audience"] = args?.audience;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authnContextClassRefMapping"] = args?.authnContextClassRefMapping;
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["defaultRelayState"] = args?.defaultRelayState;
            resourceInputs["digestAlgorithm"] = args?.digestAlgorithm;
            resourceInputs["encryptionKp"] = args?.encryptionKp;
            resourceInputs["invalidationFlow"] = args?.invalidationFlow;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameIdMapping"] = args?.nameIdMapping;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerSamlId"] = args?.providerSamlId;
            resourceInputs["sessionValidNotOnOrAfter"] = args?.sessionValidNotOnOrAfter;
            resourceInputs["signAssertion"] = args?.signAssertion;
            resourceInputs["signResponse"] = args?.signResponse;
            resourceInputs["signatureAlgorithm"] = args?.signatureAlgorithm;
            resourceInputs["signingKp"] = args?.signingKp;
            resourceInputs["spBinding"] = args?.spBinding;
            resourceInputs["urlSloPost"] = args?.urlSloPost;
            resourceInputs["urlSloRedirect"] = args?.urlSloRedirect;
            resourceInputs["urlSsoInit"] = args?.urlSsoInit;
            resourceInputs["urlSsoPost"] = args?.urlSsoPost;
            resourceInputs["urlSsoRedirect"] = args?.urlSsoRedirect;
            resourceInputs["verificationKp"] = args?.verificationKp;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderSaml.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ProviderSaml = ProviderSaml;
/** @internal */
ProviderSaml.__pulumiType = 'authentik:index/providerSaml:ProviderSaml';
//# sourceMappingURL=providerSaml.js.map