"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyBinding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class PolicyBinding extends pulumi.CustomResource {
    /**
     * Get an existing PolicyBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PolicyBinding(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of PolicyBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyBinding.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["failureResult"] = state?.failureResult;
            resourceInputs["group"] = state?.group;
            resourceInputs["negate"] = state?.negate;
            resourceInputs["order"] = state?.order;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["policyBindingId"] = state?.policyBindingId;
            resourceInputs["target"] = state?.target;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["user"] = state?.user;
        }
        else {
            const args = argsOrState;
            if (args?.order === undefined && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["failureResult"] = args?.failureResult;
            resourceInputs["group"] = args?.group;
            resourceInputs["negate"] = args?.negate;
            resourceInputs["order"] = args?.order;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["policyBindingId"] = args?.policyBindingId;
            resourceInputs["target"] = args?.target;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["user"] = args?.user;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.PolicyBinding = PolicyBinding;
/** @internal */
PolicyBinding.__pulumiType = 'authentik:index/policyBinding:PolicyBinding';
//# sourceMappingURL=policyBinding.js.map