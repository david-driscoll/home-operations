"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Token = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Token(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state?.description;
            resourceInputs["expires"] = state?.expires;
            resourceInputs["expiresIn"] = state?.expiresIn;
            resourceInputs["expiring"] = state?.expiring;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["intent"] = state?.intent;
            resourceInputs["key"] = state?.key;
            resourceInputs["retrieveKey"] = state?.retrieveKey;
            resourceInputs["tokenId"] = state?.tokenId;
            resourceInputs["user"] = state?.user;
        }
        else {
            const args = argsOrState;
            if (args?.identifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if (args?.user === undefined && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["expires"] = args?.expires;
            resourceInputs["expiring"] = args?.expiring;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["intent"] = args?.intent;
            resourceInputs["retrieveKey"] = args?.retrieveKey;
            resourceInputs["tokenId"] = args?.tokenId;
            resourceInputs["user"] = args?.user;
            resourceInputs["expiresIn"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Token.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Token = Token;
/** @internal */
Token.__pulumiType = 'authentik:index/token:Token';
//# sourceMappingURL=token.js.map