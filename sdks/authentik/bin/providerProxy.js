"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderProxy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProviderProxy extends pulumi.CustomResource {
    /**
     * Get an existing ProviderProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProviderProxy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProviderProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderProxy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessTokenValidity"] = state?.accessTokenValidity;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["authorizationFlow"] = state?.authorizationFlow;
            resourceInputs["basicAuthEnabled"] = state?.basicAuthEnabled;
            resourceInputs["basicAuthPasswordAttribute"] = state?.basicAuthPasswordAttribute;
            resourceInputs["basicAuthUsernameAttribute"] = state?.basicAuthUsernameAttribute;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["cookieDomain"] = state?.cookieDomain;
            resourceInputs["externalHost"] = state?.externalHost;
            resourceInputs["interceptHeaderAuth"] = state?.interceptHeaderAuth;
            resourceInputs["internalHost"] = state?.internalHost;
            resourceInputs["internalHostSslValidation"] = state?.internalHostSslValidation;
            resourceInputs["invalidationFlow"] = state?.invalidationFlow;
            resourceInputs["jwksSources"] = state?.jwksSources;
            resourceInputs["jwtFederationProviders"] = state?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = state?.jwtFederationSources;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["providerProxyId"] = state?.providerProxyId;
            resourceInputs["refreshTokenValidity"] = state?.refreshTokenValidity;
            resourceInputs["skipPathRegex"] = state?.skipPathRegex;
        }
        else {
            const args = argsOrState;
            if (args?.authorizationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationFlow'");
            }
            if (args?.externalHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalHost'");
            }
            if (args?.invalidationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'invalidationFlow'");
            }
            resourceInputs["accessTokenValidity"] = args?.accessTokenValidity;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["authorizationFlow"] = args?.authorizationFlow;
            resourceInputs["basicAuthEnabled"] = args?.basicAuthEnabled;
            resourceInputs["basicAuthPasswordAttribute"] = args?.basicAuthPasswordAttribute;
            resourceInputs["basicAuthUsernameAttribute"] = args?.basicAuthUsernameAttribute;
            resourceInputs["cookieDomain"] = args?.cookieDomain;
            resourceInputs["externalHost"] = args?.externalHost;
            resourceInputs["interceptHeaderAuth"] = args?.interceptHeaderAuth;
            resourceInputs["internalHost"] = args?.internalHost;
            resourceInputs["internalHostSslValidation"] = args?.internalHostSslValidation;
            resourceInputs["invalidationFlow"] = args?.invalidationFlow;
            resourceInputs["jwksSources"] = args?.jwksSources;
            resourceInputs["jwtFederationProviders"] = args?.jwtFederationProviders;
            resourceInputs["jwtFederationSources"] = args?.jwtFederationSources;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["providerProxyId"] = args?.providerProxyId;
            resourceInputs["refreshTokenValidity"] = args?.refreshTokenValidity;
            resourceInputs["skipPathRegex"] = args?.skipPathRegex;
            resourceInputs["clientId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ProviderProxy = ProviderProxy;
/** @internal */
ProviderProxy.__pulumiType = 'authentik:index/providerProxy:ProviderProxy';
//# sourceMappingURL=providerProxy.js.map