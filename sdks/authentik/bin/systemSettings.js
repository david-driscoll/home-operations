"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SystemSettings extends pulumi.CustomResource {
    /**
     * Get an existing SystemSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SystemSettings(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SystemSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["avatars"] = state?.avatars;
            resourceInputs["defaultTokenDuration"] = state?.defaultTokenDuration;
            resourceInputs["defaultTokenLength"] = state?.defaultTokenLength;
            resourceInputs["defaultUserChangeEmail"] = state?.defaultUserChangeEmail;
            resourceInputs["defaultUserChangeName"] = state?.defaultUserChangeName;
            resourceInputs["defaultUserChangeUsername"] = state?.defaultUserChangeUsername;
            resourceInputs["eventRetention"] = state?.eventRetention;
            resourceInputs["flags"] = state?.flags;
            resourceInputs["footerLinks"] = state?.footerLinks;
            resourceInputs["gdprCompliance"] = state?.gdprCompliance;
            resourceInputs["impersonation"] = state?.impersonation;
            resourceInputs["reputationLowerLimit"] = state?.reputationLowerLimit;
            resourceInputs["reputationUpperLimit"] = state?.reputationUpperLimit;
            resourceInputs["systemSettingsId"] = state?.systemSettingsId;
        }
        else {
            const args = argsOrState;
            resourceInputs["avatars"] = args?.avatars;
            resourceInputs["defaultTokenDuration"] = args?.defaultTokenDuration;
            resourceInputs["defaultTokenLength"] = args?.defaultTokenLength;
            resourceInputs["defaultUserChangeEmail"] = args?.defaultUserChangeEmail;
            resourceInputs["defaultUserChangeName"] = args?.defaultUserChangeName;
            resourceInputs["defaultUserChangeUsername"] = args?.defaultUserChangeUsername;
            resourceInputs["eventRetention"] = args?.eventRetention;
            resourceInputs["flags"] = args?.flags;
            resourceInputs["footerLinks"] = args?.footerLinks;
            resourceInputs["gdprCompliance"] = args?.gdprCompliance;
            resourceInputs["impersonation"] = args?.impersonation;
            resourceInputs["reputationLowerLimit"] = args?.reputationLowerLimit;
            resourceInputs["reputationUpperLimit"] = args?.reputationUpperLimit;
            resourceInputs["systemSettingsId"] = args?.systemSettingsId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SystemSettings = SystemSettings;
/** @internal */
SystemSettings.__pulumiType = 'authentik:index/systemSettings:SystemSettings';
//# sourceMappingURL=systemSettings.js.map