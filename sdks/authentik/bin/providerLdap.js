"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderLdap = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ProviderLdap extends pulumi.CustomResource {
    /**
     * Get an existing ProviderLdap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProviderLdap(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProviderLdap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderLdap.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["baseDn"] = state?.baseDn;
            resourceInputs["bindFlow"] = state?.bindFlow;
            resourceInputs["bindMode"] = state?.bindMode;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["gidStartNumber"] = state?.gidStartNumber;
            resourceInputs["mfaSupport"] = state?.mfaSupport;
            resourceInputs["name"] = state?.name;
            resourceInputs["providerLdapId"] = state?.providerLdapId;
            resourceInputs["searchMode"] = state?.searchMode;
            resourceInputs["tlsServerName"] = state?.tlsServerName;
            resourceInputs["uidStartNumber"] = state?.uidStartNumber;
            resourceInputs["unbindFlow"] = state?.unbindFlow;
        }
        else {
            const args = argsOrState;
            if (args?.baseDn === undefined && !opts.urn) {
                throw new Error("Missing required property 'baseDn'");
            }
            if (args?.bindFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'bindFlow'");
            }
            if (args?.unbindFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'unbindFlow'");
            }
            resourceInputs["baseDn"] = args?.baseDn;
            resourceInputs["bindFlow"] = args?.bindFlow;
            resourceInputs["bindMode"] = args?.bindMode;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["gidStartNumber"] = args?.gidStartNumber;
            resourceInputs["mfaSupport"] = args?.mfaSupport;
            resourceInputs["name"] = args?.name;
            resourceInputs["providerLdapId"] = args?.providerLdapId;
            resourceInputs["searchMode"] = args?.searchMode;
            resourceInputs["tlsServerName"] = args?.tlsServerName;
            resourceInputs["uidStartNumber"] = args?.uidStartNumber;
            resourceInputs["unbindFlow"] = args?.unbindFlow;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderLdap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ProviderLdap = ProviderLdap;
/** @internal */
ProviderLdap.__pulumiType = 'authentik:index/providerLdap:ProviderLdap';
//# sourceMappingURL=providerLdap.js.map