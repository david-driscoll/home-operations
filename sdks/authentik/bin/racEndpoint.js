"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RacEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class RacEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing RacEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RacEndpoint(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of RacEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RacEndpoint.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["host"] = state?.host;
            resourceInputs["maximumConnections"] = state?.maximumConnections;
            resourceInputs["name"] = state?.name;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolProvider"] = state?.protocolProvider;
            resourceInputs["racEndpointId"] = state?.racEndpointId;
            resourceInputs["settings"] = state?.settings;
        }
        else {
            const args = argsOrState;
            if (args?.host === undefined && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.protocolProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocolProvider'");
            }
            resourceInputs["host"] = args?.host;
            resourceInputs["maximumConnections"] = args?.maximumConnections;
            resourceInputs["name"] = args?.name;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolProvider"] = args?.protocolProvider;
            resourceInputs["racEndpointId"] = args?.racEndpointId;
            resourceInputs["settings"] = args?.settings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RacEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.RacEndpoint = RacEndpoint;
/** @internal */
RacEndpoint.__pulumiType = 'authentik:index/racEndpoint:RacEndpoint';
//# sourceMappingURL=racEndpoint.js.map