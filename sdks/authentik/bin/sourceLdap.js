"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceLdap = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SourceLdap extends pulumi.CustomResource {
    /**
     * Get an existing SourceLdap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceLdap(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SourceLdap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceLdap.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalGroupDn"] = state?.additionalGroupDn;
            resourceInputs["additionalUserDn"] = state?.additionalUserDn;
            resourceInputs["baseDn"] = state?.baseDn;
            resourceInputs["bindCn"] = state?.bindCn;
            resourceInputs["bindPassword"] = state?.bindPassword;
            resourceInputs["deleteNotFoundObjects"] = state?.deleteNotFoundObjects;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["groupMembershipField"] = state?.groupMembershipField;
            resourceInputs["groupObjectFilter"] = state?.groupObjectFilter;
            resourceInputs["lookupGroupsFromUser"] = state?.lookupGroupsFromUser;
            resourceInputs["name"] = state?.name;
            resourceInputs["objectUniquenessField"] = state?.objectUniquenessField;
            resourceInputs["passwordLoginUpdateInternalPassword"] = state?.passwordLoginUpdateInternalPassword;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["serverUri"] = state?.serverUri;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["sni"] = state?.sni;
            resourceInputs["sourceLdapId"] = state?.sourceLdapId;
            resourceInputs["startTls"] = state?.startTls;
            resourceInputs["syncGroups"] = state?.syncGroups;
            resourceInputs["syncParentGroup"] = state?.syncParentGroup;
            resourceInputs["syncUsers"] = state?.syncUsers;
            resourceInputs["syncUsersPassword"] = state?.syncUsersPassword;
            resourceInputs["userMembershipAttribute"] = state?.userMembershipAttribute;
            resourceInputs["userObjectFilter"] = state?.userObjectFilter;
            resourceInputs["userPathTemplate"] = state?.userPathTemplate;
            resourceInputs["uuid"] = state?.uuid;
        }
        else {
            const args = argsOrState;
            if (args?.baseDn === undefined && !opts.urn) {
                throw new Error("Missing required property 'baseDn'");
            }
            if (args?.bindCn === undefined && !opts.urn) {
                throw new Error("Missing required property 'bindCn'");
            }
            if (args?.bindPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'bindPassword'");
            }
            if (args?.serverUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverUri'");
            }
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["additionalGroupDn"] = args?.additionalGroupDn;
            resourceInputs["additionalUserDn"] = args?.additionalUserDn;
            resourceInputs["baseDn"] = args?.baseDn;
            resourceInputs["bindCn"] = args?.bindCn;
            resourceInputs["bindPassword"] = args?.bindPassword ? pulumi.secret(args.bindPassword) : undefined;
            resourceInputs["deleteNotFoundObjects"] = args?.deleteNotFoundObjects;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["groupMembershipField"] = args?.groupMembershipField;
            resourceInputs["groupObjectFilter"] = args?.groupObjectFilter;
            resourceInputs["lookupGroupsFromUser"] = args?.lookupGroupsFromUser;
            resourceInputs["name"] = args?.name;
            resourceInputs["objectUniquenessField"] = args?.objectUniquenessField;
            resourceInputs["passwordLoginUpdateInternalPassword"] = args?.passwordLoginUpdateInternalPassword;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["serverUri"] = args?.serverUri;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["sni"] = args?.sni;
            resourceInputs["sourceLdapId"] = args?.sourceLdapId;
            resourceInputs["startTls"] = args?.startTls;
            resourceInputs["syncGroups"] = args?.syncGroups;
            resourceInputs["syncParentGroup"] = args?.syncParentGroup;
            resourceInputs["syncUsers"] = args?.syncUsers;
            resourceInputs["syncUsersPassword"] = args?.syncUsersPassword;
            resourceInputs["userMembershipAttribute"] = args?.userMembershipAttribute;
            resourceInputs["userObjectFilter"] = args?.userObjectFilter;
            resourceInputs["userPathTemplate"] = args?.userPathTemplate;
            resourceInputs["uuid"] = args?.uuid;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bindPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceLdap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SourceLdap = SourceLdap;
/** @internal */
SourceLdap.__pulumiType = 'authentik:index/sourceLdap:SourceLdap';
//# sourceMappingURL=sourceLdap.js.map