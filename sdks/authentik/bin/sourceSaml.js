"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceSaml = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SourceSaml extends pulumi.CustomResource {
    /**
     * Get an existing SourceSaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceSaml(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SourceSaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceSaml.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowIdpInitiated"] = state?.allowIdpInitiated;
            resourceInputs["authenticationFlow"] = state?.authenticationFlow;
            resourceInputs["bindingType"] = state?.bindingType;
            resourceInputs["digestAlgorithm"] = state?.digestAlgorithm;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["encryptionKp"] = state?.encryptionKp;
            resourceInputs["enrollmentFlow"] = state?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = state?.groupMatchingMode;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameIdPolicy"] = state?.nameIdPolicy;
            resourceInputs["policyEngineMode"] = state?.policyEngineMode;
            resourceInputs["preAuthenticationFlow"] = state?.preAuthenticationFlow;
            resourceInputs["propertyMappings"] = state?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = state?.propertyMappingsGroups;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["signingKp"] = state?.signingKp;
            resourceInputs["sloUrl"] = state?.sloUrl;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["sourceSamlId"] = state?.sourceSamlId;
            resourceInputs["ssoUrl"] = state?.ssoUrl;
            resourceInputs["temporaryUserDeleteAfter"] = state?.temporaryUserDeleteAfter;
            resourceInputs["userMatchingMode"] = state?.userMatchingMode;
            resourceInputs["userPathTemplate"] = state?.userPathTemplate;
            resourceInputs["uuid"] = state?.uuid;
            resourceInputs["verificationKp"] = state?.verificationKp;
        }
        else {
            const args = argsOrState;
            if (args?.preAuthenticationFlow === undefined && !opts.urn) {
                throw new Error("Missing required property 'preAuthenticationFlow'");
            }
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            if (args?.ssoUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ssoUrl'");
            }
            resourceInputs["allowIdpInitiated"] = args?.allowIdpInitiated;
            resourceInputs["authenticationFlow"] = args?.authenticationFlow;
            resourceInputs["bindingType"] = args?.bindingType;
            resourceInputs["digestAlgorithm"] = args?.digestAlgorithm;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["encryptionKp"] = args?.encryptionKp;
            resourceInputs["enrollmentFlow"] = args?.enrollmentFlow;
            resourceInputs["groupMatchingMode"] = args?.groupMatchingMode;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameIdPolicy"] = args?.nameIdPolicy;
            resourceInputs["policyEngineMode"] = args?.policyEngineMode;
            resourceInputs["preAuthenticationFlow"] = args?.preAuthenticationFlow;
            resourceInputs["propertyMappings"] = args?.propertyMappings;
            resourceInputs["propertyMappingsGroups"] = args?.propertyMappingsGroups;
            resourceInputs["signatureAlgorithm"] = args?.signatureAlgorithm;
            resourceInputs["signingKp"] = args?.signingKp;
            resourceInputs["sloUrl"] = args?.sloUrl;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["sourceSamlId"] = args?.sourceSamlId;
            resourceInputs["ssoUrl"] = args?.ssoUrl;
            resourceInputs["temporaryUserDeleteAfter"] = args?.temporaryUserDeleteAfter;
            resourceInputs["userMatchingMode"] = args?.userMatchingMode;
            resourceInputs["userPathTemplate"] = args?.userPathTemplate;
            resourceInputs["uuid"] = args?.uuid;
            resourceInputs["verificationKp"] = args?.verificationKp;
            resourceInputs["metadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceSaml.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SourceSaml = SourceSaml;
/** @internal */
SourceSaml.__pulumiType = 'authentik:index/sourceSaml:SourceSaml';
//# sourceMappingURL=sourceSaml.js.map