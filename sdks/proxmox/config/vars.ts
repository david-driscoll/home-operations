// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("proxmox");

/**
 * API TokenID e.g. root@pam!mytesttoken
 */
export declare const pmApiTokenId: string | undefined;
Object.defineProperty(exports, "pmApiTokenId", {
    get() {
        return __config.get("pmApiTokenId");
    },
    enumerable: true,
});

/**
 * The secret uuid corresponding to a TokenID
 */
export declare const pmApiTokenSecret: string | undefined;
Object.defineProperty(exports, "pmApiTokenSecret", {
    get() {
        return __config.get("pmApiTokenSecret");
    },
    enumerable: true,
});

/**
 * https://host.fqdn:8006/api2/json
 */
export declare const pmApiUrl: string | undefined;
Object.defineProperty(exports, "pmApiUrl", {
    get() {
        return __config.get("pmApiUrl");
    },
    enumerable: true,
});

/**
 * By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of VMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set this to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of the danger in doing so.
 */
export declare const pmDangerouslyIgnoreUnknownAttributes: boolean | undefined;
Object.defineProperty(exports, "pmDangerouslyIgnoreUnknownAttributes", {
    get() {
        return __config.getObject<boolean>("pmDangerouslyIgnoreUnknownAttributes");
    },
    enumerable: true,
});

/**
 * Enable or disable the verbose debug output from proxmox api
 */
export declare const pmDebug: boolean | undefined;
Object.defineProperty(exports, "pmDebug", {
    get() {
        return __config.getObject<boolean>("pmDebug");
    },
    enumerable: true,
});

/**
 * Set custom http headers e.g. Key,Value,Key1,Value1
 */
export declare const pmHttpHeaders: string | undefined;
Object.defineProperty(exports, "pmHttpHeaders", {
    get() {
        return __config.get("pmHttpHeaders");
    },
    enumerable: true,
});

/**
 * Enable provider logging to get proxmox API logs
 */
export declare const pmLogEnable: boolean | undefined;
Object.defineProperty(exports, "pmLogEnable", {
    get() {
        return __config.getObject<boolean>("pmLogEnable");
    },
    enumerable: true,
});

/**
 * Write logs to this specific file
 */
export declare const pmLogFile: string | undefined;
Object.defineProperty(exports, "pmLogFile", {
    get() {
        return __config.get("pmLogFile");
    },
    enumerable: true,
});

/**
 * Configure the logging level to display; trace, debug, info, warn, etc
 */
export declare const pmLogLevels: {[key: string]: string} | undefined;
Object.defineProperty(exports, "pmLogLevels", {
    get() {
        return __config.getObject<{[key: string]: string}>("pmLogLevels");
    },
    enumerable: true,
});

/**
 * OTP 2FA code (if required)
 */
export declare const pmOtp: string | undefined;
Object.defineProperty(exports, "pmOtp", {
    get() {
        return __config.get("pmOtp");
    },
    enumerable: true,
});

export declare const pmParallel: number | undefined;
Object.defineProperty(exports, "pmParallel", {
    get() {
        return __config.getObject<number>("pmParallel");
    },
    enumerable: true,
});

/**
 * Password to authenticate into proxmox
 */
export declare const pmPassword: string | undefined;
Object.defineProperty(exports, "pmPassword", {
    get() {
        return __config.get("pmPassword");
    },
    enumerable: true,
});

/**
 * Proxy Server passed to Api client(useful for debugging). Syntax: http://proxy:port
 */
export declare const pmProxyServer: string | undefined;
Object.defineProperty(exports, "pmProxyServer", {
    get() {
        return __config.get("pmProxyServer");
    },
    enumerable: true,
});

/**
 * How many seconds to wait for operations for both provider and api-client, default is 20m
 */
export declare const pmTimeout: number | undefined;
Object.defineProperty(exports, "pmTimeout", {
    get() {
        return __config.getObject<number>("pmTimeout");
    },
    enumerable: true,
});

export declare const pmTlsInsecure: boolean | undefined;
Object.defineProperty(exports, "pmTlsInsecure", {
    get() {
        return __config.getObject<boolean>("pmTlsInsecure");
    },
    enumerable: true,
});

/**
 * Username e.g. myuser or myuser@pam
 */
export declare const pmUser: string | undefined;
Object.defineProperty(exports, "pmUser", {
    get() {
        return __config.get("pmUser");
    },
    enumerable: true,
});

