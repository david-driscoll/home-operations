"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmQemu = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class VmQemu extends pulumi.CustomResource {
    /**
     * Get an existing VmQemu resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VmQemu(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of VmQemu.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmQemu.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalWait"] = state?.additionalWait;
            resourceInputs["agent"] = state?.agent;
            resourceInputs["args"] = state?.args;
            resourceInputs["automaticReboot"] = state?.automaticReboot;
            resourceInputs["balloon"] = state?.balloon;
            resourceInputs["bios"] = state?.bios;
            resourceInputs["boot"] = state?.boot;
            resourceInputs["bootdisk"] = state?.bootdisk;
            resourceInputs["bridge"] = state?.bridge;
            resourceInputs["ciWait"] = state?.ciWait;
            resourceInputs["cicustom"] = state?.cicustom;
            resourceInputs["cipassword"] = state?.cipassword;
            resourceInputs["ciuser"] = state?.ciuser;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["cloneWait"] = state?.cloneWait;
            resourceInputs["cloudinitCdromStorage"] = state?.cloudinitCdromStorage;
            resourceInputs["cores"] = state?.cores;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["defaultIpv4Address"] = state?.defaultIpv4Address;
            resourceInputs["defineConnectionInfo"] = state?.defineConnectionInfo;
            resourceInputs["desc"] = state?.desc;
            resourceInputs["diskGb"] = state?.diskGb;
            resourceInputs["disks"] = state?.disks;
            resourceInputs["forceCreate"] = state?.forceCreate;
            resourceInputs["forceRecreateOnChangeOf"] = state?.forceRecreateOnChangeOf;
            resourceInputs["fullClone"] = state?.fullClone;
            resourceInputs["guestAgentReadyTimeout"] = state?.guestAgentReadyTimeout;
            resourceInputs["hagroup"] = state?.hagroup;
            resourceInputs["hastate"] = state?.hastate;
            resourceInputs["hostpcis"] = state?.hostpcis;
            resourceInputs["hotplug"] = state?.hotplug;
            resourceInputs["ipconfig0"] = state?.ipconfig0;
            resourceInputs["ipconfig1"] = state?.ipconfig1;
            resourceInputs["ipconfig10"] = state?.ipconfig10;
            resourceInputs["ipconfig11"] = state?.ipconfig11;
            resourceInputs["ipconfig12"] = state?.ipconfig12;
            resourceInputs["ipconfig13"] = state?.ipconfig13;
            resourceInputs["ipconfig14"] = state?.ipconfig14;
            resourceInputs["ipconfig15"] = state?.ipconfig15;
            resourceInputs["ipconfig2"] = state?.ipconfig2;
            resourceInputs["ipconfig3"] = state?.ipconfig3;
            resourceInputs["ipconfig4"] = state?.ipconfig4;
            resourceInputs["ipconfig5"] = state?.ipconfig5;
            resourceInputs["ipconfig6"] = state?.ipconfig6;
            resourceInputs["ipconfig7"] = state?.ipconfig7;
            resourceInputs["ipconfig8"] = state?.ipconfig8;
            resourceInputs["ipconfig9"] = state?.ipconfig9;
            resourceInputs["iso"] = state?.iso;
            resourceInputs["kvm"] = state?.kvm;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["machine"] = state?.machine;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameserver"] = state?.nameserver;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["nic"] = state?.nic;
            resourceInputs["numa"] = state?.numa;
            resourceInputs["onboot"] = state?.onboot;
            resourceInputs["oncreate"] = state?.oncreate;
            resourceInputs["osNetworkConfig"] = state?.osNetworkConfig;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["pool"] = state?.pool;
            resourceInputs["preprovision"] = state?.preprovision;
            resourceInputs["pxe"] = state?.pxe;
            resourceInputs["qemuOs"] = state?.qemuOs;
            resourceInputs["rebootRequired"] = state?.rebootRequired;
            resourceInputs["scsihw"] = state?.scsihw;
            resourceInputs["searchdomain"] = state?.searchdomain;
            resourceInputs["serials"] = state?.serials;
            resourceInputs["sockets"] = state?.sockets;
            resourceInputs["sshForwardIp"] = state?.sshForwardIp;
            resourceInputs["sshHost"] = state?.sshHost;
            resourceInputs["sshPort"] = state?.sshPort;
            resourceInputs["sshPrivateKey"] = state?.sshPrivateKey;
            resourceInputs["sshUser"] = state?.sshUser;
            resourceInputs["sshkeys"] = state?.sshkeys;
            resourceInputs["startup"] = state?.startup;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["storageType"] = state?.storageType;
            resourceInputs["tablet"] = state?.tablet;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetNode"] = state?.targetNode;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["unusedDisks"] = state?.unusedDisks;
            resourceInputs["usbs"] = state?.usbs;
            resourceInputs["vcpus"] = state?.vcpus;
            resourceInputs["vgas"] = state?.vgas;
            resourceInputs["vlan"] = state?.vlan;
            resourceInputs["vmQemuId"] = state?.vmQemuId;
            resourceInputs["vmid"] = state?.vmid;
        }
        else {
            const args = argsOrState;
            if (args?.targetNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetNode'");
            }
            resourceInputs["additionalWait"] = args?.additionalWait;
            resourceInputs["agent"] = args?.agent;
            resourceInputs["args"] = args?.args;
            resourceInputs["automaticReboot"] = args?.automaticReboot;
            resourceInputs["balloon"] = args?.balloon;
            resourceInputs["bios"] = args?.bios;
            resourceInputs["boot"] = args?.boot;
            resourceInputs["bootdisk"] = args?.bootdisk;
            resourceInputs["bridge"] = args?.bridge;
            resourceInputs["ciWait"] = args?.ciWait;
            resourceInputs["cicustom"] = args?.cicustom;
            resourceInputs["cipassword"] = args?.cipassword ? pulumi.secret(args.cipassword) : undefined;
            resourceInputs["ciuser"] = args?.ciuser;
            resourceInputs["clone"] = args?.clone;
            resourceInputs["cloneWait"] = args?.cloneWait;
            resourceInputs["cloudinitCdromStorage"] = args?.cloudinitCdromStorage;
            resourceInputs["cores"] = args?.cores;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["defineConnectionInfo"] = args?.defineConnectionInfo;
            resourceInputs["desc"] = args?.desc;
            resourceInputs["diskGb"] = args?.diskGb;
            resourceInputs["disks"] = args?.disks;
            resourceInputs["forceCreate"] = args?.forceCreate;
            resourceInputs["forceRecreateOnChangeOf"] = args?.forceRecreateOnChangeOf;
            resourceInputs["fullClone"] = args?.fullClone;
            resourceInputs["guestAgentReadyTimeout"] = args?.guestAgentReadyTimeout;
            resourceInputs["hagroup"] = args?.hagroup;
            resourceInputs["hastate"] = args?.hastate;
            resourceInputs["hostpcis"] = args?.hostpcis;
            resourceInputs["hotplug"] = args?.hotplug;
            resourceInputs["ipconfig0"] = args?.ipconfig0;
            resourceInputs["ipconfig1"] = args?.ipconfig1;
            resourceInputs["ipconfig10"] = args?.ipconfig10;
            resourceInputs["ipconfig11"] = args?.ipconfig11;
            resourceInputs["ipconfig12"] = args?.ipconfig12;
            resourceInputs["ipconfig13"] = args?.ipconfig13;
            resourceInputs["ipconfig14"] = args?.ipconfig14;
            resourceInputs["ipconfig15"] = args?.ipconfig15;
            resourceInputs["ipconfig2"] = args?.ipconfig2;
            resourceInputs["ipconfig3"] = args?.ipconfig3;
            resourceInputs["ipconfig4"] = args?.ipconfig4;
            resourceInputs["ipconfig5"] = args?.ipconfig5;
            resourceInputs["ipconfig6"] = args?.ipconfig6;
            resourceInputs["ipconfig7"] = args?.ipconfig7;
            resourceInputs["ipconfig8"] = args?.ipconfig8;
            resourceInputs["ipconfig9"] = args?.ipconfig9;
            resourceInputs["iso"] = args?.iso;
            resourceInputs["kvm"] = args?.kvm;
            resourceInputs["mac"] = args?.mac;
            resourceInputs["machine"] = args?.machine;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameserver"] = args?.nameserver;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["nic"] = args?.nic;
            resourceInputs["numa"] = args?.numa;
            resourceInputs["onboot"] = args?.onboot;
            resourceInputs["oncreate"] = args?.oncreate;
            resourceInputs["osNetworkConfig"] = args?.osNetworkConfig;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["pool"] = args?.pool;
            resourceInputs["preprovision"] = args?.preprovision;
            resourceInputs["pxe"] = args?.pxe;
            resourceInputs["qemuOs"] = args?.qemuOs;
            resourceInputs["scsihw"] = args?.scsihw;
            resourceInputs["searchdomain"] = args?.searchdomain;
            resourceInputs["serials"] = args?.serials;
            resourceInputs["sockets"] = args?.sockets;
            resourceInputs["sshForwardIp"] = args?.sshForwardIp;
            resourceInputs["sshPrivateKey"] = args?.sshPrivateKey ? pulumi.secret(args.sshPrivateKey) : undefined;
            resourceInputs["sshUser"] = args?.sshUser;
            resourceInputs["sshkeys"] = args?.sshkeys;
            resourceInputs["startup"] = args?.startup;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["storageType"] = args?.storageType;
            resourceInputs["tablet"] = args?.tablet;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetNode"] = args?.targetNode;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["usbs"] = args?.usbs;
            resourceInputs["vcpus"] = args?.vcpus;
            resourceInputs["vgas"] = args?.vgas;
            resourceInputs["vlan"] = args?.vlan;
            resourceInputs["vmQemuId"] = args?.vmQemuId;
            resourceInputs["vmid"] = args?.vmid;
            resourceInputs["defaultIpv4Address"] = undefined /*out*/;
            resourceInputs["rebootRequired"] = undefined /*out*/;
            resourceInputs["sshHost"] = undefined /*out*/;
            resourceInputs["sshPort"] = undefined /*out*/;
            resourceInputs["unusedDisks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cipassword", "sshPrivateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VmQemu.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.VmQemu = VmQemu;
/** @internal */
VmQemu.__pulumiType = 'proxmox:index/vmQemu:VmQemu';
//# sourceMappingURL=vmQemu.js.map