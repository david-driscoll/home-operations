"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lxc = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Lxc extends pulumi.CustomResource {
    /**
     * Get an existing Lxc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Lxc(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Lxc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lxc.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arch"] = state?.arch;
            resourceInputs["bwlimit"] = state?.bwlimit;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["cloneStorage"] = state?.cloneStorage;
            resourceInputs["cmode"] = state?.cmode;
            resourceInputs["console"] = state?.console;
            resourceInputs["cores"] = state?.cores;
            resourceInputs["cpulimit"] = state?.cpulimit;
            resourceInputs["cpuunits"] = state?.cpuunits;
            resourceInputs["description"] = state?.description;
            resourceInputs["features"] = state?.features;
            resourceInputs["force"] = state?.force;
            resourceInputs["full"] = state?.full;
            resourceInputs["hagroup"] = state?.hagroup;
            resourceInputs["hastate"] = state?.hastate;
            resourceInputs["hookscript"] = state?.hookscript;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["ignoreUnpackErrors"] = state?.ignoreUnpackErrors;
            resourceInputs["lock"] = state?.lock;
            resourceInputs["lxcId"] = state?.lxcId;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["mountpoints"] = state?.mountpoints;
            resourceInputs["nameserver"] = state?.nameserver;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["onboot"] = state?.onboot;
            resourceInputs["ostemplate"] = state?.ostemplate;
            resourceInputs["ostype"] = state?.ostype;
            resourceInputs["password"] = state?.password;
            resourceInputs["pool"] = state?.pool;
            resourceInputs["protection"] = state?.protection;
            resourceInputs["restore"] = state?.restore;
            resourceInputs["rootfs"] = state?.rootfs;
            resourceInputs["searchdomain"] = state?.searchdomain;
            resourceInputs["sshPublicKeys"] = state?.sshPublicKeys;
            resourceInputs["start"] = state?.start;
            resourceInputs["startup"] = state?.startup;
            resourceInputs["swap"] = state?.swap;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetNode"] = state?.targetNode;
            resourceInputs["template"] = state?.template;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["tty"] = state?.tty;
            resourceInputs["unique"] = state?.unique;
            resourceInputs["unprivileged"] = state?.unprivileged;
            resourceInputs["unuseds"] = state?.unuseds;
            resourceInputs["vmid"] = state?.vmid;
        }
        else {
            const args = argsOrState;
            if (args?.targetNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetNode'");
            }
            resourceInputs["arch"] = args?.arch;
            resourceInputs["bwlimit"] = args?.bwlimit;
            resourceInputs["clone"] = args?.clone;
            resourceInputs["cloneStorage"] = args?.cloneStorage;
            resourceInputs["cmode"] = args?.cmode;
            resourceInputs["console"] = args?.console;
            resourceInputs["cores"] = args?.cores;
            resourceInputs["cpulimit"] = args?.cpulimit;
            resourceInputs["cpuunits"] = args?.cpuunits;
            resourceInputs["description"] = args?.description;
            resourceInputs["features"] = args?.features;
            resourceInputs["force"] = args?.force;
            resourceInputs["full"] = args?.full;
            resourceInputs["hagroup"] = args?.hagroup;
            resourceInputs["hastate"] = args?.hastate;
            resourceInputs["hookscript"] = args?.hookscript;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["ignoreUnpackErrors"] = args?.ignoreUnpackErrors;
            resourceInputs["lock"] = args?.lock;
            resourceInputs["lxcId"] = args?.lxcId;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["mountpoints"] = args?.mountpoints;
            resourceInputs["nameserver"] = args?.nameserver;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["onboot"] = args?.onboot;
            resourceInputs["ostemplate"] = args?.ostemplate;
            resourceInputs["ostype"] = args?.ostype;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pool"] = args?.pool;
            resourceInputs["protection"] = args?.protection;
            resourceInputs["restore"] = args?.restore;
            resourceInputs["rootfs"] = args?.rootfs;
            resourceInputs["searchdomain"] = args?.searchdomain;
            resourceInputs["sshPublicKeys"] = args?.sshPublicKeys;
            resourceInputs["start"] = args?.start;
            resourceInputs["startup"] = args?.startup;
            resourceInputs["swap"] = args?.swap;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetNode"] = args?.targetNode;
            resourceInputs["template"] = args?.template;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["tty"] = args?.tty;
            resourceInputs["unique"] = args?.unique;
            resourceInputs["unprivileged"] = args?.unprivileged;
            resourceInputs["vmid"] = args?.vmid;
            resourceInputs["unuseds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Lxc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Lxc = Lxc;
/** @internal */
Lxc.__pulumiType = 'proxmox:index/lxc:Lxc';
//# sourceMappingURL=lxc.js.map