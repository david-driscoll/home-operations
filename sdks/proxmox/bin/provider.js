"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The provider type for the proxmox package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
class Provider extends pulumi.ProviderResource {
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        {
            resourceInputs["pmApiTokenId"] = args?.pmApiTokenId;
            resourceInputs["pmApiTokenSecret"] = args?.pmApiTokenSecret ? pulumi.secret(args.pmApiTokenSecret) : undefined;
            resourceInputs["pmApiUrl"] = args?.pmApiUrl;
            resourceInputs["pmDangerouslyIgnoreUnknownAttributes"] = pulumi.output(args?.pmDangerouslyIgnoreUnknownAttributes).apply(JSON.stringify);
            resourceInputs["pmDebug"] = pulumi.output(args?.pmDebug).apply(JSON.stringify);
            resourceInputs["pmHttpHeaders"] = args?.pmHttpHeaders;
            resourceInputs["pmLogEnable"] = pulumi.output(args?.pmLogEnable).apply(JSON.stringify);
            resourceInputs["pmLogFile"] = args?.pmLogFile;
            resourceInputs["pmLogLevels"] = pulumi.output(args?.pmLogLevels).apply(JSON.stringify);
            resourceInputs["pmOtp"] = args?.pmOtp;
            resourceInputs["pmParallel"] = pulumi.output(args?.pmParallel).apply(JSON.stringify);
            resourceInputs["pmPassword"] = args?.pmPassword ? pulumi.secret(args.pmPassword) : undefined;
            resourceInputs["pmProxyServer"] = args?.pmProxyServer;
            resourceInputs["pmTimeout"] = pulumi.output(args?.pmTimeout).apply(JSON.stringify);
            resourceInputs["pmTlsInsecure"] = pulumi.output(args?.pmTlsInsecure).apply(JSON.stringify);
            resourceInputs["pmUser"] = args?.pmUser;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["pmApiTokenSecret", "pmPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig() {
        const result = pulumi.runtime.call("pulumi:providers:proxmox/terraformConfig", {
            "__self__": this,
        }, this, utilities.getPackage());
        return result.result;
    }
}
exports.Provider = Provider;
/** @internal */
Provider.__pulumiType = 'proxmox';
//# sourceMappingURL=provider.js.map