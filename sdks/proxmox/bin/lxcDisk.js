"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LxcDisk = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class LxcDisk extends pulumi.CustomResource {
    /**
     * Get an existing LxcDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LxcDisk(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LxcDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LxcDisk.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["backup"] = state?.backup;
            resourceInputs["container"] = state?.container;
            resourceInputs["lxcDiskId"] = state?.lxcDiskId;
            resourceInputs["mountoptions"] = state?.mountoptions;
            resourceInputs["mp"] = state?.mp;
            resourceInputs["quota"] = state?.quota;
            resourceInputs["replicate"] = state?.replicate;
            resourceInputs["shared"] = state?.shared;
            resourceInputs["size"] = state?.size;
            resourceInputs["slot"] = state?.slot;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["volume"] = state?.volume;
        }
        else {
            const args = argsOrState;
            if (args?.container === undefined && !opts.urn) {
                throw new Error("Missing required property 'container'");
            }
            if (args?.mp === undefined && !opts.urn) {
                throw new Error("Missing required property 'mp'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.slot === undefined && !opts.urn) {
                throw new Error("Missing required property 'slot'");
            }
            if (args?.storage === undefined && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["acl"] = args?.acl;
            resourceInputs["backup"] = args?.backup;
            resourceInputs["container"] = args?.container;
            resourceInputs["lxcDiskId"] = args?.lxcDiskId;
            resourceInputs["mountoptions"] = args?.mountoptions;
            resourceInputs["mp"] = args?.mp;
            resourceInputs["quota"] = args?.quota;
            resourceInputs["replicate"] = args?.replicate;
            resourceInputs["shared"] = args?.shared;
            resourceInputs["size"] = args?.size;
            resourceInputs["slot"] = args?.slot;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["volume"] = args?.volume;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LxcDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.LxcDisk = LxcDisk;
/** @internal */
LxcDisk.__pulumiType = 'proxmox:index/lxcDisk:LxcDisk';
//# sourceMappingURL=lxcDisk.js.map