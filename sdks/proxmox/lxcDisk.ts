// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LxcDisk extends pulumi.CustomResource {
    /**
     * Get an existing LxcDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LxcDiskState, opts?: pulumi.CustomResourceOptions): LxcDisk {
        return new LxcDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmox:index/lxcDisk:LxcDisk';

    /**
     * Returns true if the given object is an instance of LxcDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LxcDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LxcDisk.__pulumiType;
    }

    declare public readonly acl: pulumi.Output<boolean | undefined>;
    declare public readonly backup: pulumi.Output<boolean | undefined>;
    declare public readonly container: pulumi.Output<string>;
    declare public readonly lxcDiskId: pulumi.Output<string>;
    declare public readonly mountoptions: pulumi.Output<outputs.LxcDiskMountoptions | undefined>;
    declare public readonly mp: pulumi.Output<string>;
    declare public readonly quota: pulumi.Output<boolean | undefined>;
    declare public readonly replicate: pulumi.Output<boolean | undefined>;
    declare public readonly shared: pulumi.Output<boolean | undefined>;
    declare public readonly size: pulumi.Output<string>;
    declare public readonly slot: pulumi.Output<number>;
    declare public readonly storage: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.LxcDiskTimeouts | undefined>;
    declare public readonly volume: pulumi.Output<string>;

    /**
     * Create a LxcDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LxcDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LxcDiskArgs | LxcDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LxcDiskState | undefined;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["backup"] = state?.backup;
            resourceInputs["container"] = state?.container;
            resourceInputs["lxcDiskId"] = state?.lxcDiskId;
            resourceInputs["mountoptions"] = state?.mountoptions;
            resourceInputs["mp"] = state?.mp;
            resourceInputs["quota"] = state?.quota;
            resourceInputs["replicate"] = state?.replicate;
            resourceInputs["shared"] = state?.shared;
            resourceInputs["size"] = state?.size;
            resourceInputs["slot"] = state?.slot;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["volume"] = state?.volume;
        } else {
            const args = argsOrState as LxcDiskArgs | undefined;
            if (args?.container === undefined && !opts.urn) {
                throw new Error("Missing required property 'container'");
            }
            if (args?.mp === undefined && !opts.urn) {
                throw new Error("Missing required property 'mp'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.slot === undefined && !opts.urn) {
                throw new Error("Missing required property 'slot'");
            }
            if (args?.storage === undefined && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["acl"] = args?.acl;
            resourceInputs["backup"] = args?.backup;
            resourceInputs["container"] = args?.container;
            resourceInputs["lxcDiskId"] = args?.lxcDiskId;
            resourceInputs["mountoptions"] = args?.mountoptions;
            resourceInputs["mp"] = args?.mp;
            resourceInputs["quota"] = args?.quota;
            resourceInputs["replicate"] = args?.replicate;
            resourceInputs["shared"] = args?.shared;
            resourceInputs["size"] = args?.size;
            resourceInputs["slot"] = args?.slot;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["volume"] = args?.volume;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LxcDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LxcDisk resources.
 */
export interface LxcDiskState {
    acl?: pulumi.Input<boolean>;
    backup?: pulumi.Input<boolean>;
    container?: pulumi.Input<string>;
    lxcDiskId?: pulumi.Input<string>;
    mountoptions?: pulumi.Input<inputs.LxcDiskMountoptions>;
    mp?: pulumi.Input<string>;
    quota?: pulumi.Input<boolean>;
    replicate?: pulumi.Input<boolean>;
    shared?: pulumi.Input<boolean>;
    size?: pulumi.Input<string>;
    slot?: pulumi.Input<number>;
    storage?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LxcDiskTimeouts>;
    volume?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LxcDisk resource.
 */
export interface LxcDiskArgs {
    acl?: pulumi.Input<boolean>;
    backup?: pulumi.Input<boolean>;
    container: pulumi.Input<string>;
    lxcDiskId?: pulumi.Input<string>;
    mountoptions?: pulumi.Input<inputs.LxcDiskMountoptions>;
    mp: pulumi.Input<string>;
    quota?: pulumi.Input<boolean>;
    replicate?: pulumi.Input<boolean>;
    shared?: pulumi.Input<boolean>;
    size: pulumi.Input<string>;
    slot: pulumi.Input<number>;
    storage: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LxcDiskTimeouts>;
    volume?: pulumi.Input<string>;
}
