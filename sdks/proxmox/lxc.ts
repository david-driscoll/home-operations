// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lxc extends pulumi.CustomResource {
    /**
     * Get an existing Lxc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LxcState, opts?: pulumi.CustomResourceOptions): Lxc {
        return new Lxc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmox:index/lxc:Lxc';

    /**
     * Returns true if the given object is an instance of Lxc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lxc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lxc.__pulumiType;
    }

    declare public readonly arch: pulumi.Output<string | undefined>;
    declare public readonly bwlimit: pulumi.Output<number | undefined>;
    declare public readonly clone: pulumi.Output<string | undefined>;
    declare public readonly cloneStorage: pulumi.Output<string | undefined>;
    declare public readonly cmode: pulumi.Output<string | undefined>;
    declare public readonly console: pulumi.Output<boolean | undefined>;
    declare public readonly cores: pulumi.Output<number | undefined>;
    declare public readonly cpulimit: pulumi.Output<number | undefined>;
    declare public readonly cpuunits: pulumi.Output<number | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly features: pulumi.Output<outputs.LxcFeatures | undefined>;
    declare public readonly force: pulumi.Output<boolean | undefined>;
    declare public readonly full: pulumi.Output<boolean | undefined>;
    declare public readonly hagroup: pulumi.Output<string | undefined>;
    declare public readonly hastate: pulumi.Output<string | undefined>;
    declare public readonly hookscript: pulumi.Output<string | undefined>;
    declare public readonly hostname: pulumi.Output<string | undefined>;
    declare public readonly ignoreUnpackErrors: pulumi.Output<boolean | undefined>;
    declare public readonly lock: pulumi.Output<string | undefined>;
    declare public readonly lxcId: pulumi.Output<string>;
    declare public readonly memory: pulumi.Output<number | undefined>;
    declare public readonly mountpoints: pulumi.Output<outputs.LxcMountpoint[] | undefined>;
    declare public readonly nameserver: pulumi.Output<string | undefined>;
    declare public readonly networks: pulumi.Output<outputs.LxcNetwork[] | undefined>;
    declare public readonly onboot: pulumi.Output<boolean | undefined>;
    declare public readonly ostemplate: pulumi.Output<string | undefined>;
    declare public readonly ostype: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly pool: pulumi.Output<string | undefined>;
    declare public readonly protection: pulumi.Output<boolean | undefined>;
    declare public readonly restore: pulumi.Output<boolean | undefined>;
    declare public readonly rootfs: pulumi.Output<outputs.LxcRootfs | undefined>;
    declare public readonly searchdomain: pulumi.Output<string | undefined>;
    declare public readonly sshPublicKeys: pulumi.Output<string | undefined>;
    declare public readonly start: pulumi.Output<boolean | undefined>;
    declare public readonly startup: pulumi.Output<string | undefined>;
    declare public readonly swap: pulumi.Output<number | undefined>;
    declare public readonly tags: pulumi.Output<string | undefined>;
    declare public readonly targetNode: pulumi.Output<string>;
    declare public readonly template: pulumi.Output<boolean | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.LxcTimeouts | undefined>;
    declare public readonly tty: pulumi.Output<number | undefined>;
    declare public readonly unique: pulumi.Output<boolean | undefined>;
    declare public readonly unprivileged: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly unuseds: pulumi.Output<string[]>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    declare public readonly vmid: pulumi.Output<number>;

    /**
     * Create a Lxc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LxcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LxcArgs | LxcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LxcState | undefined;
            resourceInputs["arch"] = state?.arch;
            resourceInputs["bwlimit"] = state?.bwlimit;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["cloneStorage"] = state?.cloneStorage;
            resourceInputs["cmode"] = state?.cmode;
            resourceInputs["console"] = state?.console;
            resourceInputs["cores"] = state?.cores;
            resourceInputs["cpulimit"] = state?.cpulimit;
            resourceInputs["cpuunits"] = state?.cpuunits;
            resourceInputs["description"] = state?.description;
            resourceInputs["features"] = state?.features;
            resourceInputs["force"] = state?.force;
            resourceInputs["full"] = state?.full;
            resourceInputs["hagroup"] = state?.hagroup;
            resourceInputs["hastate"] = state?.hastate;
            resourceInputs["hookscript"] = state?.hookscript;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["ignoreUnpackErrors"] = state?.ignoreUnpackErrors;
            resourceInputs["lock"] = state?.lock;
            resourceInputs["lxcId"] = state?.lxcId;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["mountpoints"] = state?.mountpoints;
            resourceInputs["nameserver"] = state?.nameserver;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["onboot"] = state?.onboot;
            resourceInputs["ostemplate"] = state?.ostemplate;
            resourceInputs["ostype"] = state?.ostype;
            resourceInputs["password"] = state?.password;
            resourceInputs["pool"] = state?.pool;
            resourceInputs["protection"] = state?.protection;
            resourceInputs["restore"] = state?.restore;
            resourceInputs["rootfs"] = state?.rootfs;
            resourceInputs["searchdomain"] = state?.searchdomain;
            resourceInputs["sshPublicKeys"] = state?.sshPublicKeys;
            resourceInputs["start"] = state?.start;
            resourceInputs["startup"] = state?.startup;
            resourceInputs["swap"] = state?.swap;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetNode"] = state?.targetNode;
            resourceInputs["template"] = state?.template;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["tty"] = state?.tty;
            resourceInputs["unique"] = state?.unique;
            resourceInputs["unprivileged"] = state?.unprivileged;
            resourceInputs["unuseds"] = state?.unuseds;
            resourceInputs["vmid"] = state?.vmid;
        } else {
            const args = argsOrState as LxcArgs | undefined;
            if (args?.targetNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetNode'");
            }
            resourceInputs["arch"] = args?.arch;
            resourceInputs["bwlimit"] = args?.bwlimit;
            resourceInputs["clone"] = args?.clone;
            resourceInputs["cloneStorage"] = args?.cloneStorage;
            resourceInputs["cmode"] = args?.cmode;
            resourceInputs["console"] = args?.console;
            resourceInputs["cores"] = args?.cores;
            resourceInputs["cpulimit"] = args?.cpulimit;
            resourceInputs["cpuunits"] = args?.cpuunits;
            resourceInputs["description"] = args?.description;
            resourceInputs["features"] = args?.features;
            resourceInputs["force"] = args?.force;
            resourceInputs["full"] = args?.full;
            resourceInputs["hagroup"] = args?.hagroup;
            resourceInputs["hastate"] = args?.hastate;
            resourceInputs["hookscript"] = args?.hookscript;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["ignoreUnpackErrors"] = args?.ignoreUnpackErrors;
            resourceInputs["lock"] = args?.lock;
            resourceInputs["lxcId"] = args?.lxcId;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["mountpoints"] = args?.mountpoints;
            resourceInputs["nameserver"] = args?.nameserver;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["onboot"] = args?.onboot;
            resourceInputs["ostemplate"] = args?.ostemplate;
            resourceInputs["ostype"] = args?.ostype;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pool"] = args?.pool;
            resourceInputs["protection"] = args?.protection;
            resourceInputs["restore"] = args?.restore;
            resourceInputs["rootfs"] = args?.rootfs;
            resourceInputs["searchdomain"] = args?.searchdomain;
            resourceInputs["sshPublicKeys"] = args?.sshPublicKeys;
            resourceInputs["start"] = args?.start;
            resourceInputs["startup"] = args?.startup;
            resourceInputs["swap"] = args?.swap;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetNode"] = args?.targetNode;
            resourceInputs["template"] = args?.template;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["tty"] = args?.tty;
            resourceInputs["unique"] = args?.unique;
            resourceInputs["unprivileged"] = args?.unprivileged;
            resourceInputs["vmid"] = args?.vmid;
            resourceInputs["unuseds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Lxc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lxc resources.
 */
export interface LxcState {
    arch?: pulumi.Input<string>;
    bwlimit?: pulumi.Input<number>;
    clone?: pulumi.Input<string>;
    cloneStorage?: pulumi.Input<string>;
    cmode?: pulumi.Input<string>;
    console?: pulumi.Input<boolean>;
    cores?: pulumi.Input<number>;
    cpulimit?: pulumi.Input<number>;
    cpuunits?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    features?: pulumi.Input<inputs.LxcFeatures>;
    force?: pulumi.Input<boolean>;
    full?: pulumi.Input<boolean>;
    hagroup?: pulumi.Input<string>;
    hastate?: pulumi.Input<string>;
    hookscript?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ignoreUnpackErrors?: pulumi.Input<boolean>;
    lock?: pulumi.Input<string>;
    lxcId?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    mountpoints?: pulumi.Input<pulumi.Input<inputs.LxcMountpoint>[]>;
    nameserver?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.LxcNetwork>[]>;
    onboot?: pulumi.Input<boolean>;
    ostemplate?: pulumi.Input<string>;
    ostype?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    protection?: pulumi.Input<boolean>;
    restore?: pulumi.Input<boolean>;
    rootfs?: pulumi.Input<inputs.LxcRootfs>;
    searchdomain?: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<string>;
    start?: pulumi.Input<boolean>;
    startup?: pulumi.Input<string>;
    swap?: pulumi.Input<number>;
    tags?: pulumi.Input<string>;
    targetNode?: pulumi.Input<string>;
    template?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.LxcTimeouts>;
    tty?: pulumi.Input<number>;
    unique?: pulumi.Input<boolean>;
    unprivileged?: pulumi.Input<boolean>;
    unuseds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    vmid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Lxc resource.
 */
export interface LxcArgs {
    arch?: pulumi.Input<string>;
    bwlimit?: pulumi.Input<number>;
    clone?: pulumi.Input<string>;
    cloneStorage?: pulumi.Input<string>;
    cmode?: pulumi.Input<string>;
    console?: pulumi.Input<boolean>;
    cores?: pulumi.Input<number>;
    cpulimit?: pulumi.Input<number>;
    cpuunits?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    features?: pulumi.Input<inputs.LxcFeatures>;
    force?: pulumi.Input<boolean>;
    full?: pulumi.Input<boolean>;
    hagroup?: pulumi.Input<string>;
    hastate?: pulumi.Input<string>;
    hookscript?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ignoreUnpackErrors?: pulumi.Input<boolean>;
    lock?: pulumi.Input<string>;
    lxcId?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    mountpoints?: pulumi.Input<pulumi.Input<inputs.LxcMountpoint>[]>;
    nameserver?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.LxcNetwork>[]>;
    onboot?: pulumi.Input<boolean>;
    ostemplate?: pulumi.Input<string>;
    ostype?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    protection?: pulumi.Input<boolean>;
    restore?: pulumi.Input<boolean>;
    rootfs?: pulumi.Input<inputs.LxcRootfs>;
    searchdomain?: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<string>;
    start?: pulumi.Input<boolean>;
    startup?: pulumi.Input<string>;
    swap?: pulumi.Input<number>;
    tags?: pulumi.Input<string>;
    targetNode: pulumi.Input<string>;
    template?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.LxcTimeouts>;
    tty?: pulumi.Input<number>;
    unique?: pulumi.Input<boolean>;
    unprivileged?: pulumi.Input<boolean>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    vmid?: pulumi.Input<number>;
}
