// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmQemu extends pulumi.CustomResource {
    /**
     * Get an existing VmQemu resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmQemuState, opts?: pulumi.CustomResourceOptions): VmQemu {
        return new VmQemu(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmox:index/vmQemu:VmQemu';

    /**
     * Returns true if the given object is an instance of VmQemu.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmQemu {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmQemu.__pulumiType;
    }

    declare public readonly additionalWait: pulumi.Output<number | undefined>;
    declare public readonly agent: pulumi.Output<number | undefined>;
    declare public readonly args: pulumi.Output<string | undefined>;
    /**
     * Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
     */
    declare public readonly automaticReboot: pulumi.Output<boolean | undefined>;
    declare public readonly balloon: pulumi.Output<number | undefined>;
    /**
     * The VM bios, it can be seabios or ovmf
     */
    declare public readonly bios: pulumi.Output<string | undefined>;
    /**
     * Boot order of the VM
     */
    declare public readonly boot: pulumi.Output<string>;
    declare public readonly bootdisk: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly bridge: pulumi.Output<string | undefined>;
    declare public readonly ciWait: pulumi.Output<number | undefined>;
    declare public readonly cicustom: pulumi.Output<string | undefined>;
    declare public readonly cipassword: pulumi.Output<string | undefined>;
    declare public readonly ciuser: pulumi.Output<string | undefined>;
    declare public readonly clone: pulumi.Output<string | undefined>;
    declare public readonly cloneWait: pulumi.Output<number | undefined>;
    declare public readonly cloudinitCdromStorage: pulumi.Output<string | undefined>;
    declare public readonly cores: pulumi.Output<number | undefined>;
    declare public readonly cpu: pulumi.Output<string | undefined>;
    /**
     * Use to track vm ipv4 address
     */
    declare public /*out*/ readonly defaultIpv4Address: pulumi.Output<string>;
    /**
     * By default define SSH for provisioner info
     */
    declare public readonly defineConnectionInfo: pulumi.Output<boolean | undefined>;
    /**
     * The VM description
     */
    declare public readonly desc: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly diskGb: pulumi.Output<number | undefined>;
    declare public readonly disks: pulumi.Output<outputs.VmQemuDisk[] | undefined>;
    declare public readonly forceCreate: pulumi.Output<boolean | undefined>;
    declare public readonly forceRecreateOnChangeOf: pulumi.Output<string | undefined>;
    declare public readonly fullClone: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly guestAgentReadyTimeout: pulumi.Output<number | undefined>;
    declare public readonly hagroup: pulumi.Output<string | undefined>;
    declare public readonly hastate: pulumi.Output<string | undefined>;
    declare public readonly hostpcis: pulumi.Output<outputs.VmQemuHostpci[] | undefined>;
    declare public readonly hotplug: pulumi.Output<string | undefined>;
    declare public readonly ipconfig0: pulumi.Output<string | undefined>;
    declare public readonly ipconfig1: pulumi.Output<string | undefined>;
    declare public readonly ipconfig10: pulumi.Output<string | undefined>;
    declare public readonly ipconfig11: pulumi.Output<string | undefined>;
    declare public readonly ipconfig12: pulumi.Output<string | undefined>;
    declare public readonly ipconfig13: pulumi.Output<string | undefined>;
    declare public readonly ipconfig14: pulumi.Output<string | undefined>;
    declare public readonly ipconfig15: pulumi.Output<string | undefined>;
    declare public readonly ipconfig2: pulumi.Output<string | undefined>;
    declare public readonly ipconfig3: pulumi.Output<string | undefined>;
    declare public readonly ipconfig4: pulumi.Output<string | undefined>;
    declare public readonly ipconfig5: pulumi.Output<string | undefined>;
    declare public readonly ipconfig6: pulumi.Output<string | undefined>;
    declare public readonly ipconfig7: pulumi.Output<string | undefined>;
    declare public readonly ipconfig8: pulumi.Output<string | undefined>;
    declare public readonly ipconfig9: pulumi.Output<string | undefined>;
    declare public readonly iso: pulumi.Output<string | undefined>;
    declare public readonly kvm: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly mac: pulumi.Output<string | undefined>;
    /**
     * Specifies the Qemu machine type.
     */
    declare public readonly machine: pulumi.Output<string | undefined>;
    declare public readonly memory: pulumi.Output<number | undefined>;
    /**
     * The VM name
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nameserver: pulumi.Output<string>;
    declare public readonly networks: pulumi.Output<outputs.VmQemuNetwork[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly nic: pulumi.Output<string | undefined>;
    declare public readonly numa: pulumi.Output<boolean | undefined>;
    /**
     * VM autostart on boot
     */
    declare public readonly onboot: pulumi.Output<boolean | undefined>;
    /**
     * VM autostart on create
     */
    declare public readonly oncreate: pulumi.Output<boolean | undefined>;
    declare public readonly osNetworkConfig: pulumi.Output<string | undefined>;
    declare public readonly osType: pulumi.Output<string | undefined>;
    declare public readonly pool: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly preprovision: pulumi.Output<boolean | undefined>;
    declare public readonly pxe: pulumi.Output<boolean | undefined>;
    declare public readonly qemuOs: pulumi.Output<string | undefined>;
    /**
     * Internal variable, true if any of the modified parameters requires a reboot to take effect.
     */
    declare public /*out*/ readonly rebootRequired: pulumi.Output<boolean>;
    declare public readonly scsihw: pulumi.Output<string | undefined>;
    declare public readonly searchdomain: pulumi.Output<string>;
    declare public readonly serials: pulumi.Output<outputs.VmQemuSerial[] | undefined>;
    declare public readonly sockets: pulumi.Output<number | undefined>;
    /**
     * Use to pass instance ip address, redundant
     */
    declare public readonly sshForwardIp: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly sshHost: pulumi.Output<string>;
    declare public /*out*/ readonly sshPort: pulumi.Output<string>;
    declare public readonly sshPrivateKey: pulumi.Output<string | undefined>;
    declare public readonly sshUser: pulumi.Output<string | undefined>;
    declare public readonly sshkeys: pulumi.Output<string | undefined>;
    /**
     * Startup order of the VM
     */
    declare public readonly startup: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly storage: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly storageType: pulumi.Output<string | undefined>;
    /**
     * Enable tablet mode in the VM
     */
    declare public readonly tablet: pulumi.Output<boolean | undefined>;
    declare public readonly tags: pulumi.Output<string | undefined>;
    /**
     * The node where VM goes to
     */
    declare public readonly targetNode: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.VmQemuTimeouts | undefined>;
    /**
     * Record unused disks in proxmox. This is intended to be read-only for now.
     */
    declare public /*out*/ readonly unusedDisks: pulumi.Output<outputs.VmQemuUnusedDisk[]>;
    declare public readonly usbs: pulumi.Output<outputs.VmQemuUsb[] | undefined>;
    declare public readonly vcpus: pulumi.Output<number | undefined>;
    declare public readonly vgas: pulumi.Output<outputs.VmQemuVga[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly vlan: pulumi.Output<number | undefined>;
    declare public readonly vmQemuId: pulumi.Output<string>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    declare public readonly vmid: pulumi.Output<number>;

    /**
     * Create a VmQemu resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmQemuArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmQemuArgs | VmQemuState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmQemuState | undefined;
            resourceInputs["additionalWait"] = state?.additionalWait;
            resourceInputs["agent"] = state?.agent;
            resourceInputs["args"] = state?.args;
            resourceInputs["automaticReboot"] = state?.automaticReboot;
            resourceInputs["balloon"] = state?.balloon;
            resourceInputs["bios"] = state?.bios;
            resourceInputs["boot"] = state?.boot;
            resourceInputs["bootdisk"] = state?.bootdisk;
            resourceInputs["bridge"] = state?.bridge;
            resourceInputs["ciWait"] = state?.ciWait;
            resourceInputs["cicustom"] = state?.cicustom;
            resourceInputs["cipassword"] = state?.cipassword;
            resourceInputs["ciuser"] = state?.ciuser;
            resourceInputs["clone"] = state?.clone;
            resourceInputs["cloneWait"] = state?.cloneWait;
            resourceInputs["cloudinitCdromStorage"] = state?.cloudinitCdromStorage;
            resourceInputs["cores"] = state?.cores;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["defaultIpv4Address"] = state?.defaultIpv4Address;
            resourceInputs["defineConnectionInfo"] = state?.defineConnectionInfo;
            resourceInputs["desc"] = state?.desc;
            resourceInputs["diskGb"] = state?.diskGb;
            resourceInputs["disks"] = state?.disks;
            resourceInputs["forceCreate"] = state?.forceCreate;
            resourceInputs["forceRecreateOnChangeOf"] = state?.forceRecreateOnChangeOf;
            resourceInputs["fullClone"] = state?.fullClone;
            resourceInputs["guestAgentReadyTimeout"] = state?.guestAgentReadyTimeout;
            resourceInputs["hagroup"] = state?.hagroup;
            resourceInputs["hastate"] = state?.hastate;
            resourceInputs["hostpcis"] = state?.hostpcis;
            resourceInputs["hotplug"] = state?.hotplug;
            resourceInputs["ipconfig0"] = state?.ipconfig0;
            resourceInputs["ipconfig1"] = state?.ipconfig1;
            resourceInputs["ipconfig10"] = state?.ipconfig10;
            resourceInputs["ipconfig11"] = state?.ipconfig11;
            resourceInputs["ipconfig12"] = state?.ipconfig12;
            resourceInputs["ipconfig13"] = state?.ipconfig13;
            resourceInputs["ipconfig14"] = state?.ipconfig14;
            resourceInputs["ipconfig15"] = state?.ipconfig15;
            resourceInputs["ipconfig2"] = state?.ipconfig2;
            resourceInputs["ipconfig3"] = state?.ipconfig3;
            resourceInputs["ipconfig4"] = state?.ipconfig4;
            resourceInputs["ipconfig5"] = state?.ipconfig5;
            resourceInputs["ipconfig6"] = state?.ipconfig6;
            resourceInputs["ipconfig7"] = state?.ipconfig7;
            resourceInputs["ipconfig8"] = state?.ipconfig8;
            resourceInputs["ipconfig9"] = state?.ipconfig9;
            resourceInputs["iso"] = state?.iso;
            resourceInputs["kvm"] = state?.kvm;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["machine"] = state?.machine;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameserver"] = state?.nameserver;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["nic"] = state?.nic;
            resourceInputs["numa"] = state?.numa;
            resourceInputs["onboot"] = state?.onboot;
            resourceInputs["oncreate"] = state?.oncreate;
            resourceInputs["osNetworkConfig"] = state?.osNetworkConfig;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["pool"] = state?.pool;
            resourceInputs["preprovision"] = state?.preprovision;
            resourceInputs["pxe"] = state?.pxe;
            resourceInputs["qemuOs"] = state?.qemuOs;
            resourceInputs["rebootRequired"] = state?.rebootRequired;
            resourceInputs["scsihw"] = state?.scsihw;
            resourceInputs["searchdomain"] = state?.searchdomain;
            resourceInputs["serials"] = state?.serials;
            resourceInputs["sockets"] = state?.sockets;
            resourceInputs["sshForwardIp"] = state?.sshForwardIp;
            resourceInputs["sshHost"] = state?.sshHost;
            resourceInputs["sshPort"] = state?.sshPort;
            resourceInputs["sshPrivateKey"] = state?.sshPrivateKey;
            resourceInputs["sshUser"] = state?.sshUser;
            resourceInputs["sshkeys"] = state?.sshkeys;
            resourceInputs["startup"] = state?.startup;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["storageType"] = state?.storageType;
            resourceInputs["tablet"] = state?.tablet;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["targetNode"] = state?.targetNode;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["unusedDisks"] = state?.unusedDisks;
            resourceInputs["usbs"] = state?.usbs;
            resourceInputs["vcpus"] = state?.vcpus;
            resourceInputs["vgas"] = state?.vgas;
            resourceInputs["vlan"] = state?.vlan;
            resourceInputs["vmQemuId"] = state?.vmQemuId;
            resourceInputs["vmid"] = state?.vmid;
        } else {
            const args = argsOrState as VmQemuArgs | undefined;
            if (args?.targetNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetNode'");
            }
            resourceInputs["additionalWait"] = args?.additionalWait;
            resourceInputs["agent"] = args?.agent;
            resourceInputs["args"] = args?.args;
            resourceInputs["automaticReboot"] = args?.automaticReboot;
            resourceInputs["balloon"] = args?.balloon;
            resourceInputs["bios"] = args?.bios;
            resourceInputs["boot"] = args?.boot;
            resourceInputs["bootdisk"] = args?.bootdisk;
            resourceInputs["bridge"] = args?.bridge;
            resourceInputs["ciWait"] = args?.ciWait;
            resourceInputs["cicustom"] = args?.cicustom;
            resourceInputs["cipassword"] = args?.cipassword ? pulumi.secret(args.cipassword) : undefined;
            resourceInputs["ciuser"] = args?.ciuser;
            resourceInputs["clone"] = args?.clone;
            resourceInputs["cloneWait"] = args?.cloneWait;
            resourceInputs["cloudinitCdromStorage"] = args?.cloudinitCdromStorage;
            resourceInputs["cores"] = args?.cores;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["defineConnectionInfo"] = args?.defineConnectionInfo;
            resourceInputs["desc"] = args?.desc;
            resourceInputs["diskGb"] = args?.diskGb;
            resourceInputs["disks"] = args?.disks;
            resourceInputs["forceCreate"] = args?.forceCreate;
            resourceInputs["forceRecreateOnChangeOf"] = args?.forceRecreateOnChangeOf;
            resourceInputs["fullClone"] = args?.fullClone;
            resourceInputs["guestAgentReadyTimeout"] = args?.guestAgentReadyTimeout;
            resourceInputs["hagroup"] = args?.hagroup;
            resourceInputs["hastate"] = args?.hastate;
            resourceInputs["hostpcis"] = args?.hostpcis;
            resourceInputs["hotplug"] = args?.hotplug;
            resourceInputs["ipconfig0"] = args?.ipconfig0;
            resourceInputs["ipconfig1"] = args?.ipconfig1;
            resourceInputs["ipconfig10"] = args?.ipconfig10;
            resourceInputs["ipconfig11"] = args?.ipconfig11;
            resourceInputs["ipconfig12"] = args?.ipconfig12;
            resourceInputs["ipconfig13"] = args?.ipconfig13;
            resourceInputs["ipconfig14"] = args?.ipconfig14;
            resourceInputs["ipconfig15"] = args?.ipconfig15;
            resourceInputs["ipconfig2"] = args?.ipconfig2;
            resourceInputs["ipconfig3"] = args?.ipconfig3;
            resourceInputs["ipconfig4"] = args?.ipconfig4;
            resourceInputs["ipconfig5"] = args?.ipconfig5;
            resourceInputs["ipconfig6"] = args?.ipconfig6;
            resourceInputs["ipconfig7"] = args?.ipconfig7;
            resourceInputs["ipconfig8"] = args?.ipconfig8;
            resourceInputs["ipconfig9"] = args?.ipconfig9;
            resourceInputs["iso"] = args?.iso;
            resourceInputs["kvm"] = args?.kvm;
            resourceInputs["mac"] = args?.mac;
            resourceInputs["machine"] = args?.machine;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameserver"] = args?.nameserver;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["nic"] = args?.nic;
            resourceInputs["numa"] = args?.numa;
            resourceInputs["onboot"] = args?.onboot;
            resourceInputs["oncreate"] = args?.oncreate;
            resourceInputs["osNetworkConfig"] = args?.osNetworkConfig;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["pool"] = args?.pool;
            resourceInputs["preprovision"] = args?.preprovision;
            resourceInputs["pxe"] = args?.pxe;
            resourceInputs["qemuOs"] = args?.qemuOs;
            resourceInputs["scsihw"] = args?.scsihw;
            resourceInputs["searchdomain"] = args?.searchdomain;
            resourceInputs["serials"] = args?.serials;
            resourceInputs["sockets"] = args?.sockets;
            resourceInputs["sshForwardIp"] = args?.sshForwardIp;
            resourceInputs["sshPrivateKey"] = args?.sshPrivateKey ? pulumi.secret(args.sshPrivateKey) : undefined;
            resourceInputs["sshUser"] = args?.sshUser;
            resourceInputs["sshkeys"] = args?.sshkeys;
            resourceInputs["startup"] = args?.startup;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["storageType"] = args?.storageType;
            resourceInputs["tablet"] = args?.tablet;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetNode"] = args?.targetNode;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["usbs"] = args?.usbs;
            resourceInputs["vcpus"] = args?.vcpus;
            resourceInputs["vgas"] = args?.vgas;
            resourceInputs["vlan"] = args?.vlan;
            resourceInputs["vmQemuId"] = args?.vmQemuId;
            resourceInputs["vmid"] = args?.vmid;
            resourceInputs["defaultIpv4Address"] = undefined /*out*/;
            resourceInputs["rebootRequired"] = undefined /*out*/;
            resourceInputs["sshHost"] = undefined /*out*/;
            resourceInputs["sshPort"] = undefined /*out*/;
            resourceInputs["unusedDisks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cipassword", "sshPrivateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VmQemu.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmQemu resources.
 */
export interface VmQemuState {
    additionalWait?: pulumi.Input<number>;
    agent?: pulumi.Input<number>;
    args?: pulumi.Input<string>;
    /**
     * Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
     */
    automaticReboot?: pulumi.Input<boolean>;
    balloon?: pulumi.Input<number>;
    /**
     * The VM bios, it can be seabios or ovmf
     */
    bios?: pulumi.Input<string>;
    /**
     * Boot order of the VM
     */
    boot?: pulumi.Input<string>;
    bootdisk?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    bridge?: pulumi.Input<string>;
    ciWait?: pulumi.Input<number>;
    cicustom?: pulumi.Input<string>;
    cipassword?: pulumi.Input<string>;
    ciuser?: pulumi.Input<string>;
    clone?: pulumi.Input<string>;
    cloneWait?: pulumi.Input<number>;
    cloudinitCdromStorage?: pulumi.Input<string>;
    cores?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    /**
     * Use to track vm ipv4 address
     */
    defaultIpv4Address?: pulumi.Input<string>;
    /**
     * By default define SSH for provisioner info
     */
    defineConnectionInfo?: pulumi.Input<boolean>;
    /**
     * The VM description
     */
    desc?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    diskGb?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.VmQemuDisk>[]>;
    forceCreate?: pulumi.Input<boolean>;
    forceRecreateOnChangeOf?: pulumi.Input<string>;
    fullClone?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    guestAgentReadyTimeout?: pulumi.Input<number>;
    hagroup?: pulumi.Input<string>;
    hastate?: pulumi.Input<string>;
    hostpcis?: pulumi.Input<pulumi.Input<inputs.VmQemuHostpci>[]>;
    hotplug?: pulumi.Input<string>;
    ipconfig0?: pulumi.Input<string>;
    ipconfig1?: pulumi.Input<string>;
    ipconfig10?: pulumi.Input<string>;
    ipconfig11?: pulumi.Input<string>;
    ipconfig12?: pulumi.Input<string>;
    ipconfig13?: pulumi.Input<string>;
    ipconfig14?: pulumi.Input<string>;
    ipconfig15?: pulumi.Input<string>;
    ipconfig2?: pulumi.Input<string>;
    ipconfig3?: pulumi.Input<string>;
    ipconfig4?: pulumi.Input<string>;
    ipconfig5?: pulumi.Input<string>;
    ipconfig6?: pulumi.Input<string>;
    ipconfig7?: pulumi.Input<string>;
    ipconfig8?: pulumi.Input<string>;
    ipconfig9?: pulumi.Input<string>;
    iso?: pulumi.Input<string>;
    kvm?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    mac?: pulumi.Input<string>;
    /**
     * Specifies the Qemu machine type.
     */
    machine?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    /**
     * The VM name
     */
    name?: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.VmQemuNetwork>[]>;
    /**
     * @deprecated Deprecated
     */
    nic?: pulumi.Input<string>;
    numa?: pulumi.Input<boolean>;
    /**
     * VM autostart on boot
     */
    onboot?: pulumi.Input<boolean>;
    /**
     * VM autostart on create
     */
    oncreate?: pulumi.Input<boolean>;
    osNetworkConfig?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    preprovision?: pulumi.Input<boolean>;
    pxe?: pulumi.Input<boolean>;
    qemuOs?: pulumi.Input<string>;
    /**
     * Internal variable, true if any of the modified parameters requires a reboot to take effect.
     */
    rebootRequired?: pulumi.Input<boolean>;
    scsihw?: pulumi.Input<string>;
    searchdomain?: pulumi.Input<string>;
    serials?: pulumi.Input<pulumi.Input<inputs.VmQemuSerial>[]>;
    sockets?: pulumi.Input<number>;
    /**
     * Use to pass instance ip address, redundant
     */
    sshForwardIp?: pulumi.Input<string>;
    sshHost?: pulumi.Input<string>;
    sshPort?: pulumi.Input<string>;
    sshPrivateKey?: pulumi.Input<string>;
    sshUser?: pulumi.Input<string>;
    sshkeys?: pulumi.Input<string>;
    /**
     * Startup order of the VM
     */
    startup?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    storage?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    storageType?: pulumi.Input<string>;
    /**
     * Enable tablet mode in the VM
     */
    tablet?: pulumi.Input<boolean>;
    tags?: pulumi.Input<string>;
    /**
     * The node where VM goes to
     */
    targetNode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmQemuTimeouts>;
    /**
     * Record unused disks in proxmox. This is intended to be read-only for now.
     */
    unusedDisks?: pulumi.Input<pulumi.Input<inputs.VmQemuUnusedDisk>[]>;
    usbs?: pulumi.Input<pulumi.Input<inputs.VmQemuUsb>[]>;
    vcpus?: pulumi.Input<number>;
    vgas?: pulumi.Input<pulumi.Input<inputs.VmQemuVga>[]>;
    /**
     * @deprecated Deprecated
     */
    vlan?: pulumi.Input<number>;
    vmQemuId?: pulumi.Input<string>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    vmid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VmQemu resource.
 */
export interface VmQemuArgs {
    additionalWait?: pulumi.Input<number>;
    agent?: pulumi.Input<number>;
    args?: pulumi.Input<string>;
    /**
     * Automatically reboot the VM if any of the modified parameters requires a reboot to take effect.
     */
    automaticReboot?: pulumi.Input<boolean>;
    balloon?: pulumi.Input<number>;
    /**
     * The VM bios, it can be seabios or ovmf
     */
    bios?: pulumi.Input<string>;
    /**
     * Boot order of the VM
     */
    boot?: pulumi.Input<string>;
    bootdisk?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    bridge?: pulumi.Input<string>;
    ciWait?: pulumi.Input<number>;
    cicustom?: pulumi.Input<string>;
    cipassword?: pulumi.Input<string>;
    ciuser?: pulumi.Input<string>;
    clone?: pulumi.Input<string>;
    cloneWait?: pulumi.Input<number>;
    cloudinitCdromStorage?: pulumi.Input<string>;
    cores?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    /**
     * By default define SSH for provisioner info
     */
    defineConnectionInfo?: pulumi.Input<boolean>;
    /**
     * The VM description
     */
    desc?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    diskGb?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.VmQemuDisk>[]>;
    forceCreate?: pulumi.Input<boolean>;
    forceRecreateOnChangeOf?: pulumi.Input<string>;
    fullClone?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    guestAgentReadyTimeout?: pulumi.Input<number>;
    hagroup?: pulumi.Input<string>;
    hastate?: pulumi.Input<string>;
    hostpcis?: pulumi.Input<pulumi.Input<inputs.VmQemuHostpci>[]>;
    hotplug?: pulumi.Input<string>;
    ipconfig0?: pulumi.Input<string>;
    ipconfig1?: pulumi.Input<string>;
    ipconfig10?: pulumi.Input<string>;
    ipconfig11?: pulumi.Input<string>;
    ipconfig12?: pulumi.Input<string>;
    ipconfig13?: pulumi.Input<string>;
    ipconfig14?: pulumi.Input<string>;
    ipconfig15?: pulumi.Input<string>;
    ipconfig2?: pulumi.Input<string>;
    ipconfig3?: pulumi.Input<string>;
    ipconfig4?: pulumi.Input<string>;
    ipconfig5?: pulumi.Input<string>;
    ipconfig6?: pulumi.Input<string>;
    ipconfig7?: pulumi.Input<string>;
    ipconfig8?: pulumi.Input<string>;
    ipconfig9?: pulumi.Input<string>;
    iso?: pulumi.Input<string>;
    kvm?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    mac?: pulumi.Input<string>;
    /**
     * Specifies the Qemu machine type.
     */
    machine?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    /**
     * The VM name
     */
    name?: pulumi.Input<string>;
    nameserver?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.VmQemuNetwork>[]>;
    /**
     * @deprecated Deprecated
     */
    nic?: pulumi.Input<string>;
    numa?: pulumi.Input<boolean>;
    /**
     * VM autostart on boot
     */
    onboot?: pulumi.Input<boolean>;
    /**
     * VM autostart on create
     */
    oncreate?: pulumi.Input<boolean>;
    osNetworkConfig?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    pool?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    preprovision?: pulumi.Input<boolean>;
    pxe?: pulumi.Input<boolean>;
    qemuOs?: pulumi.Input<string>;
    scsihw?: pulumi.Input<string>;
    searchdomain?: pulumi.Input<string>;
    serials?: pulumi.Input<pulumi.Input<inputs.VmQemuSerial>[]>;
    sockets?: pulumi.Input<number>;
    /**
     * Use to pass instance ip address, redundant
     */
    sshForwardIp?: pulumi.Input<string>;
    sshPrivateKey?: pulumi.Input<string>;
    sshUser?: pulumi.Input<string>;
    sshkeys?: pulumi.Input<string>;
    /**
     * Startup order of the VM
     */
    startup?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    storage?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    storageType?: pulumi.Input<string>;
    /**
     * Enable tablet mode in the VM
     */
    tablet?: pulumi.Input<boolean>;
    tags?: pulumi.Input<string>;
    /**
     * The node where VM goes to
     */
    targetNode: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmQemuTimeouts>;
    usbs?: pulumi.Input<pulumi.Input<inputs.VmQemuUsb>[]>;
    vcpus?: pulumi.Input<number>;
    vgas?: pulumi.Input<pulumi.Input<inputs.VmQemuVga>[]>;
    /**
     * @deprecated Deprecated
     */
    vlan?: pulumi.Input<number>;
    vmQemuId?: pulumi.Input<string>;
    /**
     * The VM identifier in proxmox (100-999999999)
     */
    vmid?: pulumi.Input<number>;
}
