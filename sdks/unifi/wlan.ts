// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Wlan extends pulumi.CustomResource {
    /**
     * Get an existing Wlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WlanState, opts?: pulumi.CustomResourceOptions): Wlan {
        return new Wlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/wlan:Wlan';

    /**
     * Returns true if the given object is an instance of Wlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Wlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Wlan.__pulumiType;
    }

    /**
     * IDs of the AP groups to use for this network.
     */
    declare public readonly apGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * Improves client transitions between APs when they have a weak signal. Defaults to `true`.
     */
    declare public readonly bssTransition: pulumi.Output<boolean | undefined>;
    /**
     * Enables 802.11r fast roaming. Defaults to `false`.
     */
    declare public readonly fastRoamingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether or not to hide the SSID from broadcast.
     */
    declare public readonly hideSsid: pulumi.Output<boolean | undefined>;
    /**
     * Indicates that this is a guest WLAN and should use guest behaviors.
     */
    declare public readonly isGuest: pulumi.Output<boolean | undefined>;
    /**
     * Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
     */
    declare public readonly l2Isolation: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether or not the MAC filter is turned of for the network.
     */
    declare public readonly macFilterEnabled: pulumi.Output<boolean | undefined>;
    /**
     * List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
     */
    declare public readonly macFilterLists: pulumi.Output<string[] | undefined>;
    /**
     * MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
     */
    declare public readonly macFilterPolicy: pulumi.Output<string | undefined>;
    /**
     * Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     */
    declare public readonly minimumDataRate2gKbps: pulumi.Output<number | undefined>;
    /**
     * Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     */
    declare public readonly minimumDataRate5gKbps: pulumi.Output<number | undefined>;
    /**
     * Indicates whether or not Multicast Enhance is turned of for the network.
     */
    declare public readonly multicastEnhance: pulumi.Output<boolean | undefined>;
    /**
     * The SSID of the network.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * ID of the network for this SSID
     */
    declare public readonly networkId: pulumi.Output<string | undefined>;
    /**
     * Connect high performance clients to 5 GHz only. Defaults to `true`.
     */
    declare public readonly no2ghzOui: pulumi.Output<boolean | undefined>;
    /**
     * The passphrase for the network, this is only required if `security` is not set to `open`.
     */
    declare public readonly passphrase: pulumi.Output<string | undefined>;
    /**
     * Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
     */
    declare public readonly pmfMode: pulumi.Output<string | undefined>;
    /**
     * Reduces airtime usage by allowing APs to "proxy" common broadcast frames as unicast. Defaults to `false`.
     */
    declare public readonly proxyArp: pulumi.Output<boolean | undefined>;
    /**
     * ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
     */
    declare public readonly radiusProfileId: pulumi.Output<string | undefined>;
    /**
     * Start and stop schedules for the WLAN
     */
    declare public readonly schedules: pulumi.Output<outputs.WlanSchedule[] | undefined>;
    /**
     * The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
     */
    declare public readonly security: pulumi.Output<string>;
    /**
     * The name of the site to associate the wlan with.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
     */
    declare public readonly uapsd: pulumi.Output<boolean | undefined>;
    /**
     * ID of the user group to use for this network.
     */
    declare public readonly userGroupId: pulumi.Output<string>;
    /**
     * Radio band your WiFi network will use. Defaults to `both`.
     */
    declare public readonly wlanBand: pulumi.Output<string | undefined>;
    /**
     * Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
     */
    declare public readonly wpa3Support: pulumi.Output<boolean | undefined>;
    /**
     * Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
     */
    declare public readonly wpa3Transition: pulumi.Output<boolean | undefined>;

    /**
     * Create a Wlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WlanArgs | WlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WlanState | undefined;
            resourceInputs["apGroupIds"] = state?.apGroupIds;
            resourceInputs["bssTransition"] = state?.bssTransition;
            resourceInputs["fastRoamingEnabled"] = state?.fastRoamingEnabled;
            resourceInputs["hideSsid"] = state?.hideSsid;
            resourceInputs["isGuest"] = state?.isGuest;
            resourceInputs["l2Isolation"] = state?.l2Isolation;
            resourceInputs["macFilterEnabled"] = state?.macFilterEnabled;
            resourceInputs["macFilterLists"] = state?.macFilterLists;
            resourceInputs["macFilterPolicy"] = state?.macFilterPolicy;
            resourceInputs["minimumDataRate2gKbps"] = state?.minimumDataRate2gKbps;
            resourceInputs["minimumDataRate5gKbps"] = state?.minimumDataRate5gKbps;
            resourceInputs["multicastEnhance"] = state?.multicastEnhance;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["no2ghzOui"] = state?.no2ghzOui;
            resourceInputs["passphrase"] = state?.passphrase;
            resourceInputs["pmfMode"] = state?.pmfMode;
            resourceInputs["proxyArp"] = state?.proxyArp;
            resourceInputs["radiusProfileId"] = state?.radiusProfileId;
            resourceInputs["schedules"] = state?.schedules;
            resourceInputs["security"] = state?.security;
            resourceInputs["site"] = state?.site;
            resourceInputs["uapsd"] = state?.uapsd;
            resourceInputs["userGroupId"] = state?.userGroupId;
            resourceInputs["wlanBand"] = state?.wlanBand;
            resourceInputs["wpa3Support"] = state?.wpa3Support;
            resourceInputs["wpa3Transition"] = state?.wpa3Transition;
        } else {
            const args = argsOrState as WlanArgs | undefined;
            if (args?.security === undefined && !opts.urn) {
                throw new Error("Missing required property 'security'");
            }
            if (args?.userGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userGroupId'");
            }
            resourceInputs["apGroupIds"] = args?.apGroupIds;
            resourceInputs["bssTransition"] = args?.bssTransition;
            resourceInputs["fastRoamingEnabled"] = args?.fastRoamingEnabled;
            resourceInputs["hideSsid"] = args?.hideSsid;
            resourceInputs["isGuest"] = args?.isGuest;
            resourceInputs["l2Isolation"] = args?.l2Isolation;
            resourceInputs["macFilterEnabled"] = args?.macFilterEnabled;
            resourceInputs["macFilterLists"] = args?.macFilterLists;
            resourceInputs["macFilterPolicy"] = args?.macFilterPolicy;
            resourceInputs["minimumDataRate2gKbps"] = args?.minimumDataRate2gKbps;
            resourceInputs["minimumDataRate5gKbps"] = args?.minimumDataRate5gKbps;
            resourceInputs["multicastEnhance"] = args?.multicastEnhance;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["no2ghzOui"] = args?.no2ghzOui;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["pmfMode"] = args?.pmfMode;
            resourceInputs["proxyArp"] = args?.proxyArp;
            resourceInputs["radiusProfileId"] = args?.radiusProfileId;
            resourceInputs["schedules"] = args?.schedules;
            resourceInputs["security"] = args?.security;
            resourceInputs["site"] = args?.site;
            resourceInputs["uapsd"] = args?.uapsd;
            resourceInputs["userGroupId"] = args?.userGroupId;
            resourceInputs["wlanBand"] = args?.wlanBand;
            resourceInputs["wpa3Support"] = args?.wpa3Support;
            resourceInputs["wpa3Transition"] = args?.wpa3Transition;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Wlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Wlan resources.
 */
export interface WlanState {
    /**
     * IDs of the AP groups to use for this network.
     */
    apGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Improves client transitions between APs when they have a weak signal. Defaults to `true`.
     */
    bssTransition?: pulumi.Input<boolean>;
    /**
     * Enables 802.11r fast roaming. Defaults to `false`.
     */
    fastRoamingEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not to hide the SSID from broadcast.
     */
    hideSsid?: pulumi.Input<boolean>;
    /**
     * Indicates that this is a guest WLAN and should use guest behaviors.
     */
    isGuest?: pulumi.Input<boolean>;
    /**
     * Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
     */
    l2Isolation?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not the MAC filter is turned of for the network.
     */
    macFilterEnabled?: pulumi.Input<boolean>;
    /**
     * List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
     */
    macFilterLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
     */
    macFilterPolicy?: pulumi.Input<string>;
    /**
     * Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     */
    minimumDataRate2gKbps?: pulumi.Input<number>;
    /**
     * Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     */
    minimumDataRate5gKbps?: pulumi.Input<number>;
    /**
     * Indicates whether or not Multicast Enhance is turned of for the network.
     */
    multicastEnhance?: pulumi.Input<boolean>;
    /**
     * The SSID of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the network for this SSID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Connect high performance clients to 5 GHz only. Defaults to `true`.
     */
    no2ghzOui?: pulumi.Input<boolean>;
    /**
     * The passphrase for the network, this is only required if `security` is not set to `open`.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
     */
    pmfMode?: pulumi.Input<string>;
    /**
     * Reduces airtime usage by allowing APs to "proxy" common broadcast frames as unicast. Defaults to `false`.
     */
    proxyArp?: pulumi.Input<boolean>;
    /**
     * ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
     */
    radiusProfileId?: pulumi.Input<string>;
    /**
     * Start and stop schedules for the WLAN
     */
    schedules?: pulumi.Input<pulumi.Input<inputs.WlanSchedule>[]>;
    /**
     * The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
     */
    security?: pulumi.Input<string>;
    /**
     * The name of the site to associate the wlan with.
     */
    site?: pulumi.Input<string>;
    /**
     * Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
     */
    uapsd?: pulumi.Input<boolean>;
    /**
     * ID of the user group to use for this network.
     */
    userGroupId?: pulumi.Input<string>;
    /**
     * Radio band your WiFi network will use. Defaults to `both`.
     */
    wlanBand?: pulumi.Input<string>;
    /**
     * Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
     */
    wpa3Support?: pulumi.Input<boolean>;
    /**
     * Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
     */
    wpa3Transition?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Wlan resource.
 */
export interface WlanArgs {
    /**
     * IDs of the AP groups to use for this network.
     */
    apGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Improves client transitions between APs when they have a weak signal. Defaults to `true`.
     */
    bssTransition?: pulumi.Input<boolean>;
    /**
     * Enables 802.11r fast roaming. Defaults to `false`.
     */
    fastRoamingEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not to hide the SSID from broadcast.
     */
    hideSsid?: pulumi.Input<boolean>;
    /**
     * Indicates that this is a guest WLAN and should use guest behaviors.
     */
    isGuest?: pulumi.Input<boolean>;
    /**
     * Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
     */
    l2Isolation?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not the MAC filter is turned of for the network.
     */
    macFilterEnabled?: pulumi.Input<boolean>;
    /**
     * List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
     */
    macFilterLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
     */
    macFilterPolicy?: pulumi.Input<string>;
    /**
     * Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     */
    minimumDataRate2gKbps?: pulumi.Input<number>;
    /**
     * Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     */
    minimumDataRate5gKbps?: pulumi.Input<number>;
    /**
     * Indicates whether or not Multicast Enhance is turned of for the network.
     */
    multicastEnhance?: pulumi.Input<boolean>;
    /**
     * The SSID of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the network for this SSID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Connect high performance clients to 5 GHz only. Defaults to `true`.
     */
    no2ghzOui?: pulumi.Input<boolean>;
    /**
     * The passphrase for the network, this is only required if `security` is not set to `open`.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
     */
    pmfMode?: pulumi.Input<string>;
    /**
     * Reduces airtime usage by allowing APs to "proxy" common broadcast frames as unicast. Defaults to `false`.
     */
    proxyArp?: pulumi.Input<boolean>;
    /**
     * ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
     */
    radiusProfileId?: pulumi.Input<string>;
    /**
     * Start and stop schedules for the WLAN
     */
    schedules?: pulumi.Input<pulumi.Input<inputs.WlanSchedule>[]>;
    /**
     * The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
     */
    security: pulumi.Input<string>;
    /**
     * The name of the site to associate the wlan with.
     */
    site?: pulumi.Input<string>;
    /**
     * Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
     */
    uapsd?: pulumi.Input<boolean>;
    /**
     * ID of the user group to use for this network.
     */
    userGroupId: pulumi.Input<string>;
    /**
     * Radio band your WiFi network will use. Defaults to `both`.
     */
    wlanBand?: pulumi.Input<string>;
    /**
     * Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
     */
    wpa3Support?: pulumi.Input<boolean>;
    /**
     * Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
     */
    wpa3Transition?: pulumi.Input<boolean>;
}
