// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DynamicDns extends pulumi.CustomResource {
    /**
     * Get an existing DynamicDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicDnsState, opts?: pulumi.CustomResourceOptions): DynamicDns {
        return new DynamicDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/dynamicDns:DynamicDns';

    /**
     * Returns true if the given object is an instance of DynamicDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynamicDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynamicDns.__pulumiType;
    }

    /**
     * The fully qualified domain name to update with your current public IP address (e.g., 'myhouse.dyndns.org' or 'myoffice.no-ip.com').
     */
    declare public readonly hostName: pulumi.Output<string>;
    /**
     * The WAN interface to use for the dynamic DNS updates. Valid values are:
     *   * `wan` - Primary WAN interface (default)
     *   * `wan2` - Secondary WAN interface Defaults to `wan`.
     */
    declare public readonly interface: pulumi.Output<string | undefined>;
    /**
     * The username or login for your DDNS provider account.
     */
    declare public readonly login: pulumi.Output<string | undefined>;
    /**
     * The password or token for your DDNS provider account. This value will be stored securely and not displayed in logs.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The update server hostname for your DDNS provider. Usually not required as the UniFi controller knows the correct servers for common providers.
     */
    declare public readonly server: pulumi.Output<string | undefined>;
    /**
     * The Dynamic DNS service provider. Common values include:
     *   * `dyndns` - DynDNS service
     *   * `noip` - No-IP service
     *   * `duckdns` - Duck DNS service
     * Check your UniFi controller for the complete list of supported providers.
     */
    declare public readonly service: pulumi.Output<string>;
    /**
     * The name of the UniFi site where the dynamic DNS configuration should be created. If not specified, the default site will be used.
     */
    declare public readonly site: pulumi.Output<string>;

    /**
     * Create a DynamicDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynamicDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicDnsArgs | DynamicDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicDnsState | undefined;
            resourceInputs["hostName"] = state?.hostName;
            resourceInputs["interface"] = state?.interface;
            resourceInputs["login"] = state?.login;
            resourceInputs["password"] = state?.password;
            resourceInputs["server"] = state?.server;
            resourceInputs["service"] = state?.service;
            resourceInputs["site"] = state?.site;
        } else {
            const args = argsOrState as DynamicDnsArgs | undefined;
            if (args?.hostName === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if (args?.service === undefined && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["hostName"] = args?.hostName;
            resourceInputs["interface"] = args?.interface;
            resourceInputs["login"] = args?.login;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["server"] = args?.server;
            resourceInputs["service"] = args?.service;
            resourceInputs["site"] = args?.site;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DynamicDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DynamicDns resources.
 */
export interface DynamicDnsState {
    /**
     * The fully qualified domain name to update with your current public IP address (e.g., 'myhouse.dyndns.org' or 'myoffice.no-ip.com').
     */
    hostName?: pulumi.Input<string>;
    /**
     * The WAN interface to use for the dynamic DNS updates. Valid values are:
     *   * `wan` - Primary WAN interface (default)
     *   * `wan2` - Secondary WAN interface Defaults to `wan`.
     */
    interface?: pulumi.Input<string>;
    /**
     * The username or login for your DDNS provider account.
     */
    login?: pulumi.Input<string>;
    /**
     * The password or token for your DDNS provider account. This value will be stored securely and not displayed in logs.
     */
    password?: pulumi.Input<string>;
    /**
     * The update server hostname for your DDNS provider. Usually not required as the UniFi controller knows the correct servers for common providers.
     */
    server?: pulumi.Input<string>;
    /**
     * The Dynamic DNS service provider. Common values include:
     *   * `dyndns` - DynDNS service
     *   * `noip` - No-IP service
     *   * `duckdns` - Duck DNS service
     * Check your UniFi controller for the complete list of supported providers.
     */
    service?: pulumi.Input<string>;
    /**
     * The name of the UniFi site where the dynamic DNS configuration should be created. If not specified, the default site will be used.
     */
    site?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynamicDns resource.
 */
export interface DynamicDnsArgs {
    /**
     * The fully qualified domain name to update with your current public IP address (e.g., 'myhouse.dyndns.org' or 'myoffice.no-ip.com').
     */
    hostName: pulumi.Input<string>;
    /**
     * The WAN interface to use for the dynamic DNS updates. Valid values are:
     *   * `wan` - Primary WAN interface (default)
     *   * `wan2` - Secondary WAN interface Defaults to `wan`.
     */
    interface?: pulumi.Input<string>;
    /**
     * The username or login for your DDNS provider account.
     */
    login?: pulumi.Input<string>;
    /**
     * The password or token for your DDNS provider account. This value will be stored securely and not displayed in logs.
     */
    password?: pulumi.Input<string>;
    /**
     * The update server hostname for your DDNS provider. Usually not required as the UniFi controller knows the correct servers for common providers.
     */
    server?: pulumi.Input<string>;
    /**
     * The Dynamic DNS service provider. Common values include:
     *   * `dyndns` - DynDNS service
     *   * `noip` - No-IP service
     *   * `duckdns` - Duck DNS service
     * Check your UniFi controller for the complete list of supported providers.
     */
    service: pulumi.Input<string>;
    /**
     * The name of the UniFi site where the dynamic DNS configuration should be created. If not specified, the default site will be used.
     */
    site?: pulumi.Input<string>;
}
