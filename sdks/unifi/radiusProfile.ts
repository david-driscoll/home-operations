// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RadiusProfile extends pulumi.CustomResource {
    /**
     * Get an existing RadiusProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RadiusProfileState, opts?: pulumi.CustomResourceOptions): RadiusProfile {
        return new RadiusProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/radiusProfile:RadiusProfile';

    /**
     * Returns true if the given object is an instance of RadiusProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RadiusProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RadiusProfile.__pulumiType;
    }

    /**
     * Enable RADIUS accounting to track user sessions, including login/logout times and data usage. Useful for billing and audit purposes. Defaults to `false`.
     */
    declare public readonly accountingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * List of RADIUS accounting servers to use with this profile. Accounting servers track session data like connection time and data usage. Each server requires:
     *   * IP address of the RADIUS server
     *   * Port number (default: 1813)
     *   * Shared secret for secure communication
     */
    declare public readonly acctServers: pulumi.Output<outputs.RadiusProfileAcctServer[] | undefined>;
    /**
     * List of RADIUS authentication servers to use with this profile. Multiple servers provide failover - if the first server is unreachable, the system will try the next server in the list. Each server requires:
     *   * IP address of the RADIUS server
     *   * Shared secret for secure communication
     */
    declare public readonly authServers: pulumi.Output<outputs.RadiusProfileAuthServer[] | undefined>;
    /**
     * Enable periodic updates during active sessions. This allows tracking of ongoing session data like bandwidth usage. Defaults to `false`.
     */
    declare public readonly interimUpdateEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The interval (in seconds) between interim updates when `interim_update_enabled` is true. Default is 3600 seconds (1 hour). Defaults to `3600`.
     */
    declare public readonly interimUpdateInterval: pulumi.Output<number | undefined>;
    /**
     * A friendly name for the RADIUS profile to help identify its purpose (e.g., 'Corporate Users' or 'Guest Access').
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the UniFi site where the RADIUS profile should be created. If not specified, the default site will be used.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * Use the controller as a RADIUS accounting server. This allows local accounting without an external RADIUS server. Defaults to `false`.
     */
    declare public readonly useUsgAcctServer: pulumi.Output<boolean | undefined>;
    /**
     * Use the controller as a RADIUS authentication server. This allows local authentication without an external RADIUS server. Defaults to `false`.
     */
    declare public readonly useUsgAuthServer: pulumi.Output<boolean | undefined>;
    /**
     * Enable VLAN assignment for wired clients based on RADIUS attributes. This allows network segmentation based on user authentication. Defaults to `false`.
     */
    declare public readonly vlanEnabled: pulumi.Output<boolean | undefined>;
    /**
     * VLAN assignment mode for wireless networks. Valid values are:
     *   * `disabled` - Do not use RADIUS-assigned VLANs
     *   * `optional` - Use RADIUS-assigned VLAN if provided
     *   * `required` - Require RADIUS-assigned VLAN for authentication to succeed Defaults to ``.
     */
    declare public readonly vlanWlanMode: pulumi.Output<string | undefined>;

    /**
     * Create a RadiusProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RadiusProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RadiusProfileArgs | RadiusProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RadiusProfileState | undefined;
            resourceInputs["accountingEnabled"] = state?.accountingEnabled;
            resourceInputs["acctServers"] = state?.acctServers;
            resourceInputs["authServers"] = state?.authServers;
            resourceInputs["interimUpdateEnabled"] = state?.interimUpdateEnabled;
            resourceInputs["interimUpdateInterval"] = state?.interimUpdateInterval;
            resourceInputs["name"] = state?.name;
            resourceInputs["site"] = state?.site;
            resourceInputs["useUsgAcctServer"] = state?.useUsgAcctServer;
            resourceInputs["useUsgAuthServer"] = state?.useUsgAuthServer;
            resourceInputs["vlanEnabled"] = state?.vlanEnabled;
            resourceInputs["vlanWlanMode"] = state?.vlanWlanMode;
        } else {
            const args = argsOrState as RadiusProfileArgs | undefined;
            resourceInputs["accountingEnabled"] = args?.accountingEnabled;
            resourceInputs["acctServers"] = args?.acctServers;
            resourceInputs["authServers"] = args?.authServers;
            resourceInputs["interimUpdateEnabled"] = args?.interimUpdateEnabled;
            resourceInputs["interimUpdateInterval"] = args?.interimUpdateInterval;
            resourceInputs["name"] = args?.name;
            resourceInputs["site"] = args?.site;
            resourceInputs["useUsgAcctServer"] = args?.useUsgAcctServer;
            resourceInputs["useUsgAuthServer"] = args?.useUsgAuthServer;
            resourceInputs["vlanEnabled"] = args?.vlanEnabled;
            resourceInputs["vlanWlanMode"] = args?.vlanWlanMode;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RadiusProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RadiusProfile resources.
 */
export interface RadiusProfileState {
    /**
     * Enable RADIUS accounting to track user sessions, including login/logout times and data usage. Useful for billing and audit purposes. Defaults to `false`.
     */
    accountingEnabled?: pulumi.Input<boolean>;
    /**
     * List of RADIUS accounting servers to use with this profile. Accounting servers track session data like connection time and data usage. Each server requires:
     *   * IP address of the RADIUS server
     *   * Port number (default: 1813)
     *   * Shared secret for secure communication
     */
    acctServers?: pulumi.Input<pulumi.Input<inputs.RadiusProfileAcctServer>[]>;
    /**
     * List of RADIUS authentication servers to use with this profile. Multiple servers provide failover - if the first server is unreachable, the system will try the next server in the list. Each server requires:
     *   * IP address of the RADIUS server
     *   * Shared secret for secure communication
     */
    authServers?: pulumi.Input<pulumi.Input<inputs.RadiusProfileAuthServer>[]>;
    /**
     * Enable periodic updates during active sessions. This allows tracking of ongoing session data like bandwidth usage. Defaults to `false`.
     */
    interimUpdateEnabled?: pulumi.Input<boolean>;
    /**
     * The interval (in seconds) between interim updates when `interim_update_enabled` is true. Default is 3600 seconds (1 hour). Defaults to `3600`.
     */
    interimUpdateInterval?: pulumi.Input<number>;
    /**
     * A friendly name for the RADIUS profile to help identify its purpose (e.g., 'Corporate Users' or 'Guest Access').
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the UniFi site where the RADIUS profile should be created. If not specified, the default site will be used.
     */
    site?: pulumi.Input<string>;
    /**
     * Use the controller as a RADIUS accounting server. This allows local accounting without an external RADIUS server. Defaults to `false`.
     */
    useUsgAcctServer?: pulumi.Input<boolean>;
    /**
     * Use the controller as a RADIUS authentication server. This allows local authentication without an external RADIUS server. Defaults to `false`.
     */
    useUsgAuthServer?: pulumi.Input<boolean>;
    /**
     * Enable VLAN assignment for wired clients based on RADIUS attributes. This allows network segmentation based on user authentication. Defaults to `false`.
     */
    vlanEnabled?: pulumi.Input<boolean>;
    /**
     * VLAN assignment mode for wireless networks. Valid values are:
     *   * `disabled` - Do not use RADIUS-assigned VLANs
     *   * `optional` - Use RADIUS-assigned VLAN if provided
     *   * `required` - Require RADIUS-assigned VLAN for authentication to succeed Defaults to ``.
     */
    vlanWlanMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RadiusProfile resource.
 */
export interface RadiusProfileArgs {
    /**
     * Enable RADIUS accounting to track user sessions, including login/logout times and data usage. Useful for billing and audit purposes. Defaults to `false`.
     */
    accountingEnabled?: pulumi.Input<boolean>;
    /**
     * List of RADIUS accounting servers to use with this profile. Accounting servers track session data like connection time and data usage. Each server requires:
     *   * IP address of the RADIUS server
     *   * Port number (default: 1813)
     *   * Shared secret for secure communication
     */
    acctServers?: pulumi.Input<pulumi.Input<inputs.RadiusProfileAcctServer>[]>;
    /**
     * List of RADIUS authentication servers to use with this profile. Multiple servers provide failover - if the first server is unreachable, the system will try the next server in the list. Each server requires:
     *   * IP address of the RADIUS server
     *   * Shared secret for secure communication
     */
    authServers?: pulumi.Input<pulumi.Input<inputs.RadiusProfileAuthServer>[]>;
    /**
     * Enable periodic updates during active sessions. This allows tracking of ongoing session data like bandwidth usage. Defaults to `false`.
     */
    interimUpdateEnabled?: pulumi.Input<boolean>;
    /**
     * The interval (in seconds) between interim updates when `interim_update_enabled` is true. Default is 3600 seconds (1 hour). Defaults to `3600`.
     */
    interimUpdateInterval?: pulumi.Input<number>;
    /**
     * A friendly name for the RADIUS profile to help identify its purpose (e.g., 'Corporate Users' or 'Guest Access').
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the UniFi site where the RADIUS profile should be created. If not specified, the default site will be used.
     */
    site?: pulumi.Input<string>;
    /**
     * Use the controller as a RADIUS accounting server. This allows local accounting without an external RADIUS server. Defaults to `false`.
     */
    useUsgAcctServer?: pulumi.Input<boolean>;
    /**
     * Use the controller as a RADIUS authentication server. This allows local authentication without an external RADIUS server. Defaults to `false`.
     */
    useUsgAuthServer?: pulumi.Input<boolean>;
    /**
     * Enable VLAN assignment for wired clients based on RADIUS attributes. This allows network segmentation based on user authentication. Defaults to `false`.
     */
    vlanEnabled?: pulumi.Input<boolean>;
    /**
     * VLAN assignment mode for wireless networks. Valid values are:
     *   * `disabled` - Do not use RADIUS-assigned VLANs
     *   * `optional` - Use RADIUS-assigned VLAN if provided
     *   * `required` - Require RADIUS-assigned VLAN for authentication to succeed Defaults to ``.
     */
    vlanWlanMode?: pulumi.Input<string>;
}
