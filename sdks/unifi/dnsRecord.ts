// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * Whether the DNS record is enabled. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The key of the DNS record.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The port of the DNS record.
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The priority of the DNS record.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    /**
     * The type of the DNS record.
     */
    declare public readonly recordType: pulumi.Output<string | undefined>;
    /**
     * The name of the site to associate the DNS record with.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * The TTL of the DNS record.
     */
    declare public readonly ttl: pulumi.Output<number | undefined>;
    /**
     * The value of the DNS record.
     */
    declare public readonly value: pulumi.Output<string>;
    /**
     * The weight of the DNS record.
     */
    declare public readonly weight: pulumi.Output<number | undefined>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["port"] = state?.port;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["recordType"] = state?.recordType;
            resourceInputs["site"] = state?.site;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["value"] = state?.value;
            resourceInputs["weight"] = state?.weight;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if (args?.port === undefined && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["port"] = args?.port;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["recordType"] = args?.recordType;
            resourceInputs["site"] = args?.site;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["value"] = args?.value;
            resourceInputs["weight"] = args?.weight;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * Whether the DNS record is enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The key of the DNS record.
     */
    name?: pulumi.Input<string>;
    /**
     * The port of the DNS record.
     */
    port?: pulumi.Input<number>;
    /**
     * The priority of the DNS record.
     */
    priority?: pulumi.Input<number>;
    /**
     * The type of the DNS record.
     */
    recordType?: pulumi.Input<string>;
    /**
     * The name of the site to associate the DNS record with.
     */
    site?: pulumi.Input<string>;
    /**
     * The TTL of the DNS record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The value of the DNS record.
     */
    value?: pulumi.Input<string>;
    /**
     * The weight of the DNS record.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * Whether the DNS record is enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The key of the DNS record.
     */
    name?: pulumi.Input<string>;
    /**
     * The port of the DNS record.
     */
    port: pulumi.Input<number>;
    /**
     * The priority of the DNS record.
     */
    priority?: pulumi.Input<number>;
    /**
     * The type of the DNS record.
     */
    recordType?: pulumi.Input<string>;
    /**
     * The name of the site to associate the DNS record with.
     */
    site?: pulumi.Input<string>;
    /**
     * The TTL of the DNS record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The value of the DNS record.
     */
    value: pulumi.Input<string>;
    /**
     * The weight of the DNS record.
     */
    weight?: pulumi.Input<number>;
}
