// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule {
        return new FirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/firewallRule:FirewallRule';

    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }

    /**
     * The action of the firewall rule. Must be one of `drop`, `accept`, or `reject`.
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * The destination address of the firewall rule.
     */
    declare public readonly dstAddress: pulumi.Output<string | undefined>;
    /**
     * The IPv6 destination address of the firewall rule.
     */
    declare public readonly dstAddressIpv6: pulumi.Output<string | undefined>;
    /**
     * The destination firewall group IDs of the firewall rule.
     */
    declare public readonly dstFirewallGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * The destination network ID of the firewall rule.
     */
    declare public readonly dstNetworkId: pulumi.Output<string | undefined>;
    /**
     * The destination network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.
     */
    declare public readonly dstNetworkType: pulumi.Output<string | undefined>;
    /**
     * The destination port of the firewall rule.
     */
    declare public readonly dstPort: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the rule should be enabled. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * ICMP type name.
     */
    declare public readonly icmpTypename: pulumi.Output<string | undefined>;
    /**
     * ICMPv6 type name.
     */
    declare public readonly icmpV6Typename: pulumi.Output<string | undefined>;
    /**
     * Specify whether the rule matches on IPsec packets. Can be one of `match-ipset` or `match-none`.
     */
    declare public readonly ipSec: pulumi.Output<string | undefined>;
    /**
     * Enable logging for the firewall rule.
     */
    declare public readonly logging: pulumi.Output<boolean | undefined>;
    /**
     * The name of the firewall rule.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The protocol of the rule.
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * The IPv6 protocol of the rule.
     */
    declare public readonly protocolV6: pulumi.Output<string | undefined>;
    /**
     * The index of the rule. Must be >= 2000 < 3000 or >= 4000 < 5000.
     */
    declare public readonly ruleIndex: pulumi.Output<number>;
    /**
     * The ruleset for the rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `WAN_LOCAL`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.
     */
    declare public readonly ruleset: pulumi.Output<string>;
    /**
     * The name of the site to associate the firewall rule with.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * The source address for the firewall rule.
     */
    declare public readonly srcAddress: pulumi.Output<string | undefined>;
    /**
     * The IPv6 source address for the firewall rule.
     */
    declare public readonly srcAddressIpv6: pulumi.Output<string | undefined>;
    /**
     * The source firewall group IDs for the firewall rule.
     */
    declare public readonly srcFirewallGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * The source MAC address of the firewall rule.
     */
    declare public readonly srcMac: pulumi.Output<string | undefined>;
    /**
     * The source network ID for the firewall rule.
     */
    declare public readonly srcNetworkId: pulumi.Output<string | undefined>;
    /**
     * The source network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.
     */
    declare public readonly srcNetworkType: pulumi.Output<string | undefined>;
    /**
     * The source port of the firewall rule.
     */
    declare public readonly srcPort: pulumi.Output<string | undefined>;
    /**
     * Match where the state is established.
     */
    declare public readonly stateEstablished: pulumi.Output<boolean | undefined>;
    /**
     * Match where the state is invalid.
     */
    declare public readonly stateInvalid: pulumi.Output<boolean | undefined>;
    /**
     * Match where the state is new.
     */
    declare public readonly stateNew: pulumi.Output<boolean | undefined>;
    /**
     * Match where the state is related.
     */
    declare public readonly stateRelated: pulumi.Output<boolean | undefined>;

    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallRuleArgs | FirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallRuleState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["dstAddress"] = state?.dstAddress;
            resourceInputs["dstAddressIpv6"] = state?.dstAddressIpv6;
            resourceInputs["dstFirewallGroupIds"] = state?.dstFirewallGroupIds;
            resourceInputs["dstNetworkId"] = state?.dstNetworkId;
            resourceInputs["dstNetworkType"] = state?.dstNetworkType;
            resourceInputs["dstPort"] = state?.dstPort;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["icmpTypename"] = state?.icmpTypename;
            resourceInputs["icmpV6Typename"] = state?.icmpV6Typename;
            resourceInputs["ipSec"] = state?.ipSec;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolV6"] = state?.protocolV6;
            resourceInputs["ruleIndex"] = state?.ruleIndex;
            resourceInputs["ruleset"] = state?.ruleset;
            resourceInputs["site"] = state?.site;
            resourceInputs["srcAddress"] = state?.srcAddress;
            resourceInputs["srcAddressIpv6"] = state?.srcAddressIpv6;
            resourceInputs["srcFirewallGroupIds"] = state?.srcFirewallGroupIds;
            resourceInputs["srcMac"] = state?.srcMac;
            resourceInputs["srcNetworkId"] = state?.srcNetworkId;
            resourceInputs["srcNetworkType"] = state?.srcNetworkType;
            resourceInputs["srcPort"] = state?.srcPort;
            resourceInputs["stateEstablished"] = state?.stateEstablished;
            resourceInputs["stateInvalid"] = state?.stateInvalid;
            resourceInputs["stateNew"] = state?.stateNew;
            resourceInputs["stateRelated"] = state?.stateRelated;
        } else {
            const args = argsOrState as FirewallRuleArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.ruleIndex === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleIndex'");
            }
            if (args?.ruleset === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleset'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["dstAddress"] = args?.dstAddress;
            resourceInputs["dstAddressIpv6"] = args?.dstAddressIpv6;
            resourceInputs["dstFirewallGroupIds"] = args?.dstFirewallGroupIds;
            resourceInputs["dstNetworkId"] = args?.dstNetworkId;
            resourceInputs["dstNetworkType"] = args?.dstNetworkType;
            resourceInputs["dstPort"] = args?.dstPort;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["icmpTypename"] = args?.icmpTypename;
            resourceInputs["icmpV6Typename"] = args?.icmpV6Typename;
            resourceInputs["ipSec"] = args?.ipSec;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolV6"] = args?.protocolV6;
            resourceInputs["ruleIndex"] = args?.ruleIndex;
            resourceInputs["ruleset"] = args?.ruleset;
            resourceInputs["site"] = args?.site;
            resourceInputs["srcAddress"] = args?.srcAddress;
            resourceInputs["srcAddressIpv6"] = args?.srcAddressIpv6;
            resourceInputs["srcFirewallGroupIds"] = args?.srcFirewallGroupIds;
            resourceInputs["srcMac"] = args?.srcMac;
            resourceInputs["srcNetworkId"] = args?.srcNetworkId;
            resourceInputs["srcNetworkType"] = args?.srcNetworkType;
            resourceInputs["srcPort"] = args?.srcPort;
            resourceInputs["stateEstablished"] = args?.stateEstablished;
            resourceInputs["stateInvalid"] = args?.stateInvalid;
            resourceInputs["stateNew"] = args?.stateNew;
            resourceInputs["stateRelated"] = args?.stateRelated;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * The action of the firewall rule. Must be one of `drop`, `accept`, or `reject`.
     */
    action?: pulumi.Input<string>;
    /**
     * The destination address of the firewall rule.
     */
    dstAddress?: pulumi.Input<string>;
    /**
     * The IPv6 destination address of the firewall rule.
     */
    dstAddressIpv6?: pulumi.Input<string>;
    /**
     * The destination firewall group IDs of the firewall rule.
     */
    dstFirewallGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination network ID of the firewall rule.
     */
    dstNetworkId?: pulumi.Input<string>;
    /**
     * The destination network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.
     */
    dstNetworkType?: pulumi.Input<string>;
    /**
     * The destination port of the firewall rule.
     */
    dstPort?: pulumi.Input<string>;
    /**
     * Specifies whether the rule should be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ICMP type name.
     */
    icmpTypename?: pulumi.Input<string>;
    /**
     * ICMPv6 type name.
     */
    icmpV6Typename?: pulumi.Input<string>;
    /**
     * Specify whether the rule matches on IPsec packets. Can be one of `match-ipset` or `match-none`.
     */
    ipSec?: pulumi.Input<string>;
    /**
     * Enable logging for the firewall rule.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * The name of the firewall rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol of the rule.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The IPv6 protocol of the rule.
     */
    protocolV6?: pulumi.Input<string>;
    /**
     * The index of the rule. Must be >= 2000 < 3000 or >= 4000 < 5000.
     */
    ruleIndex?: pulumi.Input<number>;
    /**
     * The ruleset for the rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `WAN_LOCAL`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.
     */
    ruleset?: pulumi.Input<string>;
    /**
     * The name of the site to associate the firewall rule with.
     */
    site?: pulumi.Input<string>;
    /**
     * The source address for the firewall rule.
     */
    srcAddress?: pulumi.Input<string>;
    /**
     * The IPv6 source address for the firewall rule.
     */
    srcAddressIpv6?: pulumi.Input<string>;
    /**
     * The source firewall group IDs for the firewall rule.
     */
    srcFirewallGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source MAC address of the firewall rule.
     */
    srcMac?: pulumi.Input<string>;
    /**
     * The source network ID for the firewall rule.
     */
    srcNetworkId?: pulumi.Input<string>;
    /**
     * The source network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.
     */
    srcNetworkType?: pulumi.Input<string>;
    /**
     * The source port of the firewall rule.
     */
    srcPort?: pulumi.Input<string>;
    /**
     * Match where the state is established.
     */
    stateEstablished?: pulumi.Input<boolean>;
    /**
     * Match where the state is invalid.
     */
    stateInvalid?: pulumi.Input<boolean>;
    /**
     * Match where the state is new.
     */
    stateNew?: pulumi.Input<boolean>;
    /**
     * Match where the state is related.
     */
    stateRelated?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * The action of the firewall rule. Must be one of `drop`, `accept`, or `reject`.
     */
    action: pulumi.Input<string>;
    /**
     * The destination address of the firewall rule.
     */
    dstAddress?: pulumi.Input<string>;
    /**
     * The IPv6 destination address of the firewall rule.
     */
    dstAddressIpv6?: pulumi.Input<string>;
    /**
     * The destination firewall group IDs of the firewall rule.
     */
    dstFirewallGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination network ID of the firewall rule.
     */
    dstNetworkId?: pulumi.Input<string>;
    /**
     * The destination network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.
     */
    dstNetworkType?: pulumi.Input<string>;
    /**
     * The destination port of the firewall rule.
     */
    dstPort?: pulumi.Input<string>;
    /**
     * Specifies whether the rule should be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ICMP type name.
     */
    icmpTypename?: pulumi.Input<string>;
    /**
     * ICMPv6 type name.
     */
    icmpV6Typename?: pulumi.Input<string>;
    /**
     * Specify whether the rule matches on IPsec packets. Can be one of `match-ipset` or `match-none`.
     */
    ipSec?: pulumi.Input<string>;
    /**
     * Enable logging for the firewall rule.
     */
    logging?: pulumi.Input<boolean>;
    /**
     * The name of the firewall rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol of the rule.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The IPv6 protocol of the rule.
     */
    protocolV6?: pulumi.Input<string>;
    /**
     * The index of the rule. Must be >= 2000 < 3000 or >= 4000 < 5000.
     */
    ruleIndex: pulumi.Input<number>;
    /**
     * The ruleset for the rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `WAN_LOCAL`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.
     */
    ruleset: pulumi.Input<string>;
    /**
     * The name of the site to associate the firewall rule with.
     */
    site?: pulumi.Input<string>;
    /**
     * The source address for the firewall rule.
     */
    srcAddress?: pulumi.Input<string>;
    /**
     * The IPv6 source address for the firewall rule.
     */
    srcAddressIpv6?: pulumi.Input<string>;
    /**
     * The source firewall group IDs for the firewall rule.
     */
    srcFirewallGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source MAC address of the firewall rule.
     */
    srcMac?: pulumi.Input<string>;
    /**
     * The source network ID for the firewall rule.
     */
    srcNetworkId?: pulumi.Input<string>;
    /**
     * The source network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.
     */
    srcNetworkType?: pulumi.Input<string>;
    /**
     * The source port of the firewall rule.
     */
    srcPort?: pulumi.Input<string>;
    /**
     * Match where the state is established.
     */
    stateEstablished?: pulumi.Input<boolean>;
    /**
     * Match where the state is invalid.
     */
    stateInvalid?: pulumi.Input<boolean>;
    /**
     * Match where the state is new.
     */
    stateNew?: pulumi.Input<boolean>;
    /**
     * Match where the state is related.
     */
    stateRelated?: pulumi.Input<boolean>;
}
