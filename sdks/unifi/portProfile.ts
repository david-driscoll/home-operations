// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PortProfile extends pulumi.CustomResource {
    /**
     * Get an existing PortProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortProfileState, opts?: pulumi.CustomResourceOptions): PortProfile {
        return new PortProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/portProfile:PortProfile';

    /**
     * Returns true if the given object is an instance of PortProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PortProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortProfile.__pulumiType;
    }

    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     */
    declare public readonly autoneg: pulumi.Output<boolean | undefined>;
    /**
     * The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
     */
    declare public readonly dot1xCtrl: pulumi.Output<string | undefined>;
    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     */
    declare public readonly dot1xIdleTimeout: pulumi.Output<number | undefined>;
    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     */
    declare public readonly egressRateLimitKbps: pulumi.Output<number | undefined>;
    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     */
    declare public readonly egressRateLimitKbpsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     */
    declare public readonly forward: pulumi.Output<string | undefined>;
    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     */
    declare public readonly fullDuplex: pulumi.Output<boolean | undefined>;
    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     */
    declare public readonly isolation: pulumi.Output<boolean | undefined>;
    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     */
    declare public readonly lldpmedEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     */
    declare public readonly lldpmedNotifyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the port profile.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of network to use as the main network on the port profile.
     */
    declare public readonly nativeNetworkconfId: pulumi.Output<string | undefined>;
    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     */
    declare public readonly opMode: pulumi.Output<string | undefined>;
    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     */
    declare public readonly poeMode: pulumi.Output<string | undefined>;
    /**
     * Enable port security for the port profile. Defaults to `false`.
     */
    declare public readonly portSecurityEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The MAC addresses associated with the port security for the port profile.
     */
    declare public readonly portSecurityMacAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     */
    declare public readonly priorityQueue1Level: pulumi.Output<number | undefined>;
    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     */
    declare public readonly priorityQueue2Level: pulumi.Output<number | undefined>;
    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     */
    declare public readonly priorityQueue3Level: pulumi.Output<number | undefined>;
    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     */
    declare public readonly priorityQueue4Level: pulumi.Output<number | undefined>;
    /**
     * The name of the site to associate the port profile with.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     */
    declare public readonly speed: pulumi.Output<number | undefined>;
    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     */
    declare public readonly stormctrlBcastEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     */
    declare public readonly stormctrlBcastLevel: pulumi.Output<number | undefined>;
    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    declare public readonly stormctrlBcastRate: pulumi.Output<number | undefined>;
    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     */
    declare public readonly stormctrlMcastEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    declare public readonly stormctrlMcastLevel: pulumi.Output<number | undefined>;
    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    declare public readonly stormctrlMcastRate: pulumi.Output<number | undefined>;
    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     */
    declare public readonly stormctrlType: pulumi.Output<string | undefined>;
    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     */
    declare public readonly stormctrlUcastEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    declare public readonly stormctrlUcastLevel: pulumi.Output<number | undefined>;
    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    declare public readonly stormctrlUcastRate: pulumi.Output<number | undefined>;
    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     */
    declare public readonly stpPortMode: pulumi.Output<boolean | undefined>;
    /**
     * The IDs of networks to tag traffic with for the port profile.
     */
    declare public readonly taggedVlanMgmt: pulumi.Output<string | undefined>;
    /**
     * The ID of network to use as the voice network on the port profile.
     */
    declare public readonly voiceNetworkconfId: pulumi.Output<string | undefined>;

    /**
     * Create a PortProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PortProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortProfileArgs | PortProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortProfileState | undefined;
            resourceInputs["autoneg"] = state?.autoneg;
            resourceInputs["dot1xCtrl"] = state?.dot1xCtrl;
            resourceInputs["dot1xIdleTimeout"] = state?.dot1xIdleTimeout;
            resourceInputs["egressRateLimitKbps"] = state?.egressRateLimitKbps;
            resourceInputs["egressRateLimitKbpsEnabled"] = state?.egressRateLimitKbpsEnabled;
            resourceInputs["forward"] = state?.forward;
            resourceInputs["fullDuplex"] = state?.fullDuplex;
            resourceInputs["isolation"] = state?.isolation;
            resourceInputs["lldpmedEnabled"] = state?.lldpmedEnabled;
            resourceInputs["lldpmedNotifyEnabled"] = state?.lldpmedNotifyEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["nativeNetworkconfId"] = state?.nativeNetworkconfId;
            resourceInputs["opMode"] = state?.opMode;
            resourceInputs["poeMode"] = state?.poeMode;
            resourceInputs["portSecurityEnabled"] = state?.portSecurityEnabled;
            resourceInputs["portSecurityMacAddresses"] = state?.portSecurityMacAddresses;
            resourceInputs["priorityQueue1Level"] = state?.priorityQueue1Level;
            resourceInputs["priorityQueue2Level"] = state?.priorityQueue2Level;
            resourceInputs["priorityQueue3Level"] = state?.priorityQueue3Level;
            resourceInputs["priorityQueue4Level"] = state?.priorityQueue4Level;
            resourceInputs["site"] = state?.site;
            resourceInputs["speed"] = state?.speed;
            resourceInputs["stormctrlBcastEnabled"] = state?.stormctrlBcastEnabled;
            resourceInputs["stormctrlBcastLevel"] = state?.stormctrlBcastLevel;
            resourceInputs["stormctrlBcastRate"] = state?.stormctrlBcastRate;
            resourceInputs["stormctrlMcastEnabled"] = state?.stormctrlMcastEnabled;
            resourceInputs["stormctrlMcastLevel"] = state?.stormctrlMcastLevel;
            resourceInputs["stormctrlMcastRate"] = state?.stormctrlMcastRate;
            resourceInputs["stormctrlType"] = state?.stormctrlType;
            resourceInputs["stormctrlUcastEnabled"] = state?.stormctrlUcastEnabled;
            resourceInputs["stormctrlUcastLevel"] = state?.stormctrlUcastLevel;
            resourceInputs["stormctrlUcastRate"] = state?.stormctrlUcastRate;
            resourceInputs["stpPortMode"] = state?.stpPortMode;
            resourceInputs["taggedVlanMgmt"] = state?.taggedVlanMgmt;
            resourceInputs["voiceNetworkconfId"] = state?.voiceNetworkconfId;
        } else {
            const args = argsOrState as PortProfileArgs | undefined;
            resourceInputs["autoneg"] = args?.autoneg;
            resourceInputs["dot1xCtrl"] = args?.dot1xCtrl;
            resourceInputs["dot1xIdleTimeout"] = args?.dot1xIdleTimeout;
            resourceInputs["egressRateLimitKbps"] = args?.egressRateLimitKbps;
            resourceInputs["egressRateLimitKbpsEnabled"] = args?.egressRateLimitKbpsEnabled;
            resourceInputs["forward"] = args?.forward;
            resourceInputs["fullDuplex"] = args?.fullDuplex;
            resourceInputs["isolation"] = args?.isolation;
            resourceInputs["lldpmedEnabled"] = args?.lldpmedEnabled;
            resourceInputs["lldpmedNotifyEnabled"] = args?.lldpmedNotifyEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["nativeNetworkconfId"] = args?.nativeNetworkconfId;
            resourceInputs["opMode"] = args?.opMode;
            resourceInputs["poeMode"] = args?.poeMode;
            resourceInputs["portSecurityEnabled"] = args?.portSecurityEnabled;
            resourceInputs["portSecurityMacAddresses"] = args?.portSecurityMacAddresses;
            resourceInputs["priorityQueue1Level"] = args?.priorityQueue1Level;
            resourceInputs["priorityQueue2Level"] = args?.priorityQueue2Level;
            resourceInputs["priorityQueue3Level"] = args?.priorityQueue3Level;
            resourceInputs["priorityQueue4Level"] = args?.priorityQueue4Level;
            resourceInputs["site"] = args?.site;
            resourceInputs["speed"] = args?.speed;
            resourceInputs["stormctrlBcastEnabled"] = args?.stormctrlBcastEnabled;
            resourceInputs["stormctrlBcastLevel"] = args?.stormctrlBcastLevel;
            resourceInputs["stormctrlBcastRate"] = args?.stormctrlBcastRate;
            resourceInputs["stormctrlMcastEnabled"] = args?.stormctrlMcastEnabled;
            resourceInputs["stormctrlMcastLevel"] = args?.stormctrlMcastLevel;
            resourceInputs["stormctrlMcastRate"] = args?.stormctrlMcastRate;
            resourceInputs["stormctrlType"] = args?.stormctrlType;
            resourceInputs["stormctrlUcastEnabled"] = args?.stormctrlUcastEnabled;
            resourceInputs["stormctrlUcastLevel"] = args?.stormctrlUcastLevel;
            resourceInputs["stormctrlUcastRate"] = args?.stormctrlUcastRate;
            resourceInputs["stpPortMode"] = args?.stpPortMode;
            resourceInputs["taggedVlanMgmt"] = args?.taggedVlanMgmt;
            resourceInputs["voiceNetworkconfId"] = args?.voiceNetworkconfId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PortProfile resources.
 */
export interface PortProfileState {
    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     */
    autoneg?: pulumi.Input<boolean>;
    /**
     * The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
     */
    dot1xCtrl?: pulumi.Input<string>;
    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     */
    dot1xIdleTimeout?: pulumi.Input<number>;
    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     */
    egressRateLimitKbps?: pulumi.Input<number>;
    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     */
    egressRateLimitKbpsEnabled?: pulumi.Input<boolean>;
    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     */
    forward?: pulumi.Input<string>;
    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     */
    fullDuplex?: pulumi.Input<boolean>;
    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     */
    isolation?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     */
    lldpmedEnabled?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     */
    lldpmedNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the port profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of network to use as the main network on the port profile.
     */
    nativeNetworkconfId?: pulumi.Input<string>;
    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     */
    opMode?: pulumi.Input<string>;
    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     */
    poeMode?: pulumi.Input<string>;
    /**
     * Enable port security for the port profile. Defaults to `false`.
     */
    portSecurityEnabled?: pulumi.Input<boolean>;
    /**
     * The MAC addresses associated with the port security for the port profile.
     */
    portSecurityMacAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue1Level?: pulumi.Input<number>;
    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue2Level?: pulumi.Input<number>;
    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue3Level?: pulumi.Input<number>;
    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue4Level?: pulumi.Input<number>;
    /**
     * The name of the site to associate the port profile with.
     */
    site?: pulumi.Input<string>;
    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     */
    speed?: pulumi.Input<number>;
    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlBcastEnabled?: pulumi.Input<boolean>;
    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlBcastLevel?: pulumi.Input<number>;
    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlBcastRate?: pulumi.Input<number>;
    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlMcastEnabled?: pulumi.Input<boolean>;
    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlMcastLevel?: pulumi.Input<number>;
    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlMcastRate?: pulumi.Input<number>;
    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     */
    stormctrlType?: pulumi.Input<string>;
    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlUcastEnabled?: pulumi.Input<boolean>;
    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlUcastLevel?: pulumi.Input<number>;
    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlUcastRate?: pulumi.Input<number>;
    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     */
    stpPortMode?: pulumi.Input<boolean>;
    /**
     * The IDs of networks to tag traffic with for the port profile.
     */
    taggedVlanMgmt?: pulumi.Input<string>;
    /**
     * The ID of network to use as the voice network on the port profile.
     */
    voiceNetworkconfId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PortProfile resource.
 */
export interface PortProfileArgs {
    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     */
    autoneg?: pulumi.Input<boolean>;
    /**
     * The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
     */
    dot1xCtrl?: pulumi.Input<string>;
    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     */
    dot1xIdleTimeout?: pulumi.Input<number>;
    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     */
    egressRateLimitKbps?: pulumi.Input<number>;
    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     */
    egressRateLimitKbpsEnabled?: pulumi.Input<boolean>;
    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     */
    forward?: pulumi.Input<string>;
    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     */
    fullDuplex?: pulumi.Input<boolean>;
    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     */
    isolation?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     */
    lldpmedEnabled?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     */
    lldpmedNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the port profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of network to use as the main network on the port profile.
     */
    nativeNetworkconfId?: pulumi.Input<string>;
    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     */
    opMode?: pulumi.Input<string>;
    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     */
    poeMode?: pulumi.Input<string>;
    /**
     * Enable port security for the port profile. Defaults to `false`.
     */
    portSecurityEnabled?: pulumi.Input<boolean>;
    /**
     * The MAC addresses associated with the port security for the port profile.
     */
    portSecurityMacAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue1Level?: pulumi.Input<number>;
    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue2Level?: pulumi.Input<number>;
    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue3Level?: pulumi.Input<number>;
    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue4Level?: pulumi.Input<number>;
    /**
     * The name of the site to associate the port profile with.
     */
    site?: pulumi.Input<string>;
    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     */
    speed?: pulumi.Input<number>;
    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlBcastEnabled?: pulumi.Input<boolean>;
    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlBcastLevel?: pulumi.Input<number>;
    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlBcastRate?: pulumi.Input<number>;
    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlMcastEnabled?: pulumi.Input<boolean>;
    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlMcastLevel?: pulumi.Input<number>;
    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlMcastRate?: pulumi.Input<number>;
    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     */
    stormctrlType?: pulumi.Input<string>;
    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlUcastEnabled?: pulumi.Input<boolean>;
    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlUcastLevel?: pulumi.Input<number>;
    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlUcastRate?: pulumi.Input<number>;
    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     */
    stpPortMode?: pulumi.Input<boolean>;
    /**
     * The IDs of networks to tag traffic with for the port profile.
     */
    taggedVlanMgmt?: pulumi.Input<string>;
    /**
     * The ID of network to use as the voice network on the port profile.
     */
    voiceNetworkconfId?: pulumi.Input<string>;
}
