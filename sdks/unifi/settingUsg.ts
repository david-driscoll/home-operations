// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SettingUsg extends pulumi.CustomResource {
    /**
     * Get an existing SettingUsg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingUsgState, opts?: pulumi.CustomResourceOptions): SettingUsg {
        return new SettingUsg(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/settingUsg:SettingUsg';

    /**
     * Returns true if the given object is an instance of SettingUsg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingUsg {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingUsg.__pulumiType;
    }

    /**
     * The DHCP relay servers.
     */
    declare public readonly dhcpRelayServers: pulumi.Output<string[]>;
    /**
     * Whether the guest firewall log is enabled.
     */
    declare public readonly firewallGuestDefaultLog: pulumi.Output<boolean>;
    /**
     * Whether the LAN firewall log is enabled.
     */
    declare public readonly firewallLanDefaultLog: pulumi.Output<boolean>;
    /**
     * Whether the WAN firewall log is enabled.
     */
    declare public readonly firewallWanDefaultLog: pulumi.Output<boolean>;
    /**
     * Whether multicast DNS is enabled.
     */
    declare public readonly multicastDnsEnabled: pulumi.Output<boolean>;
    /**
     * The name of the site to associate the settings with.
     */
    declare public readonly site: pulumi.Output<string>;

    /**
     * Create a SettingUsg resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingUsgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingUsgArgs | SettingUsgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingUsgState | undefined;
            resourceInputs["dhcpRelayServers"] = state?.dhcpRelayServers;
            resourceInputs["firewallGuestDefaultLog"] = state?.firewallGuestDefaultLog;
            resourceInputs["firewallLanDefaultLog"] = state?.firewallLanDefaultLog;
            resourceInputs["firewallWanDefaultLog"] = state?.firewallWanDefaultLog;
            resourceInputs["multicastDnsEnabled"] = state?.multicastDnsEnabled;
            resourceInputs["site"] = state?.site;
        } else {
            const args = argsOrState as SettingUsgArgs | undefined;
            resourceInputs["dhcpRelayServers"] = args?.dhcpRelayServers;
            resourceInputs["firewallGuestDefaultLog"] = args?.firewallGuestDefaultLog;
            resourceInputs["firewallLanDefaultLog"] = args?.firewallLanDefaultLog;
            resourceInputs["firewallWanDefaultLog"] = args?.firewallWanDefaultLog;
            resourceInputs["multicastDnsEnabled"] = args?.multicastDnsEnabled;
            resourceInputs["site"] = args?.site;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingUsg.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SettingUsg resources.
 */
export interface SettingUsgState {
    /**
     * The DHCP relay servers.
     */
    dhcpRelayServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the guest firewall log is enabled.
     */
    firewallGuestDefaultLog?: pulumi.Input<boolean>;
    /**
     * Whether the LAN firewall log is enabled.
     */
    firewallLanDefaultLog?: pulumi.Input<boolean>;
    /**
     * Whether the WAN firewall log is enabled.
     */
    firewallWanDefaultLog?: pulumi.Input<boolean>;
    /**
     * Whether multicast DNS is enabled.
     */
    multicastDnsEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the site to associate the settings with.
     */
    site?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SettingUsg resource.
 */
export interface SettingUsgArgs {
    /**
     * The DHCP relay servers.
     */
    dhcpRelayServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the guest firewall log is enabled.
     */
    firewallGuestDefaultLog?: pulumi.Input<boolean>;
    /**
     * Whether the LAN firewall log is enabled.
     */
    firewallLanDefaultLog?: pulumi.Input<boolean>;
    /**
     * Whether the WAN firewall log is enabled.
     */
    firewallWanDefaultLog?: pulumi.Input<boolean>;
    /**
     * Whether multicast DNS is enabled.
     */
    multicastDnsEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the site to associate the settings with.
     */
    site?: pulumi.Input<string>;
}
