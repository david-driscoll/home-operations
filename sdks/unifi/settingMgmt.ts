// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SettingMgmt extends pulumi.CustomResource {
    /**
     * Get an existing SettingMgmt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingMgmtState, opts?: pulumi.CustomResourceOptions): SettingMgmt {
        return new SettingMgmt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/settingMgmt:SettingMgmt';

    /**
     * Returns true if the given object is an instance of SettingMgmt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingMgmt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingMgmt.__pulumiType;
    }

    /**
     * Enable advanced features for UniFi devices at this site.
     */
    declare public readonly advancedFeatureEnabled: pulumi.Output<boolean>;
    /**
     * Enable alerts for UniFi devices at this site.
     */
    declare public readonly alertEnabled: pulumi.Output<boolean>;
    /**
     * Enable automatic firmware upgrades for all UniFi devices at this site. When enabled, devices will automatically update to the latest stable firmware version approved for your controller version.
     */
    declare public readonly autoUpgrade: pulumi.Output<boolean>;
    /**
     * The hour of the day (0-23) when automatic firmware upgrades will occur.
     */
    declare public readonly autoUpgradeHour: pulumi.Output<number>;
    /**
     * Enable the boot sound for UniFi devices at this site.
     */
    declare public readonly bootSound: pulumi.Output<boolean>;
    /**
     * Enable debug tools for UniFi devices at this site. Requires controller version 7.3 or later.
     */
    declare public readonly debugToolsEnabled: pulumi.Output<boolean>;
    /**
     * Enable direct connect for UniFi devices at this site.
     */
    declare public readonly directConnectEnabled: pulumi.Output<boolean>;
    /**
     * Enable the LED light for UniFi devices at this site.
     */
    declare public readonly ledEnabled: pulumi.Output<boolean>;
    /**
     * Enable outdoor mode for UniFi devices at this site.
     */
    declare public readonly outdoorModeEnabled: pulumi.Output<boolean>;
    /**
     * The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * Enable SSH password authentication for UniFi devices at this site.
     */
    declare public readonly sshAuthPasswordEnabled: pulumi.Output<boolean>;
    /**
     * Enable SSH bind wildcard for UniFi devices at this site.
     */
    declare public readonly sshBindWildcard: pulumi.Output<boolean>;
    /**
     * Enable SSH access to UniFi devices at this site. When enabled, you can connect to devices using SSH for advanced configuration and troubleshooting. It's recommended to only enable this temporarily when needed.
     */
    declare public readonly sshEnabled: pulumi.Output<boolean>;
    /**
     * List of SSH public keys that are allowed to connect to UniFi devices when SSH is enabled. Using SSH keys is more secure than password authentication.
     */
    declare public readonly sshKeys: pulumi.Output<outputs.SettingMgmtSshKey[] | undefined>;
    /**
     * The SSH password for UniFi devices at this site.
     */
    declare public readonly sshPassword: pulumi.Output<string>;
    /**
     * The SSH username for UniFi devices at this site.
     */
    declare public readonly sshUsername: pulumi.Output<string>;
    /**
     * Enable UniFi IDP for UniFi devices at this site.
     */
    declare public readonly unifiIdpEnabled: pulumi.Output<boolean>;
    /**
     * Enable WiFiman for UniFi devices at this site.
     */
    declare public readonly wifimanEnabled: pulumi.Output<boolean>;

    /**
     * Create a SettingMgmt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingMgmtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingMgmtArgs | SettingMgmtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingMgmtState | undefined;
            resourceInputs["advancedFeatureEnabled"] = state?.advancedFeatureEnabled;
            resourceInputs["alertEnabled"] = state?.alertEnabled;
            resourceInputs["autoUpgrade"] = state?.autoUpgrade;
            resourceInputs["autoUpgradeHour"] = state?.autoUpgradeHour;
            resourceInputs["bootSound"] = state?.bootSound;
            resourceInputs["debugToolsEnabled"] = state?.debugToolsEnabled;
            resourceInputs["directConnectEnabled"] = state?.directConnectEnabled;
            resourceInputs["ledEnabled"] = state?.ledEnabled;
            resourceInputs["outdoorModeEnabled"] = state?.outdoorModeEnabled;
            resourceInputs["site"] = state?.site;
            resourceInputs["sshAuthPasswordEnabled"] = state?.sshAuthPasswordEnabled;
            resourceInputs["sshBindWildcard"] = state?.sshBindWildcard;
            resourceInputs["sshEnabled"] = state?.sshEnabled;
            resourceInputs["sshKeys"] = state?.sshKeys;
            resourceInputs["sshPassword"] = state?.sshPassword;
            resourceInputs["sshUsername"] = state?.sshUsername;
            resourceInputs["unifiIdpEnabled"] = state?.unifiIdpEnabled;
            resourceInputs["wifimanEnabled"] = state?.wifimanEnabled;
        } else {
            const args = argsOrState as SettingMgmtArgs | undefined;
            resourceInputs["advancedFeatureEnabled"] = args?.advancedFeatureEnabled;
            resourceInputs["alertEnabled"] = args?.alertEnabled;
            resourceInputs["autoUpgrade"] = args?.autoUpgrade;
            resourceInputs["autoUpgradeHour"] = args?.autoUpgradeHour;
            resourceInputs["bootSound"] = args?.bootSound;
            resourceInputs["debugToolsEnabled"] = args?.debugToolsEnabled;
            resourceInputs["directConnectEnabled"] = args?.directConnectEnabled;
            resourceInputs["ledEnabled"] = args?.ledEnabled;
            resourceInputs["outdoorModeEnabled"] = args?.outdoorModeEnabled;
            resourceInputs["site"] = args?.site;
            resourceInputs["sshAuthPasswordEnabled"] = args?.sshAuthPasswordEnabled;
            resourceInputs["sshBindWildcard"] = args?.sshBindWildcard;
            resourceInputs["sshEnabled"] = args?.sshEnabled;
            resourceInputs["sshKeys"] = args?.sshKeys;
            resourceInputs["sshPassword"] = args?.sshPassword ? pulumi.secret(args.sshPassword) : undefined;
            resourceInputs["sshUsername"] = args?.sshUsername;
            resourceInputs["unifiIdpEnabled"] = args?.unifiIdpEnabled;
            resourceInputs["wifimanEnabled"] = args?.wifimanEnabled;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sshPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SettingMgmt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SettingMgmt resources.
 */
export interface SettingMgmtState {
    /**
     * Enable advanced features for UniFi devices at this site.
     */
    advancedFeatureEnabled?: pulumi.Input<boolean>;
    /**
     * Enable alerts for UniFi devices at this site.
     */
    alertEnabled?: pulumi.Input<boolean>;
    /**
     * Enable automatic firmware upgrades for all UniFi devices at this site. When enabled, devices will automatically update to the latest stable firmware version approved for your controller version.
     */
    autoUpgrade?: pulumi.Input<boolean>;
    /**
     * The hour of the day (0-23) when automatic firmware upgrades will occur.
     */
    autoUpgradeHour?: pulumi.Input<number>;
    /**
     * Enable the boot sound for UniFi devices at this site.
     */
    bootSound?: pulumi.Input<boolean>;
    /**
     * Enable debug tools for UniFi devices at this site. Requires controller version 7.3 or later.
     */
    debugToolsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable direct connect for UniFi devices at this site.
     */
    directConnectEnabled?: pulumi.Input<boolean>;
    /**
     * Enable the LED light for UniFi devices at this site.
     */
    ledEnabled?: pulumi.Input<boolean>;
    /**
     * Enable outdoor mode for UniFi devices at this site.
     */
    outdoorModeEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
     */
    site?: pulumi.Input<string>;
    /**
     * Enable SSH password authentication for UniFi devices at this site.
     */
    sshAuthPasswordEnabled?: pulumi.Input<boolean>;
    /**
     * Enable SSH bind wildcard for UniFi devices at this site.
     */
    sshBindWildcard?: pulumi.Input<boolean>;
    /**
     * Enable SSH access to UniFi devices at this site. When enabled, you can connect to devices using SSH for advanced configuration and troubleshooting. It's recommended to only enable this temporarily when needed.
     */
    sshEnabled?: pulumi.Input<boolean>;
    /**
     * List of SSH public keys that are allowed to connect to UniFi devices when SSH is enabled. Using SSH keys is more secure than password authentication.
     */
    sshKeys?: pulumi.Input<pulumi.Input<inputs.SettingMgmtSshKey>[]>;
    /**
     * The SSH password for UniFi devices at this site.
     */
    sshPassword?: pulumi.Input<string>;
    /**
     * The SSH username for UniFi devices at this site.
     */
    sshUsername?: pulumi.Input<string>;
    /**
     * Enable UniFi IDP for UniFi devices at this site.
     */
    unifiIdpEnabled?: pulumi.Input<boolean>;
    /**
     * Enable WiFiman for UniFi devices at this site.
     */
    wifimanEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SettingMgmt resource.
 */
export interface SettingMgmtArgs {
    /**
     * Enable advanced features for UniFi devices at this site.
     */
    advancedFeatureEnabled?: pulumi.Input<boolean>;
    /**
     * Enable alerts for UniFi devices at this site.
     */
    alertEnabled?: pulumi.Input<boolean>;
    /**
     * Enable automatic firmware upgrades for all UniFi devices at this site. When enabled, devices will automatically update to the latest stable firmware version approved for your controller version.
     */
    autoUpgrade?: pulumi.Input<boolean>;
    /**
     * The hour of the day (0-23) when automatic firmware upgrades will occur.
     */
    autoUpgradeHour?: pulumi.Input<number>;
    /**
     * Enable the boot sound for UniFi devices at this site.
     */
    bootSound?: pulumi.Input<boolean>;
    /**
     * Enable debug tools for UniFi devices at this site. Requires controller version 7.3 or later.
     */
    debugToolsEnabled?: pulumi.Input<boolean>;
    /**
     * Enable direct connect for UniFi devices at this site.
     */
    directConnectEnabled?: pulumi.Input<boolean>;
    /**
     * Enable the LED light for UniFi devices at this site.
     */
    ledEnabled?: pulumi.Input<boolean>;
    /**
     * Enable outdoor mode for UniFi devices at this site.
     */
    outdoorModeEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the UniFi site where this resource should be applied. If not specified, the default site will be used.
     */
    site?: pulumi.Input<string>;
    /**
     * Enable SSH password authentication for UniFi devices at this site.
     */
    sshAuthPasswordEnabled?: pulumi.Input<boolean>;
    /**
     * Enable SSH bind wildcard for UniFi devices at this site.
     */
    sshBindWildcard?: pulumi.Input<boolean>;
    /**
     * Enable SSH access to UniFi devices at this site. When enabled, you can connect to devices using SSH for advanced configuration and troubleshooting. It's recommended to only enable this temporarily when needed.
     */
    sshEnabled?: pulumi.Input<boolean>;
    /**
     * List of SSH public keys that are allowed to connect to UniFi devices when SSH is enabled. Using SSH keys is more secure than password authentication.
     */
    sshKeys?: pulumi.Input<pulumi.Input<inputs.SettingMgmtSshKey>[]>;
    /**
     * The SSH password for UniFi devices at this site.
     */
    sshPassword?: pulumi.Input<string>;
    /**
     * The SSH username for UniFi devices at this site.
     */
    sshUsername?: pulumi.Input<string>;
    /**
     * Enable UniFi IDP for UniFi devices at this site.
     */
    unifiIdpEnabled?: pulumi.Input<boolean>;
    /**
     * Enable WiFiman for UniFi devices at this site.
     */
    wifimanEnabled?: pulumi.Input<boolean>;
}
