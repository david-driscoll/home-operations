// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Specifies whether this resource should just take over control of an existing user. Defaults to `true`.
     */
    declare public readonly allowExisting: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether this user should be blocked from the network.
     */
    declare public readonly blocked: pulumi.Output<boolean | undefined>;
    /**
     * Override the device fingerprint.
     */
    declare public readonly devIdOverride: pulumi.Output<number | undefined>;
    /**
     * A fixed IPv4 address for this user.
     */
    declare public readonly fixedIp: pulumi.Output<string | undefined>;
    /**
     * The hostname of the user.
     */
    declare public /*out*/ readonly hostname: pulumi.Output<string>;
    /**
     * The IP address of the user.
     */
    declare public /*out*/ readonly ip: pulumi.Output<string>;
    /**
     * Specifies the local DNS record for this user.
     */
    declare public readonly localDnsRecord: pulumi.Output<string | undefined>;
    /**
     * The MAC address of the user.
     */
    declare public readonly mac: pulumi.Output<string>;
    /**
     * The name of the user.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The network ID for this user.
     */
    declare public readonly networkId: pulumi.Output<string | undefined>;
    /**
     * A note with additional information for the user.
     */
    declare public readonly note: pulumi.Output<string | undefined>;
    /**
     * The name of the site to associate the user with.
     */
    declare public readonly site: pulumi.Output<string>;
    /**
     * Specifies whether this resource should tell the controller to "forget" the user on destroy. Defaults to `false`.
     */
    declare public readonly skipForgetOnDestroy: pulumi.Output<boolean | undefined>;
    /**
     * The user group ID for the user.
     */
    declare public readonly userGroupId: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["allowExisting"] = state?.allowExisting;
            resourceInputs["blocked"] = state?.blocked;
            resourceInputs["devIdOverride"] = state?.devIdOverride;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["ip"] = state?.ip;
            resourceInputs["localDnsRecord"] = state?.localDnsRecord;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["note"] = state?.note;
            resourceInputs["site"] = state?.site;
            resourceInputs["skipForgetOnDestroy"] = state?.skipForgetOnDestroy;
            resourceInputs["userGroupId"] = state?.userGroupId;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.mac === undefined && !opts.urn) {
                throw new Error("Missing required property 'mac'");
            }
            resourceInputs["allowExisting"] = args?.allowExisting;
            resourceInputs["blocked"] = args?.blocked;
            resourceInputs["devIdOverride"] = args?.devIdOverride;
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["localDnsRecord"] = args?.localDnsRecord;
            resourceInputs["mac"] = args?.mac;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["note"] = args?.note;
            resourceInputs["site"] = args?.site;
            resourceInputs["skipForgetOnDestroy"] = args?.skipForgetOnDestroy;
            resourceInputs["userGroupId"] = args?.userGroupId;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Specifies whether this resource should just take over control of an existing user. Defaults to `true`.
     */
    allowExisting?: pulumi.Input<boolean>;
    /**
     * Specifies whether this user should be blocked from the network.
     */
    blocked?: pulumi.Input<boolean>;
    /**
     * Override the device fingerprint.
     */
    devIdOverride?: pulumi.Input<number>;
    /**
     * A fixed IPv4 address for this user.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * The hostname of the user.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The IP address of the user.
     */
    ip?: pulumi.Input<string>;
    /**
     * Specifies the local DNS record for this user.
     */
    localDnsRecord?: pulumi.Input<string>;
    /**
     * The MAC address of the user.
     */
    mac?: pulumi.Input<string>;
    /**
     * The name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * The network ID for this user.
     */
    networkId?: pulumi.Input<string>;
    /**
     * A note with additional information for the user.
     */
    note?: pulumi.Input<string>;
    /**
     * The name of the site to associate the user with.
     */
    site?: pulumi.Input<string>;
    /**
     * Specifies whether this resource should tell the controller to "forget" the user on destroy. Defaults to `false`.
     */
    skipForgetOnDestroy?: pulumi.Input<boolean>;
    /**
     * The user group ID for the user.
     */
    userGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Specifies whether this resource should just take over control of an existing user. Defaults to `true`.
     */
    allowExisting?: pulumi.Input<boolean>;
    /**
     * Specifies whether this user should be blocked from the network.
     */
    blocked?: pulumi.Input<boolean>;
    /**
     * Override the device fingerprint.
     */
    devIdOverride?: pulumi.Input<number>;
    /**
     * A fixed IPv4 address for this user.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * Specifies the local DNS record for this user.
     */
    localDnsRecord?: pulumi.Input<string>;
    /**
     * The MAC address of the user.
     */
    mac: pulumi.Input<string>;
    /**
     * The name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * The network ID for this user.
     */
    networkId?: pulumi.Input<string>;
    /**
     * A note with additional information for the user.
     */
    note?: pulumi.Input<string>;
    /**
     * The name of the site to associate the user with.
     */
    site?: pulumi.Input<string>;
    /**
     * Specifies whether this resource should tell the controller to "forget" the user on destroy. Defaults to `false`.
     */
    skipForgetOnDestroy?: pulumi.Input<boolean>;
    /**
     * The user group ID for the user.
     */
    userGroupId?: pulumi.Input<string>;
}
