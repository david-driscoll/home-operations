"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Network(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dhcpDns"] = state?.dhcpDns;
            resourceInputs["dhcpEnabled"] = state?.dhcpEnabled;
            resourceInputs["dhcpLease"] = state?.dhcpLease;
            resourceInputs["dhcpRelayEnabled"] = state?.dhcpRelayEnabled;
            resourceInputs["dhcpStart"] = state?.dhcpStart;
            resourceInputs["dhcpStop"] = state?.dhcpStop;
            resourceInputs["dhcpV6Dns"] = state?.dhcpV6Dns;
            resourceInputs["dhcpV6DnsAuto"] = state?.dhcpV6DnsAuto;
            resourceInputs["dhcpV6Enabled"] = state?.dhcpV6Enabled;
            resourceInputs["dhcpV6Lease"] = state?.dhcpV6Lease;
            resourceInputs["dhcpV6Start"] = state?.dhcpV6Start;
            resourceInputs["dhcpV6Stop"] = state?.dhcpV6Stop;
            resourceInputs["dhcpdBootEnabled"] = state?.dhcpdBootEnabled;
            resourceInputs["dhcpdBootFilename"] = state?.dhcpdBootFilename;
            resourceInputs["dhcpdBootServer"] = state?.dhcpdBootServer;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["igmpSnooping"] = state?.igmpSnooping;
            resourceInputs["internetAccessEnabled"] = state?.internetAccessEnabled;
            resourceInputs["ipv6InterfaceType"] = state?.ipv6InterfaceType;
            resourceInputs["ipv6PdInterface"] = state?.ipv6PdInterface;
            resourceInputs["ipv6PdPrefixid"] = state?.ipv6PdPrefixid;
            resourceInputs["ipv6PdStart"] = state?.ipv6PdStart;
            resourceInputs["ipv6PdStop"] = state?.ipv6PdStop;
            resourceInputs["ipv6RaEnable"] = state?.ipv6RaEnable;
            resourceInputs["ipv6RaPreferredLifetime"] = state?.ipv6RaPreferredLifetime;
            resourceInputs["ipv6RaPriority"] = state?.ipv6RaPriority;
            resourceInputs["ipv6RaValidLifetime"] = state?.ipv6RaValidLifetime;
            resourceInputs["ipv6StaticSubnet"] = state?.ipv6StaticSubnet;
            resourceInputs["multicastDns"] = state?.multicastDns;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkGroup"] = state?.networkGroup;
            resourceInputs["networkIsolationEnabled"] = state?.networkIsolationEnabled;
            resourceInputs["purpose"] = state?.purpose;
            resourceInputs["site"] = state?.site;
            resourceInputs["subnet"] = state?.subnet;
            resourceInputs["vlanId"] = state?.vlanId;
            resourceInputs["wanDhcpV6PdSize"] = state?.wanDhcpV6PdSize;
            resourceInputs["wanDns"] = state?.wanDns;
            resourceInputs["wanEgressQos"] = state?.wanEgressQos;
            resourceInputs["wanGateway"] = state?.wanGateway;
            resourceInputs["wanGatewayV6"] = state?.wanGatewayV6;
            resourceInputs["wanIp"] = state?.wanIp;
            resourceInputs["wanIpv6"] = state?.wanIpv6;
            resourceInputs["wanNetmask"] = state?.wanNetmask;
            resourceInputs["wanNetworkgroup"] = state?.wanNetworkgroup;
            resourceInputs["wanPrefixlen"] = state?.wanPrefixlen;
            resourceInputs["wanType"] = state?.wanType;
            resourceInputs["wanTypeV6"] = state?.wanTypeV6;
            resourceInputs["wanUsername"] = state?.wanUsername;
            resourceInputs["xWanPassword"] = state?.xWanPassword;
        }
        else {
            const args = argsOrState;
            if (args?.purpose === undefined && !opts.urn) {
                throw new Error("Missing required property 'purpose'");
            }
            resourceInputs["dhcpDns"] = args?.dhcpDns;
            resourceInputs["dhcpEnabled"] = args?.dhcpEnabled;
            resourceInputs["dhcpLease"] = args?.dhcpLease;
            resourceInputs["dhcpRelayEnabled"] = args?.dhcpRelayEnabled;
            resourceInputs["dhcpStart"] = args?.dhcpStart;
            resourceInputs["dhcpStop"] = args?.dhcpStop;
            resourceInputs["dhcpV6Dns"] = args?.dhcpV6Dns;
            resourceInputs["dhcpV6DnsAuto"] = args?.dhcpV6DnsAuto;
            resourceInputs["dhcpV6Enabled"] = args?.dhcpV6Enabled;
            resourceInputs["dhcpV6Lease"] = args?.dhcpV6Lease;
            resourceInputs["dhcpV6Start"] = args?.dhcpV6Start;
            resourceInputs["dhcpV6Stop"] = args?.dhcpV6Stop;
            resourceInputs["dhcpdBootEnabled"] = args?.dhcpdBootEnabled;
            resourceInputs["dhcpdBootFilename"] = args?.dhcpdBootFilename;
            resourceInputs["dhcpdBootServer"] = args?.dhcpdBootServer;
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["igmpSnooping"] = args?.igmpSnooping;
            resourceInputs["internetAccessEnabled"] = args?.internetAccessEnabled;
            resourceInputs["ipv6InterfaceType"] = args?.ipv6InterfaceType;
            resourceInputs["ipv6PdInterface"] = args?.ipv6PdInterface;
            resourceInputs["ipv6PdPrefixid"] = args?.ipv6PdPrefixid;
            resourceInputs["ipv6PdStart"] = args?.ipv6PdStart;
            resourceInputs["ipv6PdStop"] = args?.ipv6PdStop;
            resourceInputs["ipv6RaEnable"] = args?.ipv6RaEnable;
            resourceInputs["ipv6RaPreferredLifetime"] = args?.ipv6RaPreferredLifetime;
            resourceInputs["ipv6RaPriority"] = args?.ipv6RaPriority;
            resourceInputs["ipv6RaValidLifetime"] = args?.ipv6RaValidLifetime;
            resourceInputs["ipv6StaticSubnet"] = args?.ipv6StaticSubnet;
            resourceInputs["multicastDns"] = args?.multicastDns;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkGroup"] = args?.networkGroup;
            resourceInputs["networkIsolationEnabled"] = args?.networkIsolationEnabled;
            resourceInputs["purpose"] = args?.purpose;
            resourceInputs["site"] = args?.site;
            resourceInputs["subnet"] = args?.subnet;
            resourceInputs["vlanId"] = args?.vlanId;
            resourceInputs["wanDhcpV6PdSize"] = args?.wanDhcpV6PdSize;
            resourceInputs["wanDns"] = args?.wanDns;
            resourceInputs["wanEgressQos"] = args?.wanEgressQos;
            resourceInputs["wanGateway"] = args?.wanGateway;
            resourceInputs["wanGatewayV6"] = args?.wanGatewayV6;
            resourceInputs["wanIp"] = args?.wanIp;
            resourceInputs["wanIpv6"] = args?.wanIpv6;
            resourceInputs["wanNetmask"] = args?.wanNetmask;
            resourceInputs["wanNetworkgroup"] = args?.wanNetworkgroup;
            resourceInputs["wanPrefixlen"] = args?.wanPrefixlen;
            resourceInputs["wanType"] = args?.wanType;
            resourceInputs["wanTypeV6"] = args?.wanTypeV6;
            resourceInputs["wanUsername"] = args?.wanUsername;
            resourceInputs["xWanPassword"] = args?.xWanPassword;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Network = Network;
/** @internal */
Network.__pulumiType = 'unifi:index/network:Network';
//# sourceMappingURL=network.js.map