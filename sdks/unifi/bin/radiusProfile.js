"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadiusProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class RadiusProfile extends pulumi.CustomResource {
    /**
     * Get an existing RadiusProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RadiusProfile(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of RadiusProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RadiusProfile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountingEnabled"] = state?.accountingEnabled;
            resourceInputs["acctServers"] = state?.acctServers;
            resourceInputs["authServers"] = state?.authServers;
            resourceInputs["interimUpdateEnabled"] = state?.interimUpdateEnabled;
            resourceInputs["interimUpdateInterval"] = state?.interimUpdateInterval;
            resourceInputs["name"] = state?.name;
            resourceInputs["site"] = state?.site;
            resourceInputs["useUsgAcctServer"] = state?.useUsgAcctServer;
            resourceInputs["useUsgAuthServer"] = state?.useUsgAuthServer;
            resourceInputs["vlanEnabled"] = state?.vlanEnabled;
            resourceInputs["vlanWlanMode"] = state?.vlanWlanMode;
        }
        else {
            const args = argsOrState;
            resourceInputs["accountingEnabled"] = args?.accountingEnabled;
            resourceInputs["acctServers"] = args?.acctServers;
            resourceInputs["authServers"] = args?.authServers;
            resourceInputs["interimUpdateEnabled"] = args?.interimUpdateEnabled;
            resourceInputs["interimUpdateInterval"] = args?.interimUpdateInterval;
            resourceInputs["name"] = args?.name;
            resourceInputs["site"] = args?.site;
            resourceInputs["useUsgAcctServer"] = args?.useUsgAcctServer;
            resourceInputs["useUsgAuthServer"] = args?.useUsgAuthServer;
            resourceInputs["vlanEnabled"] = args?.vlanEnabled;
            resourceInputs["vlanWlanMode"] = args?.vlanWlanMode;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RadiusProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.RadiusProfile = RadiusProfile;
/** @internal */
RadiusProfile.__pulumiType = 'unifi:index/radiusProfile:RadiusProfile';
//# sourceMappingURL=radiusProfile.js.map