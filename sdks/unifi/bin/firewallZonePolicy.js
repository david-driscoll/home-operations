"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirewallZonePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class FirewallZonePolicy extends pulumi.CustomResource {
    /**
     * Get an existing FirewallZonePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FirewallZonePolicy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of FirewallZonePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallZonePolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state?.action;
            resourceInputs["autoAllowReturnTraffic"] = state?.autoAllowReturnTraffic;
            resourceInputs["connectionStateType"] = state?.connectionStateType;
            resourceInputs["connectionStates"] = state?.connectionStates;
            resourceInputs["description"] = state?.description;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["index"] = state?.index;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["matchIpSecType"] = state?.matchIpSecType;
            resourceInputs["matchOppositeProtocol"] = state?.matchOppositeProtocol;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["site"] = state?.site;
            resourceInputs["source"] = state?.source;
        }
        else {
            const args = argsOrState;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["autoAllowReturnTraffic"] = args?.autoAllowReturnTraffic;
            resourceInputs["connectionStateType"] = args?.connectionStateType;
            resourceInputs["connectionStates"] = args?.connectionStates;
            resourceInputs["description"] = args?.description;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["index"] = args?.index;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["matchIpSecType"] = args?.matchIpSecType;
            resourceInputs["matchOppositeProtocol"] = args?.matchOppositeProtocol;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["site"] = args?.site;
            resourceInputs["source"] = args?.source;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallZonePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.FirewallZonePolicy = FirewallZonePolicy;
/** @internal */
FirewallZonePolicy.__pulumiType = 'unifi:index/firewallZonePolicy:FirewallZonePolicy';
//# sourceMappingURL=firewallZonePolicy.js.map