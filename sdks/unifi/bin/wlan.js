"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wlan = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Wlan extends pulumi.CustomResource {
    /**
     * Get an existing Wlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Wlan(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Wlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Wlan.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apGroupIds"] = state?.apGroupIds;
            resourceInputs["bssTransition"] = state?.bssTransition;
            resourceInputs["fastRoamingEnabled"] = state?.fastRoamingEnabled;
            resourceInputs["hideSsid"] = state?.hideSsid;
            resourceInputs["isGuest"] = state?.isGuest;
            resourceInputs["l2Isolation"] = state?.l2Isolation;
            resourceInputs["macFilterEnabled"] = state?.macFilterEnabled;
            resourceInputs["macFilterLists"] = state?.macFilterLists;
            resourceInputs["macFilterPolicy"] = state?.macFilterPolicy;
            resourceInputs["minimumDataRate2gKbps"] = state?.minimumDataRate2gKbps;
            resourceInputs["minimumDataRate5gKbps"] = state?.minimumDataRate5gKbps;
            resourceInputs["multicastEnhance"] = state?.multicastEnhance;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["no2ghzOui"] = state?.no2ghzOui;
            resourceInputs["passphrase"] = state?.passphrase;
            resourceInputs["pmfMode"] = state?.pmfMode;
            resourceInputs["proxyArp"] = state?.proxyArp;
            resourceInputs["radiusProfileId"] = state?.radiusProfileId;
            resourceInputs["schedules"] = state?.schedules;
            resourceInputs["security"] = state?.security;
            resourceInputs["site"] = state?.site;
            resourceInputs["uapsd"] = state?.uapsd;
            resourceInputs["userGroupId"] = state?.userGroupId;
            resourceInputs["wlanBand"] = state?.wlanBand;
            resourceInputs["wpa3Support"] = state?.wpa3Support;
            resourceInputs["wpa3Transition"] = state?.wpa3Transition;
        }
        else {
            const args = argsOrState;
            if (args?.security === undefined && !opts.urn) {
                throw new Error("Missing required property 'security'");
            }
            if (args?.userGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userGroupId'");
            }
            resourceInputs["apGroupIds"] = args?.apGroupIds;
            resourceInputs["bssTransition"] = args?.bssTransition;
            resourceInputs["fastRoamingEnabled"] = args?.fastRoamingEnabled;
            resourceInputs["hideSsid"] = args?.hideSsid;
            resourceInputs["isGuest"] = args?.isGuest;
            resourceInputs["l2Isolation"] = args?.l2Isolation;
            resourceInputs["macFilterEnabled"] = args?.macFilterEnabled;
            resourceInputs["macFilterLists"] = args?.macFilterLists;
            resourceInputs["macFilterPolicy"] = args?.macFilterPolicy;
            resourceInputs["minimumDataRate2gKbps"] = args?.minimumDataRate2gKbps;
            resourceInputs["minimumDataRate5gKbps"] = args?.minimumDataRate5gKbps;
            resourceInputs["multicastEnhance"] = args?.multicastEnhance;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["no2ghzOui"] = args?.no2ghzOui;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["pmfMode"] = args?.pmfMode;
            resourceInputs["proxyArp"] = args?.proxyArp;
            resourceInputs["radiusProfileId"] = args?.radiusProfileId;
            resourceInputs["schedules"] = args?.schedules;
            resourceInputs["security"] = args?.security;
            resourceInputs["site"] = args?.site;
            resourceInputs["uapsd"] = args?.uapsd;
            resourceInputs["userGroupId"] = args?.userGroupId;
            resourceInputs["wlanBand"] = args?.wlanBand;
            resourceInputs["wpa3Support"] = args?.wpa3Support;
            resourceInputs["wpa3Transition"] = args?.wpa3Transition;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Wlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Wlan = Wlan;
/** @internal */
Wlan.__pulumiType = 'unifi:index/wlan:Wlan';
//# sourceMappingURL=wlan.js.map