"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirewallRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FirewallRule(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state?.action;
            resourceInputs["dstAddress"] = state?.dstAddress;
            resourceInputs["dstAddressIpv6"] = state?.dstAddressIpv6;
            resourceInputs["dstFirewallGroupIds"] = state?.dstFirewallGroupIds;
            resourceInputs["dstNetworkId"] = state?.dstNetworkId;
            resourceInputs["dstNetworkType"] = state?.dstNetworkType;
            resourceInputs["dstPort"] = state?.dstPort;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["icmpTypename"] = state?.icmpTypename;
            resourceInputs["icmpV6Typename"] = state?.icmpV6Typename;
            resourceInputs["ipSec"] = state?.ipSec;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolV6"] = state?.protocolV6;
            resourceInputs["ruleIndex"] = state?.ruleIndex;
            resourceInputs["ruleset"] = state?.ruleset;
            resourceInputs["site"] = state?.site;
            resourceInputs["srcAddress"] = state?.srcAddress;
            resourceInputs["srcAddressIpv6"] = state?.srcAddressIpv6;
            resourceInputs["srcFirewallGroupIds"] = state?.srcFirewallGroupIds;
            resourceInputs["srcMac"] = state?.srcMac;
            resourceInputs["srcNetworkId"] = state?.srcNetworkId;
            resourceInputs["srcNetworkType"] = state?.srcNetworkType;
            resourceInputs["srcPort"] = state?.srcPort;
            resourceInputs["stateEstablished"] = state?.stateEstablished;
            resourceInputs["stateInvalid"] = state?.stateInvalid;
            resourceInputs["stateNew"] = state?.stateNew;
            resourceInputs["stateRelated"] = state?.stateRelated;
        }
        else {
            const args = argsOrState;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.ruleIndex === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleIndex'");
            }
            if (args?.ruleset === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleset'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["dstAddress"] = args?.dstAddress;
            resourceInputs["dstAddressIpv6"] = args?.dstAddressIpv6;
            resourceInputs["dstFirewallGroupIds"] = args?.dstFirewallGroupIds;
            resourceInputs["dstNetworkId"] = args?.dstNetworkId;
            resourceInputs["dstNetworkType"] = args?.dstNetworkType;
            resourceInputs["dstPort"] = args?.dstPort;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["icmpTypename"] = args?.icmpTypename;
            resourceInputs["icmpV6Typename"] = args?.icmpV6Typename;
            resourceInputs["ipSec"] = args?.ipSec;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolV6"] = args?.protocolV6;
            resourceInputs["ruleIndex"] = args?.ruleIndex;
            resourceInputs["ruleset"] = args?.ruleset;
            resourceInputs["site"] = args?.site;
            resourceInputs["srcAddress"] = args?.srcAddress;
            resourceInputs["srcAddressIpv6"] = args?.srcAddressIpv6;
            resourceInputs["srcFirewallGroupIds"] = args?.srcFirewallGroupIds;
            resourceInputs["srcMac"] = args?.srcMac;
            resourceInputs["srcNetworkId"] = args?.srcNetworkId;
            resourceInputs["srcNetworkType"] = args?.srcNetworkType;
            resourceInputs["srcPort"] = args?.srcPort;
            resourceInputs["stateEstablished"] = args?.stateEstablished;
            resourceInputs["stateInvalid"] = args?.stateInvalid;
            resourceInputs["stateNew"] = args?.stateNew;
            resourceInputs["stateRelated"] = args?.stateRelated;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.FirewallRule = FirewallRule;
/** @internal */
FirewallRule.__pulumiType = 'unifi:index/firewallRule:FirewallRule';
//# sourceMappingURL=firewallRule.js.map