"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class PortProfile extends pulumi.CustomResource {
    /**
     * Get an existing PortProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PortProfile(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of PortProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortProfile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoneg"] = state?.autoneg;
            resourceInputs["dot1xCtrl"] = state?.dot1xCtrl;
            resourceInputs["dot1xIdleTimeout"] = state?.dot1xIdleTimeout;
            resourceInputs["egressRateLimitKbps"] = state?.egressRateLimitKbps;
            resourceInputs["egressRateLimitKbpsEnabled"] = state?.egressRateLimitKbpsEnabled;
            resourceInputs["excludedNetworkIds"] = state?.excludedNetworkIds;
            resourceInputs["forward"] = state?.forward;
            resourceInputs["fullDuplex"] = state?.fullDuplex;
            resourceInputs["isolation"] = state?.isolation;
            resourceInputs["lldpmedEnabled"] = state?.lldpmedEnabled;
            resourceInputs["lldpmedNotifyEnabled"] = state?.lldpmedNotifyEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["nativeNetworkconfId"] = state?.nativeNetworkconfId;
            resourceInputs["opMode"] = state?.opMode;
            resourceInputs["poeMode"] = state?.poeMode;
            resourceInputs["portSecurityEnabled"] = state?.portSecurityEnabled;
            resourceInputs["portSecurityMacAddresses"] = state?.portSecurityMacAddresses;
            resourceInputs["priorityQueue1Level"] = state?.priorityQueue1Level;
            resourceInputs["priorityQueue2Level"] = state?.priorityQueue2Level;
            resourceInputs["priorityQueue3Level"] = state?.priorityQueue3Level;
            resourceInputs["priorityQueue4Level"] = state?.priorityQueue4Level;
            resourceInputs["site"] = state?.site;
            resourceInputs["speed"] = state?.speed;
            resourceInputs["stormctrlBcastEnabled"] = state?.stormctrlBcastEnabled;
            resourceInputs["stormctrlBcastLevel"] = state?.stormctrlBcastLevel;
            resourceInputs["stormctrlBcastRate"] = state?.stormctrlBcastRate;
            resourceInputs["stormctrlMcastEnabled"] = state?.stormctrlMcastEnabled;
            resourceInputs["stormctrlMcastLevel"] = state?.stormctrlMcastLevel;
            resourceInputs["stormctrlMcastRate"] = state?.stormctrlMcastRate;
            resourceInputs["stormctrlType"] = state?.stormctrlType;
            resourceInputs["stormctrlUcastEnabled"] = state?.stormctrlUcastEnabled;
            resourceInputs["stormctrlUcastLevel"] = state?.stormctrlUcastLevel;
            resourceInputs["stormctrlUcastRate"] = state?.stormctrlUcastRate;
            resourceInputs["stpPortMode"] = state?.stpPortMode;
            resourceInputs["taggedVlanMgmt"] = state?.taggedVlanMgmt;
            resourceInputs["voiceNetworkconfId"] = state?.voiceNetworkconfId;
        }
        else {
            const args = argsOrState;
            resourceInputs["autoneg"] = args?.autoneg;
            resourceInputs["dot1xCtrl"] = args?.dot1xCtrl;
            resourceInputs["dot1xIdleTimeout"] = args?.dot1xIdleTimeout;
            resourceInputs["egressRateLimitKbps"] = args?.egressRateLimitKbps;
            resourceInputs["egressRateLimitKbpsEnabled"] = args?.egressRateLimitKbpsEnabled;
            resourceInputs["excludedNetworkIds"] = args?.excludedNetworkIds;
            resourceInputs["forward"] = args?.forward;
            resourceInputs["fullDuplex"] = args?.fullDuplex;
            resourceInputs["isolation"] = args?.isolation;
            resourceInputs["lldpmedEnabled"] = args?.lldpmedEnabled;
            resourceInputs["lldpmedNotifyEnabled"] = args?.lldpmedNotifyEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["nativeNetworkconfId"] = args?.nativeNetworkconfId;
            resourceInputs["opMode"] = args?.opMode;
            resourceInputs["poeMode"] = args?.poeMode;
            resourceInputs["portSecurityEnabled"] = args?.portSecurityEnabled;
            resourceInputs["portSecurityMacAddresses"] = args?.portSecurityMacAddresses;
            resourceInputs["priorityQueue1Level"] = args?.priorityQueue1Level;
            resourceInputs["priorityQueue2Level"] = args?.priorityQueue2Level;
            resourceInputs["priorityQueue3Level"] = args?.priorityQueue3Level;
            resourceInputs["priorityQueue4Level"] = args?.priorityQueue4Level;
            resourceInputs["site"] = args?.site;
            resourceInputs["speed"] = args?.speed;
            resourceInputs["stormctrlBcastEnabled"] = args?.stormctrlBcastEnabled;
            resourceInputs["stormctrlBcastLevel"] = args?.stormctrlBcastLevel;
            resourceInputs["stormctrlBcastRate"] = args?.stormctrlBcastRate;
            resourceInputs["stormctrlMcastEnabled"] = args?.stormctrlMcastEnabled;
            resourceInputs["stormctrlMcastLevel"] = args?.stormctrlMcastLevel;
            resourceInputs["stormctrlMcastRate"] = args?.stormctrlMcastRate;
            resourceInputs["stormctrlType"] = args?.stormctrlType;
            resourceInputs["stormctrlUcastEnabled"] = args?.stormctrlUcastEnabled;
            resourceInputs["stormctrlUcastLevel"] = args?.stormctrlUcastLevel;
            resourceInputs["stormctrlUcastRate"] = args?.stormctrlUcastRate;
            resourceInputs["stpPortMode"] = args?.stpPortMode;
            resourceInputs["taggedVlanMgmt"] = args?.taggedVlanMgmt;
            resourceInputs["voiceNetworkconfId"] = args?.voiceNetworkconfId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.PortProfile = PortProfile;
/** @internal */
PortProfile.__pulumiType = 'unifi:index/portProfile:PortProfile';
//# sourceMappingURL=portProfile.js.map