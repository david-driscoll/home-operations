"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingUsg = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SettingUsg extends pulumi.CustomResource {
    /**
     * Get an existing SettingUsg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SettingUsg(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SettingUsg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingUsg.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arpCacheBaseReachable"] = state?.arpCacheBaseReachable;
            resourceInputs["arpCacheTimeout"] = state?.arpCacheTimeout;
            resourceInputs["broadcastPing"] = state?.broadcastPing;
            resourceInputs["dhcpRelay"] = state?.dhcpRelay;
            resourceInputs["dhcpRelayServers"] = state?.dhcpRelayServers;
            resourceInputs["dhcpdHostfileUpdate"] = state?.dhcpdHostfileUpdate;
            resourceInputs["dhcpdUseDnsmasq"] = state?.dhcpdUseDnsmasq;
            resourceInputs["dnsVerification"] = state?.dnsVerification;
            resourceInputs["dnsmasqAllServers"] = state?.dnsmasqAllServers;
            resourceInputs["echoServer"] = state?.echoServer;
            resourceInputs["ftpModule"] = state?.ftpModule;
            resourceInputs["geoIpFiltering"] = state?.geoIpFiltering;
            resourceInputs["geoIpFilteringEnabled"] = state?.geoIpFilteringEnabled;
            resourceInputs["greModule"] = state?.greModule;
            resourceInputs["h323Module"] = state?.h323Module;
            resourceInputs["icmpTimeout"] = state?.icmpTimeout;
            resourceInputs["lldpEnableAll"] = state?.lldpEnableAll;
            resourceInputs["mssClamp"] = state?.mssClamp;
            resourceInputs["mssClampMss"] = state?.mssClampMss;
            resourceInputs["multicastDnsEnabled"] = state?.multicastDnsEnabled;
            resourceInputs["offloadAccounting"] = state?.offloadAccounting;
            resourceInputs["offloadL2Blocking"] = state?.offloadL2Blocking;
            resourceInputs["offloadSch"] = state?.offloadSch;
            resourceInputs["otherTimeout"] = state?.otherTimeout;
            resourceInputs["pptpModule"] = state?.pptpModule;
            resourceInputs["receiveRedirects"] = state?.receiveRedirects;
            resourceInputs["sendRedirects"] = state?.sendRedirects;
            resourceInputs["sipModule"] = state?.sipModule;
            resourceInputs["site"] = state?.site;
            resourceInputs["synCookies"] = state?.synCookies;
            resourceInputs["tcpTimeouts"] = state?.tcpTimeouts;
            resourceInputs["tftpModule"] = state?.tftpModule;
            resourceInputs["timeoutSettingPreference"] = state?.timeoutSettingPreference;
            resourceInputs["udpOtherTimeout"] = state?.udpOtherTimeout;
            resourceInputs["udpStreamTimeout"] = state?.udpStreamTimeout;
            resourceInputs["unbindWanMonitors"] = state?.unbindWanMonitors;
            resourceInputs["upnp"] = state?.upnp;
            resourceInputs["upnpEnabled"] = state?.upnpEnabled;
        }
        else {
            const args = argsOrState;
            resourceInputs["arpCacheBaseReachable"] = args?.arpCacheBaseReachable;
            resourceInputs["arpCacheTimeout"] = args?.arpCacheTimeout;
            resourceInputs["broadcastPing"] = args?.broadcastPing;
            resourceInputs["dhcpRelay"] = args?.dhcpRelay;
            resourceInputs["dhcpRelayServers"] = args?.dhcpRelayServers;
            resourceInputs["dhcpdHostfileUpdate"] = args?.dhcpdHostfileUpdate;
            resourceInputs["dhcpdUseDnsmasq"] = args?.dhcpdUseDnsmasq;
            resourceInputs["dnsVerification"] = args?.dnsVerification;
            resourceInputs["dnsmasqAllServers"] = args?.dnsmasqAllServers;
            resourceInputs["echoServer"] = args?.echoServer;
            resourceInputs["ftpModule"] = args?.ftpModule;
            resourceInputs["geoIpFiltering"] = args?.geoIpFiltering;
            resourceInputs["greModule"] = args?.greModule;
            resourceInputs["h323Module"] = args?.h323Module;
            resourceInputs["icmpTimeout"] = args?.icmpTimeout;
            resourceInputs["lldpEnableAll"] = args?.lldpEnableAll;
            resourceInputs["mssClamp"] = args?.mssClamp;
            resourceInputs["mssClampMss"] = args?.mssClampMss;
            resourceInputs["multicastDnsEnabled"] = args?.multicastDnsEnabled;
            resourceInputs["offloadAccounting"] = args?.offloadAccounting;
            resourceInputs["offloadL2Blocking"] = args?.offloadL2Blocking;
            resourceInputs["offloadSch"] = args?.offloadSch;
            resourceInputs["otherTimeout"] = args?.otherTimeout;
            resourceInputs["pptpModule"] = args?.pptpModule;
            resourceInputs["receiveRedirects"] = args?.receiveRedirects;
            resourceInputs["sendRedirects"] = args?.sendRedirects;
            resourceInputs["sipModule"] = args?.sipModule;
            resourceInputs["site"] = args?.site;
            resourceInputs["synCookies"] = args?.synCookies;
            resourceInputs["tcpTimeouts"] = args?.tcpTimeouts;
            resourceInputs["tftpModule"] = args?.tftpModule;
            resourceInputs["timeoutSettingPreference"] = args?.timeoutSettingPreference;
            resourceInputs["udpOtherTimeout"] = args?.udpOtherTimeout;
            resourceInputs["udpStreamTimeout"] = args?.udpStreamTimeout;
            resourceInputs["unbindWanMonitors"] = args?.unbindWanMonitors;
            resourceInputs["upnp"] = args?.upnp;
            resourceInputs["geoIpFilteringEnabled"] = undefined /*out*/;
            resourceInputs["upnpEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingUsg.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SettingUsg = SettingUsg;
/** @internal */
SettingUsg.__pulumiType = 'unifi:index/settingUsg:SettingUsg';
//# sourceMappingURL=settingUsg.js.map