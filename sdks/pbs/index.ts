// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatastoreArgs, DatastoreState } from "./datastore";
export type Datastore = import("./datastore").Datastore;
export const Datastore: typeof import("./datastore").Datastore = null as any;
utilities.lazyLoad(exports, ["Datastore"], () => require("./datastore"));

export * from "./provider";
import { Provider } from "./provider";

export { S3EndpointArgs, S3EndpointState } from "./s3endpoint";
export type S3Endpoint = import("./s3endpoint").S3Endpoint;
export const S3Endpoint: typeof import("./s3endpoint").S3Endpoint = null as any;
utilities.lazyLoad(exports, ["S3Endpoint"], () => require("./s3endpoint"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pbs:index/datastore:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "pbs:index/s3Endpoint:S3Endpoint":
                return new S3Endpoint(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pbs", "index/datastore", _module)
pulumi.runtime.registerResourceModule("pbs", "index/s3Endpoint", _module)
pulumi.runtime.registerResourcePackage("pbs", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pbs") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
