"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Datastore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Datastore extends pulumi.CustomResource {
    /**
     * Get an existing Datastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Datastore(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Datastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datastore.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["blockSize"] = state?.blockSize;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["compression"] = state?.compression;
            resourceInputs["contents"] = state?.contents;
            resourceInputs["createBasePath"] = state?.createBasePath;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["export"] = state?.export;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["gcSchedule"] = state?.gcSchedule;
            resourceInputs["maxBackups"] = state?.maxBackups;
            resourceInputs["name"] = state?.name;
            resourceInputs["notifyLevel"] = state?.notifyLevel;
            resourceInputs["notifyUser"] = state?.notifyUser;
            resourceInputs["options"] = state?.options;
            resourceInputs["password"] = state?.password;
            resourceInputs["path"] = state?.path;
            resourceInputs["pruneSchedule"] = state?.pruneSchedule;
            resourceInputs["s3Bucket"] = state?.s3Bucket;
            resourceInputs["s3Client"] = state?.s3Client;
            resourceInputs["server"] = state?.server;
            resourceInputs["share"] = state?.share;
            resourceInputs["subDir"] = state?.subDir;
            resourceInputs["thinPool"] = state?.thinPool;
            resourceInputs["tuneLevel"] = state?.tuneLevel;
            resourceInputs["type"] = state?.type;
            resourceInputs["username"] = state?.username;
            resourceInputs["volumeGroup"] = state?.volumeGroup;
            resourceInputs["zfsDataset"] = state?.zfsDataset;
            resourceInputs["zfsPool"] = state?.zfsPool;
        }
        else {
            const args = argsOrState;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["blockSize"] = args?.blockSize;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["compression"] = args?.compression;
            resourceInputs["contents"] = args?.contents;
            resourceInputs["createBasePath"] = args?.createBasePath;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["export"] = args?.export;
            resourceInputs["fingerprint"] = args?.fingerprint;
            resourceInputs["gcSchedule"] = args?.gcSchedule;
            resourceInputs["maxBackups"] = args?.maxBackups;
            resourceInputs["name"] = args?.name;
            resourceInputs["notifyLevel"] = args?.notifyLevel;
            resourceInputs["notifyUser"] = args?.notifyUser;
            resourceInputs["options"] = args?.options;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["path"] = args?.path;
            resourceInputs["pruneSchedule"] = args?.pruneSchedule;
            resourceInputs["s3Bucket"] = args?.s3Bucket;
            resourceInputs["s3Client"] = args?.s3Client;
            resourceInputs["server"] = args?.server;
            resourceInputs["share"] = args?.share;
            resourceInputs["subDir"] = args?.subDir;
            resourceInputs["thinPool"] = args?.thinPool;
            resourceInputs["tuneLevel"] = args?.tuneLevel;
            resourceInputs["type"] = args?.type;
            resourceInputs["username"] = args?.username;
            resourceInputs["volumeGroup"] = args?.volumeGroup;
            resourceInputs["zfsDataset"] = args?.zfsDataset;
            resourceInputs["zfsPool"] = args?.zfsPool;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Datastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Datastore = Datastore;
/** @internal */
Datastore.__pulumiType = 'pbs:index/datastore:Datastore';
//# sourceMappingURL=datastore.js.map