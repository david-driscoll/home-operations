"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Endpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class S3Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing S3Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new S3Endpoint(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of S3Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Endpoint.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["pathStyle"] = state?.pathStyle;
            resourceInputs["port"] = state?.port;
            resourceInputs["providerQuirks"] = state?.providerQuirks;
            resourceInputs["region"] = state?.region;
            resourceInputs["s3EndpointId"] = state?.s3EndpointId;
            resourceInputs["secretKey"] = state?.secretKey;
        }
        else {
            const args = argsOrState;
            if (args?.accessKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if (args?.endpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if (args?.s3EndpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 's3EndpointId'");
            }
            if (args?.secretKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["endpoint"] = args?.endpoint;
            resourceInputs["fingerprint"] = args?.fingerprint;
            resourceInputs["pathStyle"] = args?.pathStyle;
            resourceInputs["port"] = args?.port;
            resourceInputs["providerQuirks"] = args?.providerQuirks;
            resourceInputs["region"] = args?.region;
            resourceInputs["s3EndpointId"] = args?.s3EndpointId;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(S3Endpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.S3Endpoint = S3Endpoint;
/** @internal */
S3Endpoint.__pulumiType = 'pbs:index/s3Endpoint:S3Endpoint';
//# sourceMappingURL=s3endpoint.js.map