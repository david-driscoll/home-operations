// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Datastore extends pulumi.CustomResource {
    /**
     * Get an existing Datastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatastoreState, opts?: pulumi.CustomResourceOptions): Datastore {
        return new Datastore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pbs:index/datastore:Datastore';

    /**
     * Returns true if the given object is an instance of Datastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datastore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datastore.__pulumiType;
    }

    /**
     * Block size for ZFS datasets (e.g., `4K`, `8K`, `16K`).
     */
    declare public readonly blockSize: pulumi.Output<string | undefined>;
    /**
     * Description for the datastore.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Compression algorithm for ZFS. Valid values: `on`, `off`, `lz4`, `zstd`, `gzip`.
     */
    declare public readonly compression: pulumi.Output<string | undefined>;
    /**
     * Content types allowed on this datastore. Valid values: `backup`, `ct`, `iso`, `vztmpl`.
     */
    declare public readonly contents: pulumi.Output<string[]>;
    /**
     * Create base directory if it doesn't exist. Only applicable for directory datastores.
     */
    declare public readonly createBasePath: pulumi.Output<boolean>;
    /**
     * Whether the datastore is disabled.
     */
    declare public readonly disabled: pulumi.Output<boolean>;
    /**
     * Domain for CIFS authentication. Optional for CIFS datastores.
     */
    declare public readonly domain: pulumi.Output<string | undefined>;
    /**
     * NFS export path. Required for NFS datastores.
     */
    declare public readonly export: pulumi.Output<string | undefined>;
    /**
     * Certificate fingerprint for secure connections (network datastores).
     */
    declare public readonly fingerprint: pulumi.Output<string | undefined>;
    /**
     * Garbage collection schedule in cron format (e.g., `daily`, `weekly`, or `0 3 * * 0`).
     */
    declare public readonly gcSchedule: pulumi.Output<string | undefined>;
    /**
     * Maximum number of backups per guest. Set to 0 for unlimited backups.
     */
    declare public readonly maxBackups: pulumi.Output<number | undefined>;
    /**
     * Unique identifier for the datastore.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Notification level. Valid values: `info`, `notice`, `warning`, `error`.
     */
    declare public readonly notifyLevel: pulumi.Output<string | undefined>;
    /**
     * User to send datastore notifications to (e.g., `root@pam`).
     */
    declare public readonly notifyUser: pulumi.Output<string | undefined>;
    /**
     * Mount options for network storage (e.g., `vers=3,soft`).
     */
    declare public readonly options: pulumi.Output<string | undefined>;
    /**
     * Password for CIFS authentication. Optional for CIFS datastores.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Path to the datastore. Required for directory datastores, optional for others.
     */
    declare public readonly path: pulumi.Output<string | undefined>;
    /**
     * Prune schedule in cron format (e.g., `daily`, `weekly`, or `0 2 * * *`).
     */
    declare public readonly pruneSchedule: pulumi.Output<string | undefined>;
    /**
     * S3 bucket name for S3 datastores. The bucket must be created beforehand.
     */
    declare public readonly s3Bucket: pulumi.Output<string | undefined>;
    /**
     * S3 endpoint ID for S3 datastores. Must reference an existing S3 endpoint configuration.
     */
    declare public readonly s3Client: pulumi.Output<string | undefined>;
    /**
     * Server hostname or IP address. Required for CIFS/NFS datastores.
     */
    declare public readonly server: pulumi.Output<string | undefined>;
    /**
     * CIFS share name. Required for CIFS datastores.
     */
    declare public readonly share: pulumi.Output<string | undefined>;
    /**
     * Subdirectory on the remote share. Optional for network datastores.
     */
    declare public readonly subDir: pulumi.Output<string | undefined>;
    /**
     * LVM thin pool name. Optional for LVM datastores.
     */
    declare public readonly thinPool: pulumi.Output<string | undefined>;
    /**
     * Tuning level for performance optimization (0-4).
     */
    declare public readonly tuneLevel: pulumi.Output<number | undefined>;
    /**
     * Type of datastore backend. Valid values: `dir`, `zfs`, `lvm`, `cifs`, `nfs`, `s3`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Username for CIFS authentication. Optional for CIFS datastores.
     */
    declare public readonly username: pulumi.Output<string | undefined>;
    /**
     * LVM volume group name. Required for LVM datastores.
     */
    declare public readonly volumeGroup: pulumi.Output<string | undefined>;
    /**
     * ZFS dataset name. Optional for ZFS datastores.
     */
    declare public readonly zfsDataset: pulumi.Output<string | undefined>;
    /**
     * ZFS pool name. Required for ZFS datastores.
     */
    declare public readonly zfsPool: pulumi.Output<string | undefined>;

    /**
     * Create a Datastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatastoreArgs | DatastoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatastoreState | undefined;
            resourceInputs["blockSize"] = state?.blockSize;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["compression"] = state?.compression;
            resourceInputs["contents"] = state?.contents;
            resourceInputs["createBasePath"] = state?.createBasePath;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["export"] = state?.export;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["gcSchedule"] = state?.gcSchedule;
            resourceInputs["maxBackups"] = state?.maxBackups;
            resourceInputs["name"] = state?.name;
            resourceInputs["notifyLevel"] = state?.notifyLevel;
            resourceInputs["notifyUser"] = state?.notifyUser;
            resourceInputs["options"] = state?.options;
            resourceInputs["password"] = state?.password;
            resourceInputs["path"] = state?.path;
            resourceInputs["pruneSchedule"] = state?.pruneSchedule;
            resourceInputs["s3Bucket"] = state?.s3Bucket;
            resourceInputs["s3Client"] = state?.s3Client;
            resourceInputs["server"] = state?.server;
            resourceInputs["share"] = state?.share;
            resourceInputs["subDir"] = state?.subDir;
            resourceInputs["thinPool"] = state?.thinPool;
            resourceInputs["tuneLevel"] = state?.tuneLevel;
            resourceInputs["type"] = state?.type;
            resourceInputs["username"] = state?.username;
            resourceInputs["volumeGroup"] = state?.volumeGroup;
            resourceInputs["zfsDataset"] = state?.zfsDataset;
            resourceInputs["zfsPool"] = state?.zfsPool;
        } else {
            const args = argsOrState as DatastoreArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["blockSize"] = args?.blockSize;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["compression"] = args?.compression;
            resourceInputs["contents"] = args?.contents;
            resourceInputs["createBasePath"] = args?.createBasePath;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["export"] = args?.export;
            resourceInputs["fingerprint"] = args?.fingerprint;
            resourceInputs["gcSchedule"] = args?.gcSchedule;
            resourceInputs["maxBackups"] = args?.maxBackups;
            resourceInputs["name"] = args?.name;
            resourceInputs["notifyLevel"] = args?.notifyLevel;
            resourceInputs["notifyUser"] = args?.notifyUser;
            resourceInputs["options"] = args?.options;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["path"] = args?.path;
            resourceInputs["pruneSchedule"] = args?.pruneSchedule;
            resourceInputs["s3Bucket"] = args?.s3Bucket;
            resourceInputs["s3Client"] = args?.s3Client;
            resourceInputs["server"] = args?.server;
            resourceInputs["share"] = args?.share;
            resourceInputs["subDir"] = args?.subDir;
            resourceInputs["thinPool"] = args?.thinPool;
            resourceInputs["tuneLevel"] = args?.tuneLevel;
            resourceInputs["type"] = args?.type;
            resourceInputs["username"] = args?.username;
            resourceInputs["volumeGroup"] = args?.volumeGroup;
            resourceInputs["zfsDataset"] = args?.zfsDataset;
            resourceInputs["zfsPool"] = args?.zfsPool;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Datastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datastore resources.
 */
export interface DatastoreState {
    /**
     * Block size for ZFS datasets (e.g., `4K`, `8K`, `16K`).
     */
    blockSize?: pulumi.Input<string>;
    /**
     * Description for the datastore.
     */
    comment?: pulumi.Input<string>;
    /**
     * Compression algorithm for ZFS. Valid values: `on`, `off`, `lz4`, `zstd`, `gzip`.
     */
    compression?: pulumi.Input<string>;
    /**
     * Content types allowed on this datastore. Valid values: `backup`, `ct`, `iso`, `vztmpl`.
     */
    contents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create base directory if it doesn't exist. Only applicable for directory datastores.
     */
    createBasePath?: pulumi.Input<boolean>;
    /**
     * Whether the datastore is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Domain for CIFS authentication. Optional for CIFS datastores.
     */
    domain?: pulumi.Input<string>;
    /**
     * NFS export path. Required for NFS datastores.
     */
    export?: pulumi.Input<string>;
    /**
     * Certificate fingerprint for secure connections (network datastores).
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Garbage collection schedule in cron format (e.g., `daily`, `weekly`, or `0 3 * * 0`).
     */
    gcSchedule?: pulumi.Input<string>;
    /**
     * Maximum number of backups per guest. Set to 0 for unlimited backups.
     */
    maxBackups?: pulumi.Input<number>;
    /**
     * Unique identifier for the datastore.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification level. Valid values: `info`, `notice`, `warning`, `error`.
     */
    notifyLevel?: pulumi.Input<string>;
    /**
     * User to send datastore notifications to (e.g., `root@pam`).
     */
    notifyUser?: pulumi.Input<string>;
    /**
     * Mount options for network storage (e.g., `vers=3,soft`).
     */
    options?: pulumi.Input<string>;
    /**
     * Password for CIFS authentication. Optional for CIFS datastores.
     */
    password?: pulumi.Input<string>;
    /**
     * Path to the datastore. Required for directory datastores, optional for others.
     */
    path?: pulumi.Input<string>;
    /**
     * Prune schedule in cron format (e.g., `daily`, `weekly`, or `0 2 * * *`).
     */
    pruneSchedule?: pulumi.Input<string>;
    /**
     * S3 bucket name for S3 datastores. The bucket must be created beforehand.
     */
    s3Bucket?: pulumi.Input<string>;
    /**
     * S3 endpoint ID for S3 datastores. Must reference an existing S3 endpoint configuration.
     */
    s3Client?: pulumi.Input<string>;
    /**
     * Server hostname or IP address. Required for CIFS/NFS datastores.
     */
    server?: pulumi.Input<string>;
    /**
     * CIFS share name. Required for CIFS datastores.
     */
    share?: pulumi.Input<string>;
    /**
     * Subdirectory on the remote share. Optional for network datastores.
     */
    subDir?: pulumi.Input<string>;
    /**
     * LVM thin pool name. Optional for LVM datastores.
     */
    thinPool?: pulumi.Input<string>;
    /**
     * Tuning level for performance optimization (0-4).
     */
    tuneLevel?: pulumi.Input<number>;
    /**
     * Type of datastore backend. Valid values: `dir`, `zfs`, `lvm`, `cifs`, `nfs`, `s3`.
     */
    type?: pulumi.Input<string>;
    /**
     * Username for CIFS authentication. Optional for CIFS datastores.
     */
    username?: pulumi.Input<string>;
    /**
     * LVM volume group name. Required for LVM datastores.
     */
    volumeGroup?: pulumi.Input<string>;
    /**
     * ZFS dataset name. Optional for ZFS datastores.
     */
    zfsDataset?: pulumi.Input<string>;
    /**
     * ZFS pool name. Required for ZFS datastores.
     */
    zfsPool?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datastore resource.
 */
export interface DatastoreArgs {
    /**
     * Block size for ZFS datasets (e.g., `4K`, `8K`, `16K`).
     */
    blockSize?: pulumi.Input<string>;
    /**
     * Description for the datastore.
     */
    comment?: pulumi.Input<string>;
    /**
     * Compression algorithm for ZFS. Valid values: `on`, `off`, `lz4`, `zstd`, `gzip`.
     */
    compression?: pulumi.Input<string>;
    /**
     * Content types allowed on this datastore. Valid values: `backup`, `ct`, `iso`, `vztmpl`.
     */
    contents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create base directory if it doesn't exist. Only applicable for directory datastores.
     */
    createBasePath?: pulumi.Input<boolean>;
    /**
     * Whether the datastore is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Domain for CIFS authentication. Optional for CIFS datastores.
     */
    domain?: pulumi.Input<string>;
    /**
     * NFS export path. Required for NFS datastores.
     */
    export?: pulumi.Input<string>;
    /**
     * Certificate fingerprint for secure connections (network datastores).
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Garbage collection schedule in cron format (e.g., `daily`, `weekly`, or `0 3 * * 0`).
     */
    gcSchedule?: pulumi.Input<string>;
    /**
     * Maximum number of backups per guest. Set to 0 for unlimited backups.
     */
    maxBackups?: pulumi.Input<number>;
    /**
     * Unique identifier for the datastore.
     */
    name?: pulumi.Input<string>;
    /**
     * Notification level. Valid values: `info`, `notice`, `warning`, `error`.
     */
    notifyLevel?: pulumi.Input<string>;
    /**
     * User to send datastore notifications to (e.g., `root@pam`).
     */
    notifyUser?: pulumi.Input<string>;
    /**
     * Mount options for network storage (e.g., `vers=3,soft`).
     */
    options?: pulumi.Input<string>;
    /**
     * Password for CIFS authentication. Optional for CIFS datastores.
     */
    password?: pulumi.Input<string>;
    /**
     * Path to the datastore. Required for directory datastores, optional for others.
     */
    path?: pulumi.Input<string>;
    /**
     * Prune schedule in cron format (e.g., `daily`, `weekly`, or `0 2 * * *`).
     */
    pruneSchedule?: pulumi.Input<string>;
    /**
     * S3 bucket name for S3 datastores. The bucket must be created beforehand.
     */
    s3Bucket?: pulumi.Input<string>;
    /**
     * S3 endpoint ID for S3 datastores. Must reference an existing S3 endpoint configuration.
     */
    s3Client?: pulumi.Input<string>;
    /**
     * Server hostname or IP address. Required for CIFS/NFS datastores.
     */
    server?: pulumi.Input<string>;
    /**
     * CIFS share name. Required for CIFS datastores.
     */
    share?: pulumi.Input<string>;
    /**
     * Subdirectory on the remote share. Optional for network datastores.
     */
    subDir?: pulumi.Input<string>;
    /**
     * LVM thin pool name. Optional for LVM datastores.
     */
    thinPool?: pulumi.Input<string>;
    /**
     * Tuning level for performance optimization (0-4).
     */
    tuneLevel?: pulumi.Input<number>;
    /**
     * Type of datastore backend. Valid values: `dir`, `zfs`, `lvm`, `cifs`, `nfs`, `s3`.
     */
    type: pulumi.Input<string>;
    /**
     * Username for CIFS authentication. Optional for CIFS datastores.
     */
    username?: pulumi.Input<string>;
    /**
     * LVM volume group name. Required for LVM datastores.
     */
    volumeGroup?: pulumi.Input<string>;
    /**
     * ZFS dataset name. Optional for ZFS datastores.
     */
    zfsDataset?: pulumi.Input<string>;
    /**
     * ZFS pool name. Required for ZFS datastores.
     */
    zfsPool?: pulumi.Input<string>;
}
