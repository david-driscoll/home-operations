// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BucketNotificationRules extends pulumi.CustomResource {
    /**
     * Get an existing BucketNotificationRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketNotificationRulesState, opts?: pulumi.CustomResourceOptions): BucketNotificationRules {
        return new BucketNotificationRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b2:index/bucketNotificationRules:BucketNotificationRules';

    /**
     * Returns true if the given object is an instance of BucketNotificationRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketNotificationRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketNotificationRules.__pulumiType;
    }

    /**
     * The ID of the bucket.
     */
    declare public readonly bucketId: pulumi.Output<string>;
    declare public readonly bucketNotificationRulesId: pulumi.Output<string>;
    /**
     * An array of Event Notification Rules.
     */
    declare public readonly notificationRules: pulumi.Output<outputs.BucketNotificationRulesNotificationRule[]>;

    /**
     * Create a BucketNotificationRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketNotificationRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketNotificationRulesArgs | BucketNotificationRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketNotificationRulesState | undefined;
            resourceInputs["bucketId"] = state?.bucketId;
            resourceInputs["bucketNotificationRulesId"] = state?.bucketNotificationRulesId;
            resourceInputs["notificationRules"] = state?.notificationRules;
        } else {
            const args = argsOrState as BucketNotificationRulesArgs | undefined;
            if (args?.bucketId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if (args?.notificationRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'notificationRules'");
            }
            resourceInputs["bucketId"] = args?.bucketId;
            resourceInputs["bucketNotificationRulesId"] = args?.bucketNotificationRulesId;
            resourceInputs["notificationRules"] = args?.notificationRules;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketNotificationRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BucketNotificationRules resources.
 */
export interface BucketNotificationRulesState {
    /**
     * The ID of the bucket.
     */
    bucketId?: pulumi.Input<string>;
    bucketNotificationRulesId?: pulumi.Input<string>;
    /**
     * An array of Event Notification Rules.
     */
    notificationRules?: pulumi.Input<pulumi.Input<inputs.BucketNotificationRulesNotificationRule>[]>;
}

/**
 * The set of arguments for constructing a BucketNotificationRules resource.
 */
export interface BucketNotificationRulesArgs {
    /**
     * The ID of the bucket.
     */
    bucketId: pulumi.Input<string>;
    bucketNotificationRulesId?: pulumi.Input<string>;
    /**
     * An array of Event Notification Rules.
     */
    notificationRules: pulumi.Input<pulumi.Input<inputs.BucketNotificationRulesNotificationRule>[]>;
}
