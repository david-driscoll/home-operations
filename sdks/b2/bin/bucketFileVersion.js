"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketFileVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class BucketFileVersion extends pulumi.CustomResource {
    /**
     * Get an existing BucketFileVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketFileVersion(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BucketFileVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketFileVersion.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state?.action;
            resourceInputs["bucketFileVersionId"] = state?.bucketFileVersionId;
            resourceInputs["bucketId"] = state?.bucketId;
            resourceInputs["contentMd5"] = state?.contentMd5;
            resourceInputs["contentSha1"] = state?.contentSha1;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["fileId"] = state?.fileId;
            resourceInputs["fileInfo"] = state?.fileInfo;
            resourceInputs["fileName"] = state?.fileName;
            resourceInputs["serverSideEncryption"] = state?.serverSideEncryption;
            resourceInputs["size"] = state?.size;
            resourceInputs["source"] = state?.source;
            resourceInputs["uploadTimestamp"] = state?.uploadTimestamp;
        }
        else {
            const args = argsOrState;
            if (args?.bucketId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if (args?.fileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["bucketFileVersionId"] = args?.bucketFileVersionId;
            resourceInputs["bucketId"] = args?.bucketId;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["fileInfo"] = args?.fileInfo;
            resourceInputs["fileName"] = args?.fileName;
            resourceInputs["serverSideEncryption"] = args?.serverSideEncryption;
            resourceInputs["source"] = args?.source;
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["contentMd5"] = undefined /*out*/;
            resourceInputs["contentSha1"] = undefined /*out*/;
            resourceInputs["fileId"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["uploadTimestamp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketFileVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.BucketFileVersion = BucketFileVersion;
/** @internal */
BucketFileVersion.__pulumiType = 'b2:index/bucketFileVersion:BucketFileVersion';
//# sourceMappingURL=bucketFileVersion.js.map