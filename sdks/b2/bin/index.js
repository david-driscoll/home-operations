"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.getBucketNotificationRulesOutput = exports.getBucketNotificationRules = exports.getBucketFilesOutput = exports.getBucketFiles = exports.getBucketFileSignedUrlOutput = exports.getBucketFileSignedUrl = exports.getBucketFileOutput = exports.getBucketFile = exports.getBucketOutput = exports.getBucket = exports.getApplicationKeyOutput = exports.getApplicationKey = exports.getAccountInfoOutput = exports.getAccountInfo = exports.BucketNotificationRules = exports.BucketFileVersion = exports.Bucket = exports.ApplicationKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.ApplicationKey = null;
utilities.lazyLoad(exports, ["ApplicationKey"], () => require("./applicationKey"));
exports.Bucket = null;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));
exports.BucketFileVersion = null;
utilities.lazyLoad(exports, ["BucketFileVersion"], () => require("./bucketFileVersion"));
exports.BucketNotificationRules = null;
utilities.lazyLoad(exports, ["BucketNotificationRules"], () => require("./bucketNotificationRules"));
exports.getAccountInfo = null;
exports.getAccountInfoOutput = null;
utilities.lazyLoad(exports, ["getAccountInfo", "getAccountInfoOutput"], () => require("./getAccountInfo"));
exports.getApplicationKey = null;
exports.getApplicationKeyOutput = null;
utilities.lazyLoad(exports, ["getApplicationKey", "getApplicationKeyOutput"], () => require("./getApplicationKey"));
exports.getBucket = null;
exports.getBucketOutput = null;
utilities.lazyLoad(exports, ["getBucket", "getBucketOutput"], () => require("./getBucket"));
exports.getBucketFile = null;
exports.getBucketFileOutput = null;
utilities.lazyLoad(exports, ["getBucketFile", "getBucketFileOutput"], () => require("./getBucketFile"));
exports.getBucketFileSignedUrl = null;
exports.getBucketFileSignedUrlOutput = null;
utilities.lazyLoad(exports, ["getBucketFileSignedUrl", "getBucketFileSignedUrlOutput"], () => require("./getBucketFileSignedUrl"));
exports.getBucketFiles = null;
exports.getBucketFilesOutput = null;
utilities.lazyLoad(exports, ["getBucketFiles", "getBucketFilesOutput"], () => require("./getBucketFiles"));
exports.getBucketNotificationRules = null;
exports.getBucketNotificationRulesOutput = null;
utilities.lazyLoad(exports, ["getBucketNotificationRules", "getBucketNotificationRulesOutput"], () => require("./getBucketNotificationRules"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "b2:index/applicationKey:ApplicationKey":
                return new exports.ApplicationKey(name, undefined, { urn });
            case "b2:index/bucket:Bucket":
                return new exports.Bucket(name, undefined, { urn });
            case "b2:index/bucketFileVersion:BucketFileVersion":
                return new exports.BucketFileVersion(name, undefined, { urn });
            case "b2:index/bucketNotificationRules:BucketNotificationRules":
                return new exports.BucketNotificationRules(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("b2", "index/applicationKey", _module);
pulumi.runtime.registerResourceModule("b2", "index/bucket", _module);
pulumi.runtime.registerResourceModule("b2", "index/bucketFileVersion", _module);
pulumi.runtime.registerResourceModule("b2", "index/bucketNotificationRules", _module);
pulumi.runtime.registerResourcePackage("b2", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:b2") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map