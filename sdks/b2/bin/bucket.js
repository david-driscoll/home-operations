"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Bucket(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bucket.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["b2BucketId"] = state?.b2BucketId;
            resourceInputs["bucketId"] = state?.bucketId;
            resourceInputs["bucketInfo"] = state?.bucketInfo;
            resourceInputs["bucketName"] = state?.bucketName;
            resourceInputs["bucketType"] = state?.bucketType;
            resourceInputs["corsRules"] = state?.corsRules;
            resourceInputs["defaultServerSideEncryption"] = state?.defaultServerSideEncryption;
            resourceInputs["fileLockConfigurations"] = state?.fileLockConfigurations;
            resourceInputs["lifecycleRules"] = state?.lifecycleRules;
            resourceInputs["options"] = state?.options;
            resourceInputs["revision"] = state?.revision;
        }
        else {
            const args = argsOrState;
            if (args?.bucketName === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if (args?.bucketType === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketType'");
            }
            resourceInputs["b2BucketId"] = args?.b2BucketId;
            resourceInputs["bucketInfo"] = args?.bucketInfo;
            resourceInputs["bucketName"] = args?.bucketName;
            resourceInputs["bucketType"] = args?.bucketType;
            resourceInputs["corsRules"] = args?.corsRules;
            resourceInputs["defaultServerSideEncryption"] = args?.defaultServerSideEncryption;
            resourceInputs["fileLockConfigurations"] = args?.fileLockConfigurations;
            resourceInputs["lifecycleRules"] = args?.lifecycleRules;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["bucketId"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Bucket = Bucket;
/** @internal */
Bucket.__pulumiType = 'b2:index/bucket:Bucket';
//# sourceMappingURL=bucket.js.map