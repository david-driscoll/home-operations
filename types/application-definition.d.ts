/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import type { Roles } from "@components/constants.ts";

/**
 * Schema for Application Definition Custom Resource
 */
type RolesKeys = keyof typeof Roles;
type RolesValues = (typeof Roles)[RolesKeys];
export interface ApplicationDefinitionSchema {
  /**
   * APIVersion defines the versioned schema of this representation of an object.
   * Servers should convert recognized schemas to the latest internal value, and
   * may reject unrecognized values.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents.
   * Servers may infer this from the endpoint the client submits requests to.
   * Cannot be updated.
   * In CamelCase.
   * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata: {
    name: string;
    namespace?: string;
  };
  spec: {
    name: string;
    slug?: string;
    icon?: string;
    url?: string;
    description?: string;
    category: string;
    access_policy?: {
      groups?: RolesValues[];
      entitlements?: string[];
    };
    uptime?: {
      http?: Http;
      ping?: Ping;
      docker?: Docker;
      dns?: Dns;
      gamedig?: Gamedig;
      group?: Group;
      "grpc-keyword"?: GrpcKeyword;
      "json-query"?: JsonQuery;
      "kafka-producer"?: KafkaProducer;
      keyword?: Keyword;
      mongodb?: Mongodb;
      mqtt?: Mqtt;
      mysql?: Mysql;
      port?: Port;
      postgres?: Postgres;
      push?: Push;
      radius?: Radius;
      "real-browser"?: RealBrowser;
      redis?: Redis;
      steam?: Steam;
      sqlserver?: Sqlserver;
      "tailscale-ping"?: TailscalePing;
    };
    uptimeFrom?: {
      type: "configMap" | "secret";
      name: string;
    };
    authentik?: {
      ssf?: Ssf;
      scim?: Scim;
      saml?: Saml;
      radius?: Radius1;
      rac?: Rac;
      proxy?: Proxy;
      oauth2?: Oauth2;
      microsoftEntra?: MicrosoftEntra;
      ldap?: Ldap;
      googleWorkspace?: GoogleWorkspace;
    };
    authentikFrom?: {
      type: "configMap" | "secret";
      name: string;
    };
  };
}
export interface Http {
  type: "http";
  url?: string;
  method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS";
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_redirects?: string;
  max_retries?: number;
  parent_name?: string;
  proxy_id?: string;
  resend_interval?: string;
  retry_interval?: number;
  timeout?: number;
  upside_down?: boolean;
  tls_ca?: string;
  tls_cert?: string;
  tls_key?: string;
  ignore_tls?: boolean;
  expiry_notification?: boolean;
  http_body_encoding?: "none" | "base64" | "utf8";
  body?: string;
  auth_domain?: string;
  authMethod?: "basic" | "oauth" | "none";
  auth_workstation?: string;
  basic_auth_user?: string;
  basic_auth_pass?: string;
  oauth_auth_method?: "client_credentials" | "password" | "none";
  oauth_client_id?: string;
  oauth_client_secret?: string;
  oauth_scopes?: string;
  oauth_token_url?: string;
}
export interface Ping {
  type: "ping";
  hostname?: string;
  packet_size?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Docker {
  type: "docker";
  docker_container?: string;
  docker_host?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Dns {
  type: "dns";
  hostname?: string;
  dns_resolve_server?: string;
  dns_resolve_type: "A" | "AAAA" | "CNAME" | "MX" | "TXT" | "SRV" | "PTR" | "SOA" | "NS";
  port?: number;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Gamedig {
  type: "gamedig";
  game?: string;
  gamedig_given_port_only?: string;
  hostname?: string;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  port?: number;
  retry_interval?: number;
  upside_down?: boolean;
  accepted_statuscodes?: string[];
  active?: boolean;
  description?: string;
}
export interface Group {
  type: "group";
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface GrpcKeyword {
  type: "grpc-keyword";
  grpc_body?: string;
  grpc_enable_tls?: string;
  grpc_metadata?: string;
  grpc_method?: string;
  grpc_protobuf?: string;
  grpc_service_name?: string;
  grpc_url?: string;
  interval?: number;
  invert_keyword?: string;
  keyword?: string;
  max_retries?: number;
  max_redirects?: string;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
  accepted_statuscodes?: string[];
  active?: boolean;
  description?: string;
}
export interface JsonQuery {
  type: "json-query";
  url?: string;
  json_path?: string;
  expected_value?: string;
  method?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  auth_domain?: string;
  authMethod?: string;
  auth_workstation?: string;
  basic_auth_user?: string;
  basic_auth_pass?: string;
  body?: string;
  expiry_notification?: boolean;
  http_body_encoding?: string;
  ignore_tls?: boolean;
  interval?: number;
  max_redirects?: string;
  max_retries?: number;
  oauth_auth_method?: string;
  oauth_client_id?: string;
  oauth_client_secret?: string;
  oauth_scopes?: string;
  oauth_token_url?: string;
  parent_name?: string;
  proxy_id?: string;
  resend_interval?: string;
  retry_interval?: number;
  timeout?: number;
  tls_ca?: string;
  tls_cert?: string;
  tls_key?: string;
  upside_down?: boolean;
}
export interface KafkaProducer {
  type: "kafka-producer";
  kafka_producer_sasl_options_mechanism?: "plain" | "scram-sha-256" | "scram-sha-512";
  kafka_producer_ssl?: string;
  kafka_producer_brokers?: string;
  kafka_producer_topic?: string;
  kafka_producer_message?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Keyword {
  type: "keyword";
  url?: string;
  keyword?: string;
  invert_keyword?: string;
  method?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  auth_domain?: string;
  authMethod?: string;
  auth_workstation?: string;
  basic_auth_user?: string;
  basic_auth_pass?: string;
  body?: string;
  expiry_notification?: boolean;
  http_body_encoding?: string;
  ignore_tls?: boolean;
  interval?: number;
  max_redirects?: string;
  max_retries?: number;
  oauth_auth_method?: string;
  oauth_client_id?: string;
  oauth_client_secret?: string;
  oauth_scopes?: string;
  oauth_token_url?: string;
  parent_name?: string;
  proxy_id?: string;
  resend_interval?: string;
  retry_interval?: number;
  timeout?: number;
  tls_ca?: string;
  tls_cert?: string;
  tls_key?: string;
  upside_down?: boolean;
}
export interface Mongodb {
  type: "mongodb";
  database_connection_string?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Mqtt {
  type: "mqtt";
  mqtt_check_type: "connect" | "publish" | "subscribe";
  mqtt_username?: string;
  mqtt_password?: string;
  mqtt_topic?: string;
  mqtt_success_message?: string;
  hostname?: string;
  port?: number;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Mysql {
  type: "mysql";
  database_connection_string?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  radius_password?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Port {
  type: "port";
  hostname?: string;
  port?: number;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Postgres {
  type: "postgres";
  database_connection_string?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Push {
  type: "push";
  push_token?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Radius {
  type: "radius";
  hostname?: string;
  port?: number;
  radius_called_station_id?: string;
  radius_calling_station_id?: string;
  radius_password?: string;
  radius_secret?: string;
  radius_username?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface RealBrowser {
  type: "real-browser";
  remote_browser?: string;
  remote_browsers_toggle?: string;
  url?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Redis {
  type: "redis";
  database_connection_string?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Steam {
  type: "steam";
  hostname?: string;
  port?: number;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Sqlserver {
  type: "sqlserver";
  database_connection_string?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface TailscalePing {
  type: "tailscale-ping";
  hostname?: string;
  accepted_statuscodes?: string[];
  active?: boolean;
  interval?: number;
  max_retries?: number;
  parent_name?: string;
  retry_interval?: number;
  upside_down?: boolean;
}
export interface Ssf {
  type: "ssf";
  eventRetention?: string;
  jwtFederationProviders?: number[];
  providerSsfId?: string;
  signingKey?: string;
}
export interface Scim {
  type: "scim";
  compatibilityMode?: string;
  dryRun?: boolean;
  excludeUsersServiceAccount?: boolean;
  filterGroup?: string;
  propertyMappings?: string[];
  propertyMappingsGroups?: string[];
  providerScimId?: string;
  token: string;
  url: string;
}
export interface Saml {
  type: "saml";
  acsUrl: string;
  assertionValidNotBefore?: string;
  assertionValidNotOnOrAfter?: string;
  audience?: string;
  authenticationFlow?: string;
  authnContextClassRefMapping?: string;
  authorizationFlow?: string;
  defaultRelayState?: string;
  digestAlgorithm?: string;
  encryptionKp?: string;
  invalidationFlow?: string;
  issuer?: string;
  nameIdMapping?: string;
  propertyMappings?: string[];
  providerSamlId?: string;
  sessionValidNotOnOrAfter?: string;
  signAssertion?: boolean;
  signResponse?: boolean;
  signatureAlgorithm?: string;
  signingKp?: string;
  spBinding?: string;
  urlSloPost?: string;
  urlSloRedirect?: string;
  urlSsoInit?: string;
  urlSsoPost?: string;
  urlSsoRedirect?: string;
  verificationKp?: string;
}
export interface Radius1 {
  type: "radius";
  authorizationFlow?: string;
  clientNetworks?: string;
  invalidationFlow?: string;
  mfaSupport?: boolean;
  propertyMappings?: string[];
  providerRadiusId?: string;
  sharedSecret: string;
}
export interface Rac {
  type: "rac";
  authenticationFlow?: string;
  authorizationFlow?: string;
  connectionExpiry?: string;
  propertyMappings?: string[];
  providerRacId?: string;
  settings?: string;
}
export interface Proxy {
  type: "proxy";
  accessTokenValidity?: string;
  authenticationFlow?: string;
  authorizationFlow?: string;
  basicAuthEnabled?: boolean;
  basicAuthPasswordAttribute?: string;
  basicAuthUsernameAttribute?: string;
  cookieDomain?: string;
  externalHost: string;
  interceptHeaderAuth?: boolean;
  internalHost?: string;
  internalHostSslValidation?: boolean;
  invalidationFlow?: string;
  jwksSources?: string[];
  jwtFederationProviders?: number[];
  jwtFederationSources?: string[];
  mode?: "proxy" | "forward_single" | "forward_domain";
  name?: string;
  propertyMappings?: string[];
  providerProxyId?: string;
  refreshTokenValidity?: string;
  skipPathRegex?: string;
}
export interface Oauth2 {
  type: "oauth2";
  accessCodeValidity?: string;
  accessTokenValidity?: string;
  allowedRedirectUris?: {
    matching_mode?: string;
    url: string;
  }[];
  authenticationFlow?: string;
  authorizationFlow?: string;
  clientId?: string;
  clientSecret?: string;
  clienttype: string;
  encryptionKey?: string;
  includeClaimsInIdToken?: boolean;
  invalidationFlow?: string;
  issuerMode?: string;
  jwksSources?: string[];
  jwtFederationProviders?: number[];
  jwtFederationSources?: string[];
  propertyMappings?: string[];
  providerOauth2Id?: string;
  refreshTokenValidity?: string;
  signingKey?: string;
  subMode?: string;
}
export interface MicrosoftEntra {
  type: "microsoftEntra";
  clientId: string;
  clientSecret: string;
  dryRun?: boolean;
  excludeUsersServiceAccount?: boolean;
  filterGroup?: string;
  groupDeleteAction?: string;
  propertyMappings?: string[];
  propertyMappingsGroups?: string[];
  providerMicrosoftEntraId?: string;
  tenantId: string;
  userDeleteAction?: string;
}
export interface Ldap {
  type: "ldap";
  baseDn: string;
  bindFlow?: string;
  bindMode?: string;
  certificate?: string;
  gidStartNumber?: number;
  mfaSupport?: boolean;
  providerLdapId?: string;
  searchMode?: string;
  tlsServerName?: string;
  uidStartNumber?: number;
  unbindFlow?: string;
}
export interface GoogleWorkspace {
  type: "googleWorkspace";
  credentials?: string;
  defaultGroupEmailDomain: string;
  delegatedSubject?: string;
  dryRun?: boolean;
  excludeUsersServiceAccount?: boolean;
  filterGroup?: string;
  groupDeleteAction?: string;
  propertyMappings?: string[];
  propertyMappingsGroups?: string[];
  providerGoogleWorkspaceId?: string;
  userDeleteAction?: string;
}
